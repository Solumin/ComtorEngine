// $ANTLR 3.3 Nov 30, 2010 12:50:56 COMTOR.g 2012-11-20 12:17:30

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class COMTORParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ANNOTATION", "IMPORTS", "NORMAL_CLASS", "TYPE_PARAMS", "ACCESS_MODIFIER", "BODY", "METHOD_DEC", "PARAMS", "EMPTY", "TYPE", "VAR_DEF", "ARRAY", "CONSTRUCTOR_CALL", "ARGUMENTS", "ANNOTATIONS", "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_BLOCK", "DO_WHILE_BLOCK", "SWITCH_STATEMENT", "SYNCHRONIZED_BLOCK", "RETURN_STATEMENT", "LABEL", "FOR_BLOCK", "INIT", "CAST", "CONDITION", "TRY_STATEMENT", "INITIAL_VALUE", "COMMENT_STATEMENT", "CONSTRUCTOR", "PACKAGE_PRIVATE", "INNER_CLASS", "EMPTY_ARRAY", "PACKAGE", "IDENTIFIER", "INTLITERAL", "LONGLITERAL", "FLOATLITERAL", "DOUBLELITERAL", "CHARLITERAL", "UNICODECHARLITERAL", "STRINGLITERAL", "TRUE", "FALSE", "NULL", "COMMENT", "LINE_COMMENT", "IntegerNumber", "LongSuffix", "HexPrefix", "HexDigit", "Exponent", "NonIntegerNumber", "FloatSuffix", "DoubleSuffix", "EscapeSequence", "UNICODECHAR", "WS", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "GOTO", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMI", "COMMA", "DOT", "ELLIPSIS", "EQ", "BANG", "TILDE", "QUES", "COLON", "EQEQ", "AMPAMP", "BARBAR", "PLUSPLUS", "SUBSUB", "PLUS", "SUB", "STAR", "SLASH", "AMP", "BAR", "CARET", "PERCENT", "PLUSEQ", "SUBEQ", "STAREQ", "SLASHEQ", "AMPEQ", "BAREQ", "CARETEQ", "PERCENTEQ", "MONKEYS_AT", "BANGEQ", "GT", "LT", "IdentifierStart", "IdentifierPart", "SurrogateIdentifer"
    };
    public static final int EOF=-1;
    public static final int ANNOTATION=4;
    public static final int IMPORTS=5;
    public static final int NORMAL_CLASS=6;
    public static final int TYPE_PARAMS=7;
    public static final int ACCESS_MODIFIER=8;
    public static final int BODY=9;
    public static final int METHOD_DEC=10;
    public static final int PARAMS=11;
    public static final int EMPTY=12;
    public static final int TYPE=13;
    public static final int VAR_DEF=14;
    public static final int ARRAY=15;
    public static final int CONSTRUCTOR_CALL=16;
    public static final int ARGUMENTS=17;
    public static final int ANNOTATIONS=18;
    public static final int IF_STATEMENT=19;
    public static final int ELSE_STATEMENT=20;
    public static final int WHILE_BLOCK=21;
    public static final int DO_WHILE_BLOCK=22;
    public static final int SWITCH_STATEMENT=23;
    public static final int SYNCHRONIZED_BLOCK=24;
    public static final int RETURN_STATEMENT=25;
    public static final int LABEL=26;
    public static final int FOR_BLOCK=27;
    public static final int INIT=28;
    public static final int CAST=29;
    public static final int CONDITION=30;
    public static final int TRY_STATEMENT=31;
    public static final int INITIAL_VALUE=32;
    public static final int COMMENT_STATEMENT=33;
    public static final int CONSTRUCTOR=34;
    public static final int PACKAGE_PRIVATE=35;
    public static final int INNER_CLASS=36;
    public static final int EMPTY_ARRAY=37;
    public static final int PACKAGE=38;
    public static final int IDENTIFIER=39;
    public static final int INTLITERAL=40;
    public static final int LONGLITERAL=41;
    public static final int FLOATLITERAL=42;
    public static final int DOUBLELITERAL=43;
    public static final int CHARLITERAL=44;
    public static final int UNICODECHARLITERAL=45;
    public static final int STRINGLITERAL=46;
    public static final int TRUE=47;
    public static final int FALSE=48;
    public static final int NULL=49;
    public static final int COMMENT=50;
    public static final int LINE_COMMENT=51;
    public static final int IntegerNumber=52;
    public static final int LongSuffix=53;
    public static final int HexPrefix=54;
    public static final int HexDigit=55;
    public static final int Exponent=56;
    public static final int NonIntegerNumber=57;
    public static final int FloatSuffix=58;
    public static final int DoubleSuffix=59;
    public static final int EscapeSequence=60;
    public static final int UNICODECHAR=61;
    public static final int WS=62;
    public static final int ABSTRACT=63;
    public static final int ASSERT=64;
    public static final int BOOLEAN=65;
    public static final int BREAK=66;
    public static final int BYTE=67;
    public static final int CASE=68;
    public static final int CATCH=69;
    public static final int CHAR=70;
    public static final int CLASS=71;
    public static final int CONST=72;
    public static final int CONTINUE=73;
    public static final int DEFAULT=74;
    public static final int DO=75;
    public static final int DOUBLE=76;
    public static final int ELSE=77;
    public static final int ENUM=78;
    public static final int EXTENDS=79;
    public static final int FINAL=80;
    public static final int FINALLY=81;
    public static final int FLOAT=82;
    public static final int FOR=83;
    public static final int GOTO=84;
    public static final int IF=85;
    public static final int IMPLEMENTS=86;
    public static final int IMPORT=87;
    public static final int INSTANCEOF=88;
    public static final int INT=89;
    public static final int INTERFACE=90;
    public static final int LONG=91;
    public static final int NATIVE=92;
    public static final int NEW=93;
    public static final int PRIVATE=94;
    public static final int PROTECTED=95;
    public static final int PUBLIC=96;
    public static final int RETURN=97;
    public static final int SHORT=98;
    public static final int STATIC=99;
    public static final int STRICTFP=100;
    public static final int SUPER=101;
    public static final int SWITCH=102;
    public static final int SYNCHRONIZED=103;
    public static final int THIS=104;
    public static final int THROW=105;
    public static final int THROWS=106;
    public static final int TRANSIENT=107;
    public static final int TRY=108;
    public static final int VOID=109;
    public static final int VOLATILE=110;
    public static final int WHILE=111;
    public static final int LPAREN=112;
    public static final int RPAREN=113;
    public static final int LBRACE=114;
    public static final int RBRACE=115;
    public static final int LBRACKET=116;
    public static final int RBRACKET=117;
    public static final int SEMI=118;
    public static final int COMMA=119;
    public static final int DOT=120;
    public static final int ELLIPSIS=121;
    public static final int EQ=122;
    public static final int BANG=123;
    public static final int TILDE=124;
    public static final int QUES=125;
    public static final int COLON=126;
    public static final int EQEQ=127;
    public static final int AMPAMP=128;
    public static final int BARBAR=129;
    public static final int PLUSPLUS=130;
    public static final int SUBSUB=131;
    public static final int PLUS=132;
    public static final int SUB=133;
    public static final int STAR=134;
    public static final int SLASH=135;
    public static final int AMP=136;
    public static final int BAR=137;
    public static final int CARET=138;
    public static final int PERCENT=139;
    public static final int PLUSEQ=140;
    public static final int SUBEQ=141;
    public static final int STAREQ=142;
    public static final int SLASHEQ=143;
    public static final int AMPEQ=144;
    public static final int BAREQ=145;
    public static final int CARETEQ=146;
    public static final int PERCENTEQ=147;
    public static final int MONKEYS_AT=148;
    public static final int BANGEQ=149;
    public static final int GT=150;
    public static final int LT=151;
    public static final int IdentifierStart=152;
    public static final int IdentifierPart=153;
    public static final int SurrogateIdentifer=154;

    // delegates
    // delegators


        public COMTORParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public COMTORParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[407+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return COMTORParser.tokenNames; }
    public String getGrammarFileName() { return "COMTOR.g"; }


    public static class start_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "start"
    // COMTOR.g:66:1: start : compilationUnit ;
    public final COMTORParser.start_return start() throws RecognitionException {
        COMTORParser.start_return retval = new COMTORParser.start_return();
        retval.start = input.LT(1);
        int start_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.compilationUnit_return compilationUnit1 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // COMTOR.g:70:7: ( compilationUnit )
            // COMTOR.g:70:9: compilationUnit
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_compilationUnit_in_start174);
            compilationUnit1=compilationUnit();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, compilationUnit1.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, start_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "start"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // COMTOR.g:73:1: compilationUnit : ( ( annotations )? importDeclarations ( typeDeclaration )* -> ^( ( typeDeclaration ( importDeclarations )? )* ( annotations )? ) | ( annotations )? packageDeclaration importDeclarations ( typeDeclaration )* -> ^( packageDeclaration ( typeDeclaration ( importDeclarations )? )* ( annotations )? ) );
    public final COMTORParser.compilationUnit_return compilationUnit() throws RecognitionException {
        COMTORParser.compilationUnit_return retval = new COMTORParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.annotations_return annotations2 = null;

        COMTORParser.importDeclarations_return importDeclarations3 = null;

        COMTORParser.typeDeclaration_return typeDeclaration4 = null;

        COMTORParser.annotations_return annotations5 = null;

        COMTORParser.packageDeclaration_return packageDeclaration6 = null;

        COMTORParser.importDeclarations_return importDeclarations7 = null;

        COMTORParser.typeDeclaration_return typeDeclaration8 = null;


        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_importDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule importDeclarations");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // COMTOR.g:74:5: ( ( annotations )? importDeclarations ( typeDeclaration )* -> ^( ( typeDeclaration ( importDeclarations )? )* ( annotations )? ) | ( annotations )? packageDeclaration importDeclarations ( typeDeclaration )* -> ^( packageDeclaration ( typeDeclaration ( importDeclarations )? )* ( annotations )? ) )
            int alt5=2;
            alt5 = dfa5.predict(input);
            switch (alt5) {
                case 1 :
                    // COMTOR.g:75:6: ( annotations )? importDeclarations ( typeDeclaration )*
                    {
                    // COMTOR.g:75:6: ( annotations )?
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==MONKEYS_AT) ) {
                        int LA1_1 = input.LA(2);

                        if ( (LA1_1==IDENTIFIER) ) {
                            int LA1_3 = input.LA(3);

                            if ( (synpred1_COMTOR()) ) {
                                alt1=1;
                            }
                        }
                    }
                    switch (alt1) {
                        case 1 :
                            // COMTOR.g:0:0: annotations
                            {
                            pushFollow(FOLLOW_annotations_in_compilationUnit197);
                            annotations2=annotations();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_annotations.add(annotations2.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_importDeclarations_in_compilationUnit208);
                    importDeclarations3=importDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importDeclarations.add(importDeclarations3.getTree());
                    // COMTOR.g:77:9: ( typeDeclaration )*
                    loop2:
                    do {
                        int alt2=2;
                        int LA2_0 = input.LA(1);

                        if ( (LA2_0==ABSTRACT||LA2_0==CLASS||LA2_0==ENUM||LA2_0==FINAL||LA2_0==INTERFACE||LA2_0==NATIVE||(LA2_0>=PRIVATE && LA2_0<=PUBLIC)||(LA2_0>=STATIC && LA2_0<=STRICTFP)||LA2_0==SYNCHRONIZED||LA2_0==TRANSIENT||LA2_0==VOLATILE||LA2_0==SEMI||LA2_0==MONKEYS_AT) ) {
                            alt2=1;
                        }


                        switch (alt2) {
                    	case 1 :
                    	    // COMTOR.g:77:10: typeDeclaration
                    	    {
                    	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit219);
                    	    typeDeclaration4=typeDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration4.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop2;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: importDeclarations, annotations, typeDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 78:4: -> ^( ( typeDeclaration ( importDeclarations )? )* ( annotations )? )
                    {
                        // COMTOR.g:78:7: ^( ( typeDeclaration ( importDeclarations )? )* ( annotations )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PACKAGE, "NONE"), root_1);

                        // COMTOR.g:78:55: ( typeDeclaration ( importDeclarations )? )*
                        while ( stream_typeDeclaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
                            // COMTOR.g:78:72: ( importDeclarations )?
                            if ( stream_importDeclarations.hasNext() ) {
                                adaptor.addChild(root_1, stream_importDeclarations.nextTree());

                            }
                            stream_importDeclarations.reset();

                        }
                        stream_typeDeclaration.reset();
                        // COMTOR.g:78:94: ( annotations )?
                        if ( stream_annotations.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotations.nextTree());

                        }
                        stream_annotations.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:80:3: ( annotations )? packageDeclaration importDeclarations ( typeDeclaration )*
                    {
                    // COMTOR.g:80:3: ( annotations )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==MONKEYS_AT) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // COMTOR.g:0:0: annotations
                            {
                            pushFollow(FOLLOW_annotations_in_compilationUnit248);
                            annotations5=annotations();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_annotations.add(annotations5.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit253);
                    packageDeclaration6=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_packageDeclaration.add(packageDeclaration6.getTree());
                    pushFollow(FOLLOW_importDeclarations_in_compilationUnit263);
                    importDeclarations7=importDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_importDeclarations.add(importDeclarations7.getTree());
                    // COMTOR.g:83:8: ( typeDeclaration )*
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( (LA4_0==ABSTRACT||LA4_0==CLASS||LA4_0==ENUM||LA4_0==FINAL||LA4_0==INTERFACE||LA4_0==NATIVE||(LA4_0>=PRIVATE && LA4_0<=PUBLIC)||(LA4_0>=STATIC && LA4_0<=STRICTFP)||LA4_0==SYNCHRONIZED||LA4_0==TRANSIENT||LA4_0==VOLATILE||LA4_0==SEMI||LA4_0==MONKEYS_AT) ) {
                            alt4=1;
                        }


                        switch (alt4) {
                    	case 1 :
                    	    // COMTOR.g:83:9: typeDeclaration
                    	    {
                    	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit273);
                    	    typeDeclaration8=typeDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration8.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop4;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: importDeclarations, typeDeclaration, packageDeclaration, annotations
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 84:4: -> ^( packageDeclaration ( typeDeclaration ( importDeclarations )? )* ( annotations )? )
                    {
                        // COMTOR.g:84:7: ^( packageDeclaration ( typeDeclaration ( importDeclarations )? )* ( annotations )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_packageDeclaration.nextNode(), root_1);

                        // COMTOR.g:84:28: ( typeDeclaration ( importDeclarations )? )*
                        while ( stream_typeDeclaration.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
                            // COMTOR.g:84:45: ( importDeclarations )?
                            if ( stream_importDeclarations.hasNext() ) {
                                adaptor.addChild(root_1, stream_importDeclarations.nextTree());

                            }
                            stream_importDeclarations.reset();

                        }
                        stream_typeDeclaration.reset();
                        // COMTOR.g:84:67: ( annotations )?
                        if ( stream_annotations.hasNext() ) {
                            adaptor.addChild(root_1, stream_annotations.nextTree());

                        }
                        stream_annotations.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // COMTOR.g:87:1: packageDeclaration : 'package' qualifiedName ';' -> qualifiedName ;
    public final COMTORParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        COMTORParser.packageDeclaration_return retval = new COMTORParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal9=null;
        Token char_literal11=null;
        COMTORParser.qualifiedName_return qualifiedName10 = null;


        CommonTree string_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        RewriteRuleTokenStream stream_PACKAGE=new RewriteRuleTokenStream(adaptor,"token PACKAGE");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // COMTOR.g:88:5: ( 'package' qualifiedName ';' -> qualifiedName )
            // COMTOR.g:88:9: 'package' qualifiedName ';'
            {
            string_literal9=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageDeclaration318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PACKAGE.add(string_literal9);

            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration320);
            qualifiedName10=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName10.getTree());
            char_literal11=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal11);



            // AST REWRITE
            // elements: qualifiedName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 89:9: -> qualifiedName
            {
                adaptor.addChild(root_0, stream_qualifiedName.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclarations"
    // COMTOR.g:92:1: importDeclarations : ( importDeclaration )* -> ^( IMPORTS ( importDeclaration )* ) ;
    public final COMTORParser.importDeclarations_return importDeclarations() throws RecognitionException {
        COMTORParser.importDeclarations_return retval = new COMTORParser.importDeclarations_return();
        retval.start = input.LT(1);
        int importDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.importDeclaration_return importDeclaration12 = null;


        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // COMTOR.g:93:2: ( ( importDeclaration )* -> ^( IMPORTS ( importDeclaration )* ) )
            // COMTOR.g:93:4: ( importDeclaration )*
            {
            // COMTOR.g:93:4: ( importDeclaration )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==IMPORT) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // COMTOR.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_importDeclarations348);
            	    importDeclaration12=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importDeclaration.add(importDeclaration12.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);



            // AST REWRITE
            // elements: importDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 93:23: -> ^( IMPORTS ( importDeclaration )* )
            {
                // COMTOR.g:93:26: ^( IMPORTS ( importDeclaration )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORTS, "IMPORTS"), root_1);

                // COMTOR.g:93:36: ( importDeclaration )*
                while ( stream_importDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_importDeclaration.nextTree());

                }
                stream_importDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, importDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclarations"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // COMTOR.g:96:1: importDeclaration : ( 'import' ( 'static' )? ( IDENTIFIER '.' '*' ) ';' -> ^( IMPORT ( 'static' )? IDENTIFIER '.' '*' ) | 'import' ( 'static' )? i+= IDENTIFIER (i+= '.' i+= IDENTIFIER )+ (s+= '.' s+= '*' )? ';' -> ^( IMPORT ( 'static' )? ( $i)+ ( $s)* ) );
    public final COMTORParser.importDeclaration_return importDeclaration() throws RecognitionException {
        COMTORParser.importDeclaration_return retval = new COMTORParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal13=null;
        Token string_literal14=null;
        Token IDENTIFIER15=null;
        Token char_literal16=null;
        Token char_literal17=null;
        Token char_literal18=null;
        Token string_literal19=null;
        Token string_literal20=null;
        Token char_literal21=null;
        Token i=null;
        Token s=null;
        List list_i=null;
        List list_s=null;

        CommonTree string_literal13_tree=null;
        CommonTree string_literal14_tree=null;
        CommonTree IDENTIFIER15_tree=null;
        CommonTree char_literal16_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal18_tree=null;
        CommonTree string_literal19_tree=null;
        CommonTree string_literal20_tree=null;
        CommonTree char_literal21_tree=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // COMTOR.g:97:5: ( 'import' ( 'static' )? ( IDENTIFIER '.' '*' ) ';' -> ^( IMPORT ( 'static' )? IDENTIFIER '.' '*' ) | 'import' ( 'static' )? i+= IDENTIFIER (i+= '.' i+= IDENTIFIER )+ (s+= '.' s+= '*' )? ';' -> ^( IMPORT ( 'static' )? ( $i)+ ( $s)* ) )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==IMPORT) ) {
                int LA11_1 = input.LA(2);

                if ( (LA11_1==STATIC) ) {
                    int LA11_2 = input.LA(3);

                    if ( (LA11_2==IDENTIFIER) ) {
                        int LA11_3 = input.LA(4);

                        if ( (LA11_3==DOT) ) {
                            int LA11_4 = input.LA(5);

                            if ( (LA11_4==STAR) ) {
                                alt11=1;
                            }
                            else if ( (LA11_4==IDENTIFIER) ) {
                                alt11=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 11, 4, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 11, 3, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 2, input);

                        throw nvae;
                    }
                }
                else if ( (LA11_1==IDENTIFIER) ) {
                    int LA11_3 = input.LA(3);

                    if ( (LA11_3==DOT) ) {
                        int LA11_4 = input.LA(4);

                        if ( (LA11_4==STAR) ) {
                            alt11=1;
                        }
                        else if ( (LA11_4==IDENTIFIER) ) {
                            alt11=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 11, 4, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 11, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // COMTOR.g:98:6: 'import' ( 'static' )? ( IDENTIFIER '.' '*' ) ';'
                    {
                    string_literal13=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IMPORT.add(string_literal13);

                    // COMTOR.g:99:9: ( 'static' )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==STATIC) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // COMTOR.g:99:10: 'static'
                            {
                            string_literal14=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration394); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STATIC.add(string_literal14);


                            }
                            break;

                    }

                    // COMTOR.g:101:9: ( IDENTIFIER '.' '*' )
                    // COMTOR.g:101:10: IDENTIFIER '.' '*'
                    {
                    IDENTIFIER15=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_importDeclaration416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER15);

                    char_literal16=(Token)match(input,DOT,FOLLOW_DOT_in_importDeclaration418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal16);

                    char_literal17=(Token)match(input,STAR,FOLLOW_STAR_in_importDeclaration420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(char_literal17);


                    }

                    char_literal18=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal18);



                    // AST REWRITE
                    // elements: STATIC, STAR, IDENTIFIER, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 103:9: -> ^( IMPORT ( 'static' )? IDENTIFIER '.' '*' )
                    {
                        // COMTOR.g:103:12: ^( IMPORT ( 'static' )? IDENTIFIER '.' '*' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT, "IMPORT"), root_1);

                        // COMTOR.g:103:21: ( 'static' )?
                        if ( stream_STATIC.hasNext() ) {
                            adaptor.addChild(root_1, stream_STATIC.nextNode());

                        }
                        stream_STATIC.reset();
                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        adaptor.addChild(root_1, stream_DOT.nextNode());
                        adaptor.addChild(root_1, stream_STAR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:105:6: 'import' ( 'static' )? i+= IDENTIFIER (i+= '.' i+= IDENTIFIER )+ (s+= '.' s+= '*' )? ';'
                    {
                    string_literal19=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_importDeclaration473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IMPORT.add(string_literal19);

                    // COMTOR.g:106:9: ( 'static' )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==STATIC) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // COMTOR.g:106:10: 'static'
                            {
                            string_literal20=(Token)match(input,STATIC,FOLLOW_STATIC_in_importDeclaration485); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STATIC.add(string_literal20);


                            }
                            break;

                    }

                    i=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_importDeclaration508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    // COMTOR.g:109:9: (i+= '.' i+= IDENTIFIER )+
                    int cnt9=0;
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==DOT) ) {
                            int LA9_1 = input.LA(2);

                            if ( (LA9_1==IDENTIFIER) ) {
                                alt9=1;
                            }


                        }


                        switch (alt9) {
                    	case 1 :
                    	    // COMTOR.g:109:10: i+= '.' i+= IDENTIFIER
                    	    {
                    	    i=(Token)match(input,DOT,FOLLOW_DOT_in_importDeclaration521); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(i);

                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i);

                    	    i=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_importDeclaration525); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_IDENTIFIER.add(i);

                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt9 >= 1 ) break loop9;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(9, input);
                                throw eee;
                        }
                        cnt9++;
                    } while (true);

                    // COMTOR.g:111:9: (s+= '.' s+= '*' )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0==DOT) ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // COMTOR.g:111:10: s+= '.' s+= '*'
                            {
                            s=(Token)match(input,DOT,FOLLOW_DOT_in_importDeclaration549); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(s);

                            if (list_s==null) list_s=new ArrayList();
                            list_s.add(s);

                            s=(Token)match(input,STAR,FOLLOW_STAR_in_importDeclaration553); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);

                            if (list_s==null) list_s=new ArrayList();
                            list_s.add(s);


                            }
                            break;

                    }

                    char_literal21=(Token)match(input,SEMI,FOLLOW_SEMI_in_importDeclaration574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal21);



                    // AST REWRITE
                    // elements: STATIC, i, s
                    // token labels: 
                    // rule labels: retval
                    // token list labels: s, i
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s", list_s);
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 114:9: -> ^( IMPORT ( 'static' )? ( $i)+ ( $s)* )
                    {
                        // COMTOR.g:114:12: ^( IMPORT ( 'static' )? ( $i)+ ( $s)* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IMPORT, "IMPORT"), root_1);

                        // COMTOR.g:114:21: ( 'static' )?
                        if ( stream_STATIC.hasNext() ) {
                            adaptor.addChild(root_1, stream_STATIC.nextNode());

                        }
                        stream_STATIC.reset();
                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();
                        // COMTOR.g:114:35: ( $s)*
                        while ( stream_s.hasNext() ) {
                            adaptor.addChild(root_1, stream_s.nextNode());

                        }
                        stream_s.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class qualifiedImportName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedImportName"
    // COMTOR.g:117:1: qualifiedImportName : IDENTIFIER ( '.' IDENTIFIER )* ;
    public final COMTORParser.qualifiedImportName_return qualifiedImportName() throws RecognitionException {
        COMTORParser.qualifiedImportName_return retval = new COMTORParser.qualifiedImportName_return();
        retval.start = input.LT(1);
        int qualifiedImportName_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER22=null;
        Token char_literal23=null;
        Token IDENTIFIER24=null;

        CommonTree IDENTIFIER22_tree=null;
        CommonTree char_literal23_tree=null;
        CommonTree IDENTIFIER24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // COMTOR.g:118:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
            // COMTOR.g:118:9: IDENTIFIER ( '.' IDENTIFIER )*
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENTIFIER22=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedImportName619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER22_tree = (CommonTree)adaptor.create(IDENTIFIER22);
            adaptor.addChild(root_0, IDENTIFIER22_tree);
            }
            // COMTOR.g:119:9: ( '.' IDENTIFIER )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==DOT) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // COMTOR.g:119:10: '.' IDENTIFIER
            	    {
            	    char_literal23=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedImportName630); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal23_tree = (CommonTree)adaptor.create(char_literal23);
            	    adaptor.addChild(root_0, char_literal23_tree);
            	    }
            	    IDENTIFIER24=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedImportName632); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    IDENTIFIER24_tree = (CommonTree)adaptor.create(IDENTIFIER24);
            	    adaptor.addChild(root_0, IDENTIFIER24_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, qualifiedImportName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedImportName"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // COMTOR.g:123:1: typeDeclaration : ( classOrInterfaceDeclaration -> classOrInterfaceDeclaration | ';' ->);
    public final COMTORParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        COMTORParser.typeDeclaration_return retval = new COMTORParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal26=null;
        COMTORParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration25 = null;


        CommonTree char_literal26_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_classOrInterfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classOrInterfaceDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // COMTOR.g:124:5: ( classOrInterfaceDeclaration -> classOrInterfaceDeclaration | ';' ->)
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ABSTRACT||LA13_0==CLASS||LA13_0==ENUM||LA13_0==FINAL||LA13_0==INTERFACE||LA13_0==NATIVE||(LA13_0>=PRIVATE && LA13_0<=PUBLIC)||(LA13_0>=STATIC && LA13_0<=STRICTFP)||LA13_0==SYNCHRONIZED||LA13_0==TRANSIENT||LA13_0==VOLATILE||LA13_0==MONKEYS_AT) ) {
                alt13=1;
            }
            else if ( (LA13_0==SEMI) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // COMTOR.g:124:9: classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration662);
                    classOrInterfaceDeclaration25=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classOrInterfaceDeclaration.add(classOrInterfaceDeclaration25.getTree());


                    // AST REWRITE
                    // elements: classOrInterfaceDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 125:6: -> classOrInterfaceDeclaration
                    {
                        adaptor.addChild(root_0, stream_classOrInterfaceDeclaration.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:126:9: ';'
                    {
                    char_literal26=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDeclaration681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal26);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 126:13: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // COMTOR.g:129:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );
    public final COMTORParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        COMTORParser.classOrInterfaceDeclaration_return retval = new COMTORParser.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.classDeclaration_return classDeclaration27 = null;

        COMTORParser.interfaceDeclaration_return interfaceDeclaration28 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // COMTOR.g:130:5: ( classDeclaration | interfaceDeclaration )
            int alt14=2;
            alt14 = dfa14.predict(input);
            switch (alt14) {
                case 1 :
                    // COMTOR.g:130:9: classDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration702);
                    classDeclaration27=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration27.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:131:9: interfaceDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration712);
                    interfaceDeclaration28=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration28.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class modifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiers"
    // COMTOR.g:135:1: modifiers : ( 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' | annotation )+ ;
    public final COMTORParser.modifiers_return modifiers() throws RecognitionException {
        COMTORParser.modifiers_return retval = new COMTORParser.modifiers_return();
        retval.start = input.LT(1);
        int modifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal29=null;
        Token string_literal30=null;
        Token string_literal31=null;
        Token string_literal32=null;
        Token string_literal33=null;
        Token string_literal34=null;
        Token string_literal35=null;
        Token string_literal36=null;
        Token string_literal37=null;
        Token string_literal38=null;
        Token string_literal39=null;
        COMTORParser.annotation_return annotation40 = null;


        CommonTree string_literal29_tree=null;
        CommonTree string_literal30_tree=null;
        CommonTree string_literal31_tree=null;
        CommonTree string_literal32_tree=null;
        CommonTree string_literal33_tree=null;
        CommonTree string_literal34_tree=null;
        CommonTree string_literal35_tree=null;
        CommonTree string_literal36_tree=null;
        CommonTree string_literal37_tree=null;
        CommonTree string_literal38_tree=null;
        CommonTree string_literal39_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // COMTOR.g:136:5: ( ( 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' | annotation )+ )
            // COMTOR.g:137:5: ( 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' | annotation )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // COMTOR.g:137:5: ( 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' | annotation )+
            int cnt15=0;
            loop15:
            do {
                int alt15=13;
                alt15 = dfa15.predict(input);
                switch (alt15) {
            	case 1 :
            	    // COMTOR.g:137:9: 'public'
            	    {
            	    string_literal29=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_modifiers746); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal29_tree = (CommonTree)adaptor.create(string_literal29);
            	    adaptor.addChild(root_0, string_literal29_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // COMTOR.g:138:9: 'protected'
            	    {
            	    string_literal30=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_modifiers756); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal30_tree = (CommonTree)adaptor.create(string_literal30);
            	    adaptor.addChild(root_0, string_literal30_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // COMTOR.g:139:9: 'private'
            	    {
            	    string_literal31=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_modifiers766); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal31_tree = (CommonTree)adaptor.create(string_literal31);
            	    adaptor.addChild(root_0, string_literal31_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // COMTOR.g:140:9: 'static'
            	    {
            	    string_literal32=(Token)match(input,STATIC,FOLLOW_STATIC_in_modifiers776); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal32_tree = (CommonTree)adaptor.create(string_literal32);
            	    adaptor.addChild(root_0, string_literal32_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // COMTOR.g:141:9: 'abstract'
            	    {
            	    string_literal33=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_modifiers786); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal33_tree = (CommonTree)adaptor.create(string_literal33);
            	    adaptor.addChild(root_0, string_literal33_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // COMTOR.g:142:9: 'final'
            	    {
            	    string_literal34=(Token)match(input,FINAL,FOLLOW_FINAL_in_modifiers796); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal34_tree = (CommonTree)adaptor.create(string_literal34);
            	    adaptor.addChild(root_0, string_literal34_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // COMTOR.g:143:9: 'native'
            	    {
            	    string_literal35=(Token)match(input,NATIVE,FOLLOW_NATIVE_in_modifiers806); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal35_tree = (CommonTree)adaptor.create(string_literal35);
            	    adaptor.addChild(root_0, string_literal35_tree);
            	    }

            	    }
            	    break;
            	case 8 :
            	    // COMTOR.g:144:9: 'synchronized'
            	    {
            	    string_literal36=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_modifiers816); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal36_tree = (CommonTree)adaptor.create(string_literal36);
            	    adaptor.addChild(root_0, string_literal36_tree);
            	    }

            	    }
            	    break;
            	case 9 :
            	    // COMTOR.g:145:9: 'transient'
            	    {
            	    string_literal37=(Token)match(input,TRANSIENT,FOLLOW_TRANSIENT_in_modifiers826); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal37_tree = (CommonTree)adaptor.create(string_literal37);
            	    adaptor.addChild(root_0, string_literal37_tree);
            	    }

            	    }
            	    break;
            	case 10 :
            	    // COMTOR.g:146:9: 'volatile'
            	    {
            	    string_literal38=(Token)match(input,VOLATILE,FOLLOW_VOLATILE_in_modifiers836); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal38_tree = (CommonTree)adaptor.create(string_literal38);
            	    adaptor.addChild(root_0, string_literal38_tree);
            	    }

            	    }
            	    break;
            	case 11 :
            	    // COMTOR.g:147:9: 'strictfp'
            	    {
            	    string_literal39=(Token)match(input,STRICTFP,FOLLOW_STRICTFP_in_modifiers846); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal39_tree = (CommonTree)adaptor.create(string_literal39);
            	    adaptor.addChild(root_0, string_literal39_tree);
            	    }

            	    }
            	    break;
            	case 12 :
            	    // COMTOR.g:148:7: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_modifiers854);
            	    annotation40=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation40.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifiers"

    public static class variableModifiers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifiers"
    // COMTOR.g:153:1: variableModifiers : ( 'final' | vm+= annotation )* -> ( 'final' )* ( $vm)? ;
    public final COMTORParser.variableModifiers_return variableModifiers() throws RecognitionException {
        COMTORParser.variableModifiers_return retval = new COMTORParser.variableModifiers_return();
        retval.start = input.LT(1);
        int variableModifiers_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal41=null;
        List list_vm=null;
        RuleReturnScope vm = null;
        CommonTree string_literal41_tree=null;
        RewriteRuleTokenStream stream_FINAL=new RewriteRuleTokenStream(adaptor,"token FINAL");
        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // COMTOR.g:154:5: ( ( 'final' | vm+= annotation )* -> ( 'final' )* ( $vm)? )
            // COMTOR.g:154:9: ( 'final' | vm+= annotation )*
            {
            // COMTOR.g:154:9: ( 'final' | vm+= annotation )*
            loop16:
            do {
                int alt16=3;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==FINAL) ) {
                    alt16=1;
                }
                else if ( (LA16_0==MONKEYS_AT) ) {
                    alt16=2;
                }


                switch (alt16) {
            	case 1 :
            	    // COMTOR.g:154:13: 'final'
            	    {
            	    string_literal41=(Token)match(input,FINAL,FOLLOW_FINAL_in_variableModifiers886); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FINAL.add(string_literal41);


            	    }
            	    break;
            	case 2 :
            	    // COMTOR.g:155:13: vm+= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_variableModifiers902);
            	    vm=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(vm.getTree());
            	    if (list_vm==null) list_vm=new ArrayList();
            	    list_vm.add(vm.getTree());


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);



            // AST REWRITE
            // elements: FINAL, vm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: vm
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_vm=new RewriteRuleSubtreeStream(adaptor,"token vm",list_vm);
            root_0 = (CommonTree)adaptor.nil();
            // 157:9: -> ( 'final' )* ( $vm)?
            {
                // COMTOR.g:157:12: ( 'final' )*
                while ( stream_FINAL.hasNext() ) {
                    adaptor.addChild(root_0, stream_FINAL.nextNode());

                }
                stream_FINAL.reset();
                // COMTOR.g:157:21: ( $vm)?
                if ( stream_vm.hasNext() ) {
                    adaptor.addChild(root_0, stream_vm.nextTree());

                }
                stream_vm.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, variableModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifiers"

    public static class typeParameters_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // COMTOR.g:161:1: typeParameters : '<' typeParameter ( ',' typeParameter )* '>' -> ( typeParameter )+ ;
    public final COMTORParser.typeParameters_return typeParameters() throws RecognitionException {
        COMTORParser.typeParameters_return retval = new COMTORParser.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal42=null;
        Token char_literal44=null;
        Token char_literal46=null;
        COMTORParser.typeParameter_return typeParameter43 = null;

        COMTORParser.typeParameter_return typeParameter45 = null;


        CommonTree char_literal42_tree=null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_typeParameter=new RewriteRuleSubtreeStream(adaptor,"rule typeParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // COMTOR.g:162:5: ( '<' typeParameter ( ',' typeParameter )* '>' -> ( typeParameter )+ )
            // COMTOR.g:162:9: '<' typeParameter ( ',' typeParameter )* '>'
            {
            char_literal42=(Token)match(input,LT,FOLLOW_LT_in_typeParameters951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LT.add(char_literal42);

            pushFollow(FOLLOW_typeParameter_in_typeParameters965);
            typeParameter43=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameter.add(typeParameter43.getTree());
            // COMTOR.g:164:13: ( ',' typeParameter )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==COMMA) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // COMTOR.g:164:14: ',' typeParameter
            	    {
            	    char_literal44=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeParameters980); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal44);

            	    pushFollow(FOLLOW_typeParameter_in_typeParameters982);
            	    typeParameter45=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeParameter.add(typeParameter45.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            char_literal46=(Token)match(input,GT,FOLLOW_GT_in_typeParameters1007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GT.add(char_literal46);



            // AST REWRITE
            // elements: typeParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 167:9: -> ( typeParameter )+
            {
                if ( !(stream_typeParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_typeParameter.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeParameter.nextTree());

                }
                stream_typeParameter.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // COMTOR.g:169:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
    public final COMTORParser.classDeclaration_return classDeclaration() throws RecognitionException {
        COMTORParser.classDeclaration_return retval = new COMTORParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.normalClassDeclaration_return normalClassDeclaration47 = null;

        COMTORParser.enumDeclaration_return enumDeclaration48 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // COMTOR.g:170:5: ( normalClassDeclaration | enumDeclaration )
            int alt18=2;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // COMTOR.g:170:9: normalClassDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration1039);
                    normalClassDeclaration47=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalClassDeclaration47.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:171:9: enumDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration1049);
                    enumDeclaration48=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration48.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalClassDeclaration"
    // COMTOR.g:175:1: normalClassDeclaration : ( modifiers )? 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( NORMAL_CLASS IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( 'extends' type ) )? ( ^( 'implements' typeList ) )? ( classBody )? ) ;
    public final COMTORParser.normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        COMTORParser.normalClassDeclaration_return retval = new COMTORParser.normalClassDeclaration_return();
        retval.start = input.LT(1);
        int normalClassDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal50=null;
        Token IDENTIFIER51=null;
        Token string_literal53=null;
        Token string_literal55=null;
        COMTORParser.modifiers_return modifiers49 = null;

        COMTORParser.typeParameters_return typeParameters52 = null;

        COMTORParser.type_return type54 = null;

        COMTORParser.typeList_return typeList56 = null;

        COMTORParser.classBody_return classBody57 = null;


        CommonTree string_literal50_tree=null;
        CommonTree IDENTIFIER51_tree=null;
        CommonTree string_literal53_tree=null;
        CommonTree string_literal55_tree=null;
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // COMTOR.g:176:5: ( ( modifiers )? 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( NORMAL_CLASS IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( 'extends' type ) )? ( ^( 'implements' typeList ) )? ( classBody )? ) )
            // COMTOR.g:176:9: ( modifiers )? 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
            // COMTOR.g:176:9: ( modifiers )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ABSTRACT||LA19_0==FINAL||LA19_0==NATIVE||(LA19_0>=PRIVATE && LA19_0<=PUBLIC)||(LA19_0>=STATIC && LA19_0<=STRICTFP)||LA19_0==SYNCHRONIZED||LA19_0==TRANSIENT||LA19_0==VOLATILE||LA19_0==MONKEYS_AT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // COMTOR.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_normalClassDeclaration1070);
                    modifiers49=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers49.getTree());

                    }
                    break;

            }

            string_literal50=(Token)match(input,CLASS,FOLLOW_CLASS_in_normalClassDeclaration1074); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(string_literal50);

            IDENTIFIER51=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_normalClassDeclaration1076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER51);

            // COMTOR.g:177:9: ( typeParameters )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==LT) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // COMTOR.g:177:10: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration1087);
                    typeParameters52=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters52.getTree());

                    }
                    break;

            }

            // COMTOR.g:179:9: ( 'extends' type )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==EXTENDS) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // COMTOR.g:179:10: 'extends' type
                    {
                    string_literal53=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_normalClassDeclaration1109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTENDS.add(string_literal53);

                    pushFollow(FOLLOW_type_in_normalClassDeclaration1111);
                    type54=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type54.getTree());

                    }
                    break;

            }

            // COMTOR.g:181:9: ( 'implements' typeList )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==IMPLEMENTS) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // COMTOR.g:181:10: 'implements' typeList
                    {
                    string_literal55=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_normalClassDeclaration1133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IMPLEMENTS.add(string_literal55);

                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration1135);
                    typeList56=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList56.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration1168);
            classBody57=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody57.getTree());


            // AST REWRITE
            // elements: IMPLEMENTS, typeParameters, type, EXTENDS, modifiers, classBody, IDENTIFIER, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 184:9: -> ^( NORMAL_CLASS IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( 'extends' type ) )? ( ^( 'implements' typeList ) )? ( classBody )? )
            {
                // COMTOR.g:184:12: ^( NORMAL_CLASS IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( 'extends' type ) )? ( ^( 'implements' typeList ) )? ( classBody )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NORMAL_CLASS, "NORMAL_CLASS"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // COMTOR.g:184:38: ( ^( ACCESS_MODIFIER modifiers ) )?
                if ( stream_modifiers.hasNext() ) {
                    // COMTOR.g:184:38: ^( ACCESS_MODIFIER modifiers )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                    adaptor.addChild(root_2, stream_modifiers.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_modifiers.reset();
                // COMTOR.g:184:68: ( ^( TYPE_PARAMS typeParameters ) )?
                if ( stream_typeParameters.hasNext() ) {
                    // COMTOR.g:184:68: ^( TYPE_PARAMS typeParameters )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PARAMS, "TYPE_PARAMS"), root_2);

                    adaptor.addChild(root_2, stream_typeParameters.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_typeParameters.reset();
                // COMTOR.g:184:99: ( ^( 'extends' type ) )?
                if ( stream_type.hasNext()||stream_EXTENDS.hasNext() ) {
                    // COMTOR.g:184:99: ^( 'extends' type )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(stream_EXTENDS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_type.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_type.reset();
                stream_EXTENDS.reset();
                // COMTOR.g:184:118: ( ^( 'implements' typeList ) )?
                if ( stream_IMPLEMENTS.hasNext()||stream_typeList.hasNext() ) {
                    // COMTOR.g:184:118: ^( 'implements' typeList )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(stream_IMPLEMENTS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_typeList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_IMPLEMENTS.reset();
                stream_typeList.reset();
                // COMTOR.g:184:144: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, normalClassDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalClassDeclaration"

    public static class typeParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // COMTOR.g:189:1: typeParameter : IDENTIFIER ( 'extends' typeBound )? -> ^( IDENTIFIER ( ^( 'extends' typeBound ) )? ) ;
    public final COMTORParser.typeParameter_return typeParameter() throws RecognitionException {
        COMTORParser.typeParameter_return retval = new COMTORParser.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER58=null;
        Token string_literal59=null;
        COMTORParser.typeBound_return typeBound60 = null;


        CommonTree IDENTIFIER58_tree=null;
        CommonTree string_literal59_tree=null;
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_typeBound=new RewriteRuleSubtreeStream(adaptor,"rule typeBound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // COMTOR.g:190:5: ( IDENTIFIER ( 'extends' typeBound )? -> ^( IDENTIFIER ( ^( 'extends' typeBound ) )? ) )
            // COMTOR.g:190:9: IDENTIFIER ( 'extends' typeBound )?
            {
            IDENTIFIER58=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_typeParameter1237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER58);

            // COMTOR.g:191:9: ( 'extends' typeBound )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==EXTENDS) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // COMTOR.g:191:10: 'extends' typeBound
                    {
                    string_literal59=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_typeParameter1248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTENDS.add(string_literal59);

                    pushFollow(FOLLOW_typeBound_in_typeParameter1250);
                    typeBound60=typeBound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeBound.add(typeBound60.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: EXTENDS, typeBound, IDENTIFIER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 193:9: -> ^( IDENTIFIER ( ^( 'extends' typeBound ) )? )
            {
                // COMTOR.g:193:12: ^( IDENTIFIER ( ^( 'extends' typeBound ) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_IDENTIFIER.nextNode(), root_1);

                // COMTOR.g:193:25: ( ^( 'extends' typeBound ) )?
                if ( stream_EXTENDS.hasNext()||stream_typeBound.hasNext() ) {
                    // COMTOR.g:193:25: ^( 'extends' typeBound )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(stream_EXTENDS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_typeBound.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_EXTENDS.reset();
                stream_typeBound.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class typeBound_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeBound"
    // COMTOR.g:197:1: typeBound : type ( '&' type )* ;
    public final COMTORParser.typeBound_return typeBound() throws RecognitionException {
        COMTORParser.typeBound_return retval = new COMTORParser.typeBound_return();
        retval.start = input.LT(1);
        int typeBound_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal62=null;
        COMTORParser.type_return type61 = null;

        COMTORParser.type_return type63 = null;


        CommonTree char_literal62_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // COMTOR.g:198:5: ( type ( '&' type )* )
            // COMTOR.g:198:9: type ( '&' type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeBound1303);
            type61=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type61.getTree());
            // COMTOR.g:199:9: ( '&' type )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==AMP) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // COMTOR.g:199:10: '&' type
            	    {
            	    char_literal62=(Token)match(input,AMP,FOLLOW_AMP_in_typeBound1314); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal62_tree = (CommonTree)adaptor.create(char_literal62);
            	    adaptor.addChild(root_0, char_literal62_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeBound1316);
            	    type63=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type63.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, typeBound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeBound"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // COMTOR.g:204:1: enumDeclaration : ( modifiers )? ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody -> ^( 'enum' IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( 'implements' typeList ) )? ^( BODY enumBody ) ) ;
    public final COMTORParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        COMTORParser.enumDeclaration_return retval = new COMTORParser.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal65=null;
        Token IDENTIFIER66=null;
        Token string_literal67=null;
        COMTORParser.modifiers_return modifiers64 = null;

        COMTORParser.typeList_return typeList68 = null;

        COMTORParser.enumBody_return enumBody69 = null;


        CommonTree string_literal65_tree=null;
        CommonTree IDENTIFIER66_tree=null;
        CommonTree string_literal67_tree=null;
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleTokenStream stream_IMPLEMENTS=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // COMTOR.g:205:5: ( ( modifiers )? ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody -> ^( 'enum' IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( 'implements' typeList ) )? ^( BODY enumBody ) ) )
            // COMTOR.g:205:9: ( modifiers )? ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody
            {
            // COMTOR.g:205:9: ( modifiers )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ABSTRACT||LA25_0==FINAL||LA25_0==NATIVE||(LA25_0>=PRIVATE && LA25_0<=PUBLIC)||(LA25_0>=STATIC && LA25_0<=STRICTFP)||LA25_0==SYNCHRONIZED||LA25_0==TRANSIENT||LA25_0==VOLATILE||LA25_0==MONKEYS_AT) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // COMTOR.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_enumDeclaration1348);
                    modifiers64=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers64.getTree());

                    }
                    break;

            }

            // COMTOR.g:206:9: ( 'enum' )
            // COMTOR.g:206:10: 'enum'
            {
            string_literal65=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration1361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(string_literal65);


            }

            IDENTIFIER66=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enumDeclaration1382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER66);

            // COMTOR.g:209:9: ( 'implements' typeList )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==IMPLEMENTS) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // COMTOR.g:209:10: 'implements' typeList
                    {
                    string_literal67=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_enumDeclaration1393); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IMPLEMENTS.add(string_literal67);

                    pushFollow(FOLLOW_typeList_in_enumDeclaration1395);
                    typeList68=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList68.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration1416);
            enumBody69=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody69.getTree());


            // AST REWRITE
            // elements: typeList, enumBody, modifiers, IDENTIFIER, ENUM, IMPLEMENTS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 212:9: -> ^( 'enum' IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( 'implements' typeList ) )? ^( BODY enumBody ) )
            {
                // COMTOR.g:212:12: ^( 'enum' IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( 'implements' typeList ) )? ^( BODY enumBody ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ENUM.nextNode(), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // COMTOR.g:212:32: ( ^( ACCESS_MODIFIER modifiers ) )?
                if ( stream_modifiers.hasNext() ) {
                    // COMTOR.g:212:32: ^( ACCESS_MODIFIER modifiers )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                    adaptor.addChild(root_2, stream_modifiers.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_modifiers.reset();
                // COMTOR.g:212:62: ( ^( 'implements' typeList ) )?
                if ( stream_typeList.hasNext()||stream_IMPLEMENTS.hasNext() ) {
                    // COMTOR.g:212:62: ^( 'implements' typeList )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(stream_IMPLEMENTS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_typeList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_typeList.reset();
                stream_IMPLEMENTS.reset();
                // COMTOR.g:212:88: ^( BODY enumBody )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                adaptor.addChild(root_2, stream_enumBody.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // COMTOR.g:216:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? ;
    public final COMTORParser.enumBody_return enumBody() throws RecognitionException {
        COMTORParser.enumBody_return retval = new COMTORParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal70=null;
        Token char_literal72=null;
        Token char_literal74=null;
        COMTORParser.enumConstants_return enumConstants71 = null;

        COMTORParser.enumBodyDeclarations_return enumBodyDeclarations73 = null;


        CommonTree char_literal70_tree=null;
        CommonTree char_literal72_tree=null;
        CommonTree char_literal74_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_enumBodyDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumBodyDeclarations");
        RewriteRuleSubtreeStream stream_enumConstants=new RewriteRuleSubtreeStream(adaptor,"rule enumConstants");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // COMTOR.g:217:5: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? )
            // COMTOR.g:217:9: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
            {
            char_literal70=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_enumBody1477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal70);

            // COMTOR.g:218:9: ( enumConstants )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==IDENTIFIER||LA27_0==MONKEYS_AT) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // COMTOR.g:218:10: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody1488);
                    enumConstants71=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstants.add(enumConstants71.getTree());

                    }
                    break;

            }

            // COMTOR.g:220:9: ( ',' )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==COMMA) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // COMTOR.g:0:0: ','
                    {
                    char_literal72=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumBody1510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal72);


                    }
                    break;

            }

            // COMTOR.g:221:9: ( enumBodyDeclarations )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==SEMI) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // COMTOR.g:221:10: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody1523);
                    enumBodyDeclarations73=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumBodyDeclarations.add(enumBodyDeclarations73.getTree());

                    }
                    break;

            }

            char_literal74=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_enumBody1545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal74);



            // AST REWRITE
            // elements: enumConstants, enumBodyDeclarations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 224:9: -> ( enumConstants )? ( enumBodyDeclarations )?
            {
                // COMTOR.g:224:12: ( enumConstants )?
                if ( stream_enumConstants.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstants.nextTree());

                }
                stream_enumConstants.reset();
                // COMTOR.g:224:27: ( enumBodyDeclarations )?
                if ( stream_enumBodyDeclarations.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBodyDeclarations.nextTree());

                }
                stream_enumBodyDeclarations.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // COMTOR.g:227:1: enumConstants : enumConstant ( ',' enumConstant )* ;
    public final COMTORParser.enumConstants_return enumConstants() throws RecognitionException {
        COMTORParser.enumConstants_return retval = new COMTORParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal76=null;
        COMTORParser.enumConstant_return enumConstant75 = null;

        COMTORParser.enumConstant_return enumConstant77 = null;


        CommonTree char_literal76_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // COMTOR.g:228:5: ( enumConstant ( ',' enumConstant )* )
            // COMTOR.g:228:9: enumConstant ( ',' enumConstant )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants1581);
            enumConstant75=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant75.getTree());
            // COMTOR.g:229:9: ( ',' enumConstant )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==COMMA) ) {
                    int LA30_1 = input.LA(2);

                    if ( (LA30_1==IDENTIFIER||LA30_1==MONKEYS_AT) ) {
                        alt30=1;
                    }


                }


                switch (alt30) {
            	case 1 :
            	    // COMTOR.g:229:10: ',' enumConstant
            	    {
            	    char_literal76=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumConstants1592); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal76_tree = (CommonTree)adaptor.create(char_literal76);
            	    adaptor.addChild(root_0, char_literal76_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants1594);
            	    enumConstant77=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumConstant77.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // COMTOR.g:233:1: enumConstant : ( annotations )? IDENTIFIER ( arguments )? ( classBody )? -> IDENTIFIER ( annotations )? ( arguments )? ( ^( BODY classBody ) )? ;
    public final COMTORParser.enumConstant_return enumConstant() throws RecognitionException {
        COMTORParser.enumConstant_return retval = new COMTORParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER79=null;
        COMTORParser.annotations_return annotations78 = null;

        COMTORParser.arguments_return arguments80 = null;

        COMTORParser.classBody_return classBody81 = null;


        CommonTree IDENTIFIER79_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // COMTOR.g:238:5: ( ( annotations )? IDENTIFIER ( arguments )? ( classBody )? -> IDENTIFIER ( annotations )? ( arguments )? ( ^( BODY classBody ) )? )
            // COMTOR.g:238:9: ( annotations )? IDENTIFIER ( arguments )? ( classBody )?
            {
            // COMTOR.g:238:9: ( annotations )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==MONKEYS_AT) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // COMTOR.g:238:10: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant1628);
                    annotations78=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations78.getTree());

                    }
                    break;

            }

            IDENTIFIER79=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enumConstant1632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER79);

            // COMTOR.g:238:35: ( arguments )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==LPAREN) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // COMTOR.g:238:36: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant1635);
                    arguments80=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments80.getTree());

                    }
                    break;

            }

            // COMTOR.g:238:48: ( classBody )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==LBRACE) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // COMTOR.g:238:49: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant1640);
                    classBody81=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody81.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classBody, arguments, IDENTIFIER, annotations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 239:9: -> IDENTIFIER ( annotations )? ( arguments )? ( ^( BODY classBody ) )?
            {
                adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());
                // COMTOR.g:239:23: ( annotations )?
                if ( stream_annotations.hasNext() ) {
                    adaptor.addChild(root_0, stream_annotations.nextTree());

                }
                stream_annotations.reset();
                // COMTOR.g:239:36: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_0, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // COMTOR.g:239:47: ( ^( BODY classBody ) )?
                if ( stream_classBody.hasNext() ) {
                    // COMTOR.g:239:47: ^( BODY classBody )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_1);

                    adaptor.addChild(root_1, stream_classBody.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // COMTOR.g:244:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* -> ( ^( BODY classBodyDeclaration ) )? ;
    public final COMTORParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        COMTORParser.enumBodyDeclarations_return retval = new COMTORParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal82=null;
        COMTORParser.classBodyDeclaration_return classBodyDeclaration83 = null;


        CommonTree char_literal82_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // COMTOR.g:245:5: ( ';' ( classBodyDeclaration )* -> ( ^( BODY classBodyDeclaration ) )? )
            // COMTOR.g:245:9: ';' ( classBodyDeclaration )*
            {
            char_literal82=(Token)match(input,SEMI,FOLLOW_SEMI_in_enumBodyDeclarations1697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal82);

            // COMTOR.g:246:9: ( classBodyDeclaration )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==IDENTIFIER||LA34_0==ABSTRACT||LA34_0==BOOLEAN||LA34_0==BYTE||(LA34_0>=CHAR && LA34_0<=CLASS)||LA34_0==DOUBLE||LA34_0==ENUM||LA34_0==FINAL||LA34_0==FLOAT||(LA34_0>=INT && LA34_0<=NATIVE)||(LA34_0>=PRIVATE && LA34_0<=PUBLIC)||(LA34_0>=SHORT && LA34_0<=STRICTFP)||LA34_0==SYNCHRONIZED||LA34_0==TRANSIENT||(LA34_0>=VOID && LA34_0<=VOLATILE)||LA34_0==LBRACE||LA34_0==SEMI||LA34_0==MONKEYS_AT||LA34_0==LT) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // COMTOR.g:246:10: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1709);
            	    classBodyDeclaration83=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration83.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);



            // AST REWRITE
            // elements: classBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 247:9: -> ( ^( BODY classBodyDeclaration ) )?
            {
                // COMTOR.g:247:12: ( ^( BODY classBodyDeclaration ) )?
                if ( stream_classBodyDeclaration.hasNext() ) {
                    // COMTOR.g:247:12: ^( BODY classBodyDeclaration )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_1);

                    adaptor.addChild(root_1, stream_classBodyDeclaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_classBodyDeclaration.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // COMTOR.g:250:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
    public final COMTORParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        COMTORParser.interfaceDeclaration_return retval = new COMTORParser.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.normalInterfaceDeclaration_return normalInterfaceDeclaration84 = null;

        COMTORParser.annotationTypeDeclaration_return annotationTypeDeclaration85 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // COMTOR.g:251:5: ( normalInterfaceDeclaration | annotationTypeDeclaration )
            int alt35=2;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // COMTOR.g:251:9: normalInterfaceDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1748);
                    normalInterfaceDeclaration84=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration84.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:252:9: annotationTypeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1758);
                    annotationTypeDeclaration85=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration85.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // COMTOR.g:255:1: normalInterfaceDeclaration : ( modifiers )? 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( INTERFACE IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( 'extends' typeList ) )? ^( BODY interfaceBody ) ) ;
    public final COMTORParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        COMTORParser.normalInterfaceDeclaration_return retval = new COMTORParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal87=null;
        Token IDENTIFIER88=null;
        Token string_literal90=null;
        COMTORParser.modifiers_return modifiers86 = null;

        COMTORParser.typeParameters_return typeParameters89 = null;

        COMTORParser.typeList_return typeList91 = null;

        COMTORParser.interfaceBody_return interfaceBody92 = null;


        CommonTree string_literal87_tree=null;
        CommonTree IDENTIFIER88_tree=null;
        CommonTree string_literal90_tree=null;
        RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // COMTOR.g:256:5: ( ( modifiers )? 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( INTERFACE IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( 'extends' typeList ) )? ^( BODY interfaceBody ) ) )
            // COMTOR.g:256:9: ( modifiers )? 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
            // COMTOR.g:256:9: ( modifiers )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==ABSTRACT||LA36_0==FINAL||LA36_0==NATIVE||(LA36_0>=PRIVATE && LA36_0<=PUBLIC)||(LA36_0>=STATIC && LA36_0<=STRICTFP)||LA36_0==SYNCHRONIZED||LA36_0==TRANSIENT||LA36_0==VOLATILE||LA36_0==MONKEYS_AT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // COMTOR.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_normalInterfaceDeclaration1782);
                    modifiers86=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers86.getTree());

                    }
                    break;

            }

            string_literal87=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_normalInterfaceDeclaration1785); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTERFACE.add(string_literal87);

            IDENTIFIER88=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_normalInterfaceDeclaration1787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER88);

            // COMTOR.g:257:9: ( typeParameters )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==LT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // COMTOR.g:257:10: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration1798);
                    typeParameters89=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters89.getTree());

                    }
                    break;

            }

            // COMTOR.g:259:9: ( 'extends' typeList )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==EXTENDS) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // COMTOR.g:259:10: 'extends' typeList
                    {
                    string_literal90=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_normalInterfaceDeclaration1820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTENDS.add(string_literal90);

                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration1822);
                    typeList91=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList91.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration1843);
            interfaceBody92=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody92.getTree());


            // AST REWRITE
            // elements: interfaceBody, typeList, typeParameters, modifiers, EXTENDS, IDENTIFIER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 262:9: -> ^( INTERFACE IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( 'extends' typeList ) )? ^( BODY interfaceBody ) )
            {
                // COMTOR.g:262:12: ^( INTERFACE IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( 'extends' typeList ) )? ^( BODY interfaceBody ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // COMTOR.g:262:35: ( ^( ACCESS_MODIFIER modifiers ) )?
                if ( stream_modifiers.hasNext() ) {
                    // COMTOR.g:262:35: ^( ACCESS_MODIFIER modifiers )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                    adaptor.addChild(root_2, stream_modifiers.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_modifiers.reset();
                // COMTOR.g:262:65: ( ^( TYPE_PARAMS typeParameters ) )?
                if ( stream_typeParameters.hasNext() ) {
                    // COMTOR.g:262:65: ^( TYPE_PARAMS typeParameters )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PARAMS, "TYPE_PARAMS"), root_2);

                    adaptor.addChild(root_2, stream_typeParameters.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_typeParameters.reset();
                // COMTOR.g:262:96: ( ^( 'extends' typeList ) )?
                if ( stream_typeList.hasNext()||stream_EXTENDS.hasNext() ) {
                    // COMTOR.g:262:96: ^( 'extends' typeList )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(stream_EXTENDS.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_typeList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_typeList.reset();
                stream_EXTENDS.reset();
                // COMTOR.g:262:119: ^( BODY interfaceBody )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                adaptor.addChild(root_2, stream_interfaceBody.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // COMTOR.g:265:1: typeList : type ( ',' type )* ;
    public final COMTORParser.typeList_return typeList() throws RecognitionException {
        COMTORParser.typeList_return retval = new COMTORParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal94=null;
        COMTORParser.type_return type93 = null;

        COMTORParser.type_return type95 = null;


        CommonTree char_literal94_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // COMTOR.g:266:5: ( type ( ',' type )* )
            // COMTOR.g:266:9: type ( ',' type )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1906);
            type93=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type93.getTree());
            // COMTOR.g:267:9: ( ',' type )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==COMMA) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // COMTOR.g:267:10: ',' type
            	    {
            	    char_literal94=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeList1917); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal94_tree = (CommonTree)adaptor.create(char_literal94);
            	    adaptor.addChild(root_0, char_literal94_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList1919);
            	    type95=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type95.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // COMTOR.g:271:1: classBody : '{' ( classBodyDeclaration )* '}' -> ( classBodyDeclaration )* ;
    public final COMTORParser.classBody_return classBody() throws RecognitionException {
        COMTORParser.classBody_return retval = new COMTORParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal96=null;
        Token char_literal98=null;
        COMTORParser.classBodyDeclaration_return classBodyDeclaration97 = null;


        CommonTree char_literal96_tree=null;
        CommonTree char_literal98_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // COMTOR.g:272:5: ( '{' ( classBodyDeclaration )* '}' -> ( classBodyDeclaration )* )
            // COMTOR.g:272:9: '{' ( classBodyDeclaration )* '}'
            {
            char_literal96=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_classBody1950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal96);

            // COMTOR.g:273:9: ( classBodyDeclaration )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==IDENTIFIER||LA40_0==ABSTRACT||LA40_0==BOOLEAN||LA40_0==BYTE||(LA40_0>=CHAR && LA40_0<=CLASS)||LA40_0==DOUBLE||LA40_0==ENUM||LA40_0==FINAL||LA40_0==FLOAT||(LA40_0>=INT && LA40_0<=NATIVE)||(LA40_0>=PRIVATE && LA40_0<=PUBLIC)||(LA40_0>=SHORT && LA40_0<=STRICTFP)||LA40_0==SYNCHRONIZED||LA40_0==TRANSIENT||(LA40_0>=VOID && LA40_0<=VOLATILE)||LA40_0==LBRACE||LA40_0==SEMI||LA40_0==MONKEYS_AT||LA40_0==LT) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // COMTOR.g:273:10: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1962);
            	    classBodyDeclaration97=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration97.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);

            char_literal98=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_classBody1984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal98);



            // AST REWRITE
            // elements: classBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 276:9: -> ( classBodyDeclaration )*
            {
                // COMTOR.g:276:12: ( classBodyDeclaration )*
                while ( stream_classBodyDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBodyDeclaration.nextTree());

                }
                stream_classBodyDeclaration.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // COMTOR.g:279:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
    public final COMTORParser.interfaceBody_return interfaceBody() throws RecognitionException {
        COMTORParser.interfaceBody_return retval = new COMTORParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal99=null;
        Token char_literal101=null;
        COMTORParser.interfaceBodyDeclaration_return interfaceBodyDeclaration100 = null;


        CommonTree char_literal99_tree=null;
        CommonTree char_literal101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // COMTOR.g:280:5: ( '{' ( interfaceBodyDeclaration )* '}' )
            // COMTOR.g:280:9: '{' ( interfaceBodyDeclaration )* '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal99=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_interfaceBody2017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal99_tree = (CommonTree)adaptor.create(char_literal99);
            adaptor.addChild(root_0, char_literal99_tree);
            }
            // COMTOR.g:281:9: ( interfaceBodyDeclaration )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==IDENTIFIER||LA41_0==ABSTRACT||LA41_0==BOOLEAN||LA41_0==BYTE||(LA41_0>=CHAR && LA41_0<=CLASS)||LA41_0==DOUBLE||LA41_0==ENUM||LA41_0==FINAL||LA41_0==FLOAT||(LA41_0>=INT && LA41_0<=NATIVE)||(LA41_0>=PRIVATE && LA41_0<=PUBLIC)||(LA41_0>=SHORT && LA41_0<=STRICTFP)||LA41_0==SYNCHRONIZED||LA41_0==TRANSIENT||(LA41_0>=VOID && LA41_0<=VOLATILE)||LA41_0==SEMI||LA41_0==MONKEYS_AT||LA41_0==LT) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // COMTOR.g:281:10: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody2029);
            	    interfaceBodyDeclaration100=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBodyDeclaration100.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);

            char_literal101=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_interfaceBody2051); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal101_tree = (CommonTree)adaptor.create(char_literal101);
            adaptor.addChild(root_0, char_literal101_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // COMTOR.g:287:1: classBodyDeclaration : ( ';' -> BODY | ( 'static' )? block -> ( 'static' )? block | memberDecl );
    public final COMTORParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        COMTORParser.classBodyDeclaration_return retval = new COMTORParser.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal102=null;
        Token string_literal103=null;
        COMTORParser.block_return block104 = null;

        COMTORParser.memberDecl_return memberDecl105 = null;


        CommonTree char_literal102_tree=null;
        CommonTree string_literal103_tree=null;
        RewriteRuleTokenStream stream_STATIC=new RewriteRuleTokenStream(adaptor,"token STATIC");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // COMTOR.g:288:5: ( ';' -> BODY | ( 'static' )? block -> ( 'static' )? block | memberDecl )
            int alt43=3;
            switch ( input.LA(1) ) {
            case SEMI:
                {
                alt43=1;
                }
                break;
            case STATIC:
                {
                int LA43_2 = input.LA(2);

                if ( (LA43_2==LBRACE) ) {
                    alt43=2;
                }
                else if ( (LA43_2==IDENTIFIER||LA43_2==ABSTRACT||LA43_2==BOOLEAN||LA43_2==BYTE||(LA43_2>=CHAR && LA43_2<=CLASS)||LA43_2==DOUBLE||LA43_2==ENUM||LA43_2==FINAL||LA43_2==FLOAT||(LA43_2>=INT && LA43_2<=NATIVE)||(LA43_2>=PRIVATE && LA43_2<=PUBLIC)||(LA43_2>=SHORT && LA43_2<=STRICTFP)||LA43_2==SYNCHRONIZED||LA43_2==TRANSIENT||(LA43_2>=VOID && LA43_2<=VOLATILE)||LA43_2==MONKEYS_AT||LA43_2==LT) ) {
                    alt43=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 2, input);

                    throw nvae;
                }
                }
                break;
            case LBRACE:
                {
                alt43=2;
                }
                break;
            case IDENTIFIER:
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case ENUM:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOID:
            case VOLATILE:
            case MONKEYS_AT:
            case LT:
                {
                alt43=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // COMTOR.g:288:9: ';'
                    {
                    char_literal102=(Token)match(input,SEMI,FOLLOW_SEMI_in_classBodyDeclaration2080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal102);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 288:13: -> BODY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(BODY, "BODY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:289:9: ( 'static' )? block
                    {
                    // COMTOR.g:289:9: ( 'static' )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==STATIC) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // COMTOR.g:289:10: 'static'
                            {
                            string_literal103=(Token)match(input,STATIC,FOLLOW_STATIC_in_classBodyDeclaration2095); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STATIC.add(string_literal103);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration2117);
                    block104=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block104.getTree());


                    // AST REWRITE
                    // elements: STATIC, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 292:9: -> ( 'static' )? block
                    {
                        // COMTOR.g:292:12: ( 'static' )?
                        if ( stream_STATIC.hasNext() ) {
                            adaptor.addChild(root_0, stream_STATIC.nextNode());

                        }
                        stream_STATIC.reset();
                        adaptor.addChild(root_0, stream_block.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // COMTOR.g:293:9: memberDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration2142);
                    memberDecl105=memberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberDecl105.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class memberDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDecl"
    // COMTOR.g:296:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );
    public final COMTORParser.memberDecl_return memberDecl() throws RecognitionException {
        COMTORParser.memberDecl_return retval = new COMTORParser.memberDecl_return();
        retval.start = input.LT(1);
        int memberDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.fieldDeclaration_return fieldDeclaration106 = null;

        COMTORParser.methodDeclaration_return methodDeclaration107 = null;

        COMTORParser.classDeclaration_return classDeclaration108 = null;

        COMTORParser.interfaceDeclaration_return interfaceDeclaration109 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // COMTOR.g:297:5: ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration )
            int alt44=4;
            alt44 = dfa44.predict(input);
            switch (alt44) {
                case 1 :
                    // COMTOR.g:297:10: fieldDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fieldDeclaration_in_memberDecl2167);
                    fieldDeclaration106=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fieldDeclaration106.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:298:10: methodDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_memberDecl2178);
                    methodDeclaration107=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaration107.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:299:10: classDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_memberDecl2189);
                    classDeclaration108=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration108.getTree());

                    }
                    break;
                case 4 :
                    // COMTOR.g:300:10: interfaceDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl2200);
                    interfaceDeclaration109=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration109.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, memberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDecl"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // COMTOR.g:309:1: methodDeclaration : ( ( modifiers )? ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' -> ^( CONSTRUCTOR IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( explicitConstructorInvocation )? ( blockStatement )* ) ) | ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) -> ^( METHOD_DEC IDENTIFIER ^( ACCESS_MODIFIER PACKAGE_PRIVATE ) ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) ) | modifiers ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) -> ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) ) );
    public final COMTORParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        COMTORParser.methodDeclaration_return retval = new COMTORParser.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token v=null;
        Token IDENTIFIER112=null;
        Token string_literal114=null;
        Token char_literal116=null;
        Token char_literal119=null;
        Token IDENTIFIER121=null;
        Token char_literal123=null;
        Token char_literal124=null;
        Token string_literal125=null;
        Token char_literal128=null;
        Token IDENTIFIER131=null;
        Token char_literal133=null;
        Token char_literal134=null;
        Token string_literal135=null;
        Token char_literal138=null;
        COMTORParser.type_return t = null;

        COMTORParser.modifiers_return modifiers110 = null;

        COMTORParser.typeParameters_return typeParameters111 = null;

        COMTORParser.formalParameters_return formalParameters113 = null;

        COMTORParser.qualifiedNameList_return qualifiedNameList115 = null;

        COMTORParser.explicitConstructorInvocation_return explicitConstructorInvocation117 = null;

        COMTORParser.blockStatement_return blockStatement118 = null;

        COMTORParser.typeParameters_return typeParameters120 = null;

        COMTORParser.formalParameters_return formalParameters122 = null;

        COMTORParser.qualifiedNameList_return qualifiedNameList126 = null;

        COMTORParser.block_return block127 = null;

        COMTORParser.modifiers_return modifiers129 = null;

        COMTORParser.typeParameters_return typeParameters130 = null;

        COMTORParser.formalParameters_return formalParameters132 = null;

        COMTORParser.qualifiedNameList_return qualifiedNameList136 = null;

        COMTORParser.block_return block137 = null;


        CommonTree v_tree=null;
        CommonTree IDENTIFIER112_tree=null;
        CommonTree string_literal114_tree=null;
        CommonTree char_literal116_tree=null;
        CommonTree char_literal119_tree=null;
        CommonTree IDENTIFIER121_tree=null;
        CommonTree char_literal123_tree=null;
        CommonTree char_literal124_tree=null;
        CommonTree string_literal125_tree=null;
        CommonTree char_literal128_tree=null;
        CommonTree IDENTIFIER131_tree=null;
        CommonTree char_literal133_tree=null;
        CommonTree char_literal134_tree=null;
        CommonTree string_literal135_tree=null;
        CommonTree char_literal138_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_explicitConstructorInvocation=new RewriteRuleSubtreeStream(adaptor,"rule explicitConstructorInvocation");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // COMTOR.g:310:5: ( ( modifiers )? ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' -> ^( CONSTRUCTOR IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( explicitConstructorInvocation )? ( blockStatement )* ) ) | ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) -> ^( METHOD_DEC IDENTIFIER ^( ACCESS_MODIFIER PACKAGE_PRIVATE ) ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) ) | modifiers ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) -> ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) ) )
            int alt60=3;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    // COMTOR.g:312:10: ( modifiers )? ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
                    {
                    // COMTOR.g:312:10: ( modifiers )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==ABSTRACT||LA45_0==FINAL||LA45_0==NATIVE||(LA45_0>=PRIVATE && LA45_0<=PUBLIC)||(LA45_0>=STATIC && LA45_0<=STRICTFP)||LA45_0==SYNCHRONIZED||LA45_0==TRANSIENT||LA45_0==VOLATILE||LA45_0==MONKEYS_AT) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // COMTOR.g:0:0: modifiers
                            {
                            pushFollow(FOLLOW_modifiers_in_methodDeclaration2243);
                            modifiers110=modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_modifiers.add(modifiers110.getTree());

                            }
                            break;

                    }

                    // COMTOR.g:313:9: ( typeParameters )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==LT) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // COMTOR.g:313:10: typeParameters
                            {
                            pushFollow(FOLLOW_typeParameters_in_methodDeclaration2255);
                            typeParameters111=typeParameters();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters111.getTree());

                            }
                            break;

                    }

                    IDENTIFIER112=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_methodDeclaration2276); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER112);

                    pushFollow(FOLLOW_formalParameters_in_methodDeclaration2286);
                    formalParameters113=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters113.getTree());
                    // COMTOR.g:317:9: ( 'throws' qualifiedNameList )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==THROWS) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // COMTOR.g:317:10: 'throws' qualifiedNameList
                            {
                            string_literal114=(Token)match(input,THROWS,FOLLOW_THROWS_in_methodDeclaration2297); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THROWS.add(string_literal114);

                            pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaration2299);
                            qualifiedNameList115=qualifiedNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList115.getTree());

                            }
                            break;

                    }

                    char_literal116=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_methodDeclaration2320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACE.add(char_literal116);

                    // COMTOR.g:320:9: ( explicitConstructorInvocation )?
                    int alt48=2;
                    alt48 = dfa48.predict(input);
                    switch (alt48) {
                        case 1 :
                            // COMTOR.g:320:10: explicitConstructorInvocation
                            {
                            pushFollow(FOLLOW_explicitConstructorInvocation_in_methodDeclaration2332);
                            explicitConstructorInvocation117=explicitConstructorInvocation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_explicitConstructorInvocation.add(explicitConstructorInvocation117.getTree());

                            }
                            break;

                    }

                    // COMTOR.g:322:9: ( blockStatement )*
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==EOF||(LA49_0>=IDENTIFIER && LA49_0<=NULL)||(LA49_0>=ABSTRACT && LA49_0<=BYTE)||(LA49_0>=CHAR && LA49_0<=CLASS)||LA49_0==CONTINUE||(LA49_0>=DO && LA49_0<=DOUBLE)||LA49_0==ENUM||LA49_0==FINAL||(LA49_0>=FLOAT && LA49_0<=FOR)||LA49_0==IF||(LA49_0>=INT && LA49_0<=THROW)||(LA49_0>=TRANSIENT && LA49_0<=LPAREN)||LA49_0==LBRACE||LA49_0==SEMI||(LA49_0>=BANG && LA49_0<=TILDE)||(LA49_0>=PLUSPLUS && LA49_0<=SUB)||LA49_0==MONKEYS_AT) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // COMTOR.g:322:10: blockStatement
                    	    {
                    	    pushFollow(FOLLOW_blockStatement_in_methodDeclaration2354);
                    	    blockStatement118=blockStatement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement118.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);

                    char_literal119=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_methodDeclaration2375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACE.add(char_literal119);



                    // AST REWRITE
                    // elements: typeParameters, blockStatement, modifiers, formalParameters, qualifiedNameList, IDENTIFIER, explicitConstructorInvocation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 325:9: -> ^( CONSTRUCTOR IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( explicitConstructorInvocation )? ( blockStatement )* ) )
                    {
                        // COMTOR.g:325:12: ^( CONSTRUCTOR IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( explicitConstructorInvocation )? ( blockStatement )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR, "CONSTRUCTOR"), root_1);

                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        // COMTOR.g:325:37: ( ^( ACCESS_MODIFIER modifiers ) )?
                        if ( stream_modifiers.hasNext() ) {
                            // COMTOR.g:325:37: ^( ACCESS_MODIFIER modifiers )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                            adaptor.addChild(root_2, stream_modifiers.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifiers.reset();
                        // COMTOR.g:325:67: ( ^( PARAMS formalParameters ) )?
                        if ( stream_formalParameters.hasNext() ) {
                            // COMTOR.g:325:67: ^( PARAMS formalParameters )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMS, "PARAMS"), root_2);

                            adaptor.addChild(root_2, stream_formalParameters.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_formalParameters.reset();
                        // COMTOR.g:325:95: ( ^( TYPE_PARAMS typeParameters ) )?
                        if ( stream_typeParameters.hasNext() ) {
                            // COMTOR.g:325:95: ^( TYPE_PARAMS typeParameters )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PARAMS, "TYPE_PARAMS"), root_2);

                            adaptor.addChild(root_2, stream_typeParameters.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_typeParameters.reset();
                        // COMTOR.g:326:10: ( ^( THROWS qualifiedNameList ) )?
                        if ( stream_qualifiedNameList.hasNext() ) {
                            // COMTOR.g:326:10: ^( THROWS qualifiedNameList )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS, "THROWS"), root_2);

                            adaptor.addChild(root_2, stream_qualifiedNameList.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_qualifiedNameList.reset();
                        // COMTOR.g:326:39: ^( BODY ( explicitConstructorInvocation )? ( blockStatement )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                        // COMTOR.g:326:46: ( explicitConstructorInvocation )?
                        if ( stream_explicitConstructorInvocation.hasNext() ) {
                            adaptor.addChild(root_2, stream_explicitConstructorInvocation.nextTree());

                        }
                        stream_explicitConstructorInvocation.reset();
                        // COMTOR.g:326:77: ( blockStatement )*
                        while ( stream_blockStatement.hasNext() ) {
                            adaptor.addChild(root_2, stream_blockStatement.nextTree());

                        }
                        stream_blockStatement.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:328:6: ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' )
                    {
                    // COMTOR.g:328:6: ( typeParameters )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==LT) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // COMTOR.g:328:7: typeParameters
                            {
                            pushFollow(FOLLOW_typeParameters_in_methodDeclaration2453);
                            typeParameters120=typeParameters();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters120.getTree());

                            }
                            break;

                    }

                    // COMTOR.g:329:6: (t= type | v= 'void' )
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==IDENTIFIER||LA51_0==BOOLEAN||LA51_0==BYTE||LA51_0==CHAR||LA51_0==DOUBLE||LA51_0==FLOAT||LA51_0==INT||LA51_0==LONG||LA51_0==SHORT) ) {
                        alt51=1;
                    }
                    else if ( (LA51_0==VOID) ) {
                        alt51=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 0, input);

                        throw nvae;
                    }
                    switch (alt51) {
                        case 1 :
                            // COMTOR.g:329:7: t= type
                            {
                            pushFollow(FOLLOW_type_in_methodDeclaration2465);
                            t=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(t.getTree());

                            }
                            break;
                        case 2 :
                            // COMTOR.g:330:10: v= 'void'
                            {
                            v=(Token)match(input,VOID,FOLLOW_VOID_in_methodDeclaration2478); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_VOID.add(v);


                            }
                            break;

                    }

                    IDENTIFIER121=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_methodDeclaration2498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER121);

                    pushFollow(FOLLOW_formalParameters_in_methodDeclaration2508);
                    formalParameters122=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters122.getTree());
                    // COMTOR.g:334:9: ( '[' ']' )*
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( (LA52_0==LBRACKET) ) {
                            alt52=1;
                        }


                        switch (alt52) {
                    	case 1 :
                    	    // COMTOR.g:334:10: '[' ']'
                    	    {
                    	    char_literal123=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_methodDeclaration2519); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal123);

                    	    char_literal124=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_methodDeclaration2521); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal124);


                    	    }
                    	    break;

                    	default :
                    	    break loop52;
                        }
                    } while (true);

                    // COMTOR.g:336:9: ( 'throws' qualifiedNameList )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==THROWS) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // COMTOR.g:336:10: 'throws' qualifiedNameList
                            {
                            string_literal125=(Token)match(input,THROWS,FOLLOW_THROWS_in_methodDeclaration2543); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THROWS.add(string_literal125);

                            pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaration2545);
                            qualifiedNameList126=qualifiedNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList126.getTree());

                            }
                            break;

                    }

                    // COMTOR.g:338:9: ( block | ';' )
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==LBRACE) ) {
                        alt54=1;
                    }
                    else if ( (LA54_0==SEMI) ) {
                        alt54=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 54, 0, input);

                        throw nvae;
                    }
                    switch (alt54) {
                        case 1 :
                            // COMTOR.g:339:13: block
                            {
                            pushFollow(FOLLOW_block_in_methodDeclaration2600);
                            block127=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block127.getTree());

                            }
                            break;
                        case 2 :
                            // COMTOR.g:340:13: ';'
                            {
                            char_literal128=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDeclaration2614); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(char_literal128);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: SEMI, IDENTIFIER, qualifiedNameList, block, formalParameters, v, typeParameters, t
                    // token labels: v
                    // rule labels: retval, t
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 342:9: -> ^( METHOD_DEC IDENTIFIER ^( ACCESS_MODIFIER PACKAGE_PRIVATE ) ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) )
                    {
                        // COMTOR.g:342:12: ^( METHOD_DEC IDENTIFIER ^( ACCESS_MODIFIER PACKAGE_PRIVATE ) ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_DEC, "METHOD_DEC"), root_1);

                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        // COMTOR.g:342:36: ^( ACCESS_MODIFIER PACKAGE_PRIVATE )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(PACKAGE_PRIVATE, "PACKAGE_PRIVATE"));

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:342:71: ^( TYPE ( $t)? ( $v)? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                        // COMTOR.g:342:78: ( $t)?
                        if ( stream_t.hasNext() ) {
                            adaptor.addChild(root_2, stream_t.nextTree());

                        }
                        stream_t.reset();
                        // COMTOR.g:342:82: ( $v)?
                        if ( stream_v.hasNext() ) {
                            adaptor.addChild(root_2, stream_v.nextNode());

                        }
                        stream_v.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:342:87: ( ^( PARAMS formalParameters ) )?
                        if ( stream_formalParameters.hasNext() ) {
                            // COMTOR.g:342:87: ^( PARAMS formalParameters )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMS, "PARAMS"), root_2);

                            adaptor.addChild(root_2, stream_formalParameters.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_formalParameters.reset();
                        // COMTOR.g:342:115: ( ^( TYPE_PARAMS typeParameters ) )?
                        if ( stream_typeParameters.hasNext() ) {
                            // COMTOR.g:342:115: ^( TYPE_PARAMS typeParameters )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PARAMS, "TYPE_PARAMS"), root_2);

                            adaptor.addChild(root_2, stream_typeParameters.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_typeParameters.reset();
                        // COMTOR.g:343:10: ( ^( THROWS qualifiedNameList ) )?
                        if ( stream_qualifiedNameList.hasNext() ) {
                            // COMTOR.g:343:10: ^( THROWS qualifiedNameList )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS, "THROWS"), root_2);

                            adaptor.addChild(root_2, stream_qualifiedNameList.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_qualifiedNameList.reset();
                        // COMTOR.g:343:39: ^( BODY ( block )? ( ';' )? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                        // COMTOR.g:343:46: ( block )?
                        if ( stream_block.hasNext() ) {
                            adaptor.addChild(root_2, stream_block.nextTree());

                        }
                        stream_block.reset();
                        // COMTOR.g:343:53: ( ';' )?
                        if ( stream_SEMI.hasNext() ) {
                            adaptor.addChild(root_2, stream_SEMI.nextNode());

                        }
                        stream_SEMI.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // COMTOR.g:344:9: modifiers ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' )
                    {
                    pushFollow(FOLLOW_modifiers_in_methodDeclaration2712);
                    modifiers129=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers129.getTree());
                    // COMTOR.g:345:9: ( typeParameters )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==LT) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // COMTOR.g:345:10: typeParameters
                            {
                            pushFollow(FOLLOW_typeParameters_in_methodDeclaration2723);
                            typeParameters130=typeParameters();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters130.getTree());

                            }
                            break;

                    }

                    // COMTOR.g:347:9: (t= type | v= 'void' )
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==IDENTIFIER||LA56_0==BOOLEAN||LA56_0==BYTE||LA56_0==CHAR||LA56_0==DOUBLE||LA56_0==FLOAT||LA56_0==INT||LA56_0==LONG||LA56_0==SHORT) ) {
                        alt56=1;
                    }
                    else if ( (LA56_0==VOID) ) {
                        alt56=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 56, 0, input);

                        throw nvae;
                    }
                    switch (alt56) {
                        case 1 :
                            // COMTOR.g:347:10: t= type
                            {
                            pushFollow(FOLLOW_type_in_methodDeclaration2747);
                            t=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(t.getTree());

                            }
                            break;
                        case 2 :
                            // COMTOR.g:348:13: v= 'void'
                            {
                            v=(Token)match(input,VOID,FOLLOW_VOID_in_methodDeclaration2763); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_VOID.add(v);


                            }
                            break;

                    }

                    IDENTIFIER131=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_methodDeclaration2783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER131);

                    pushFollow(FOLLOW_formalParameters_in_methodDeclaration2793);
                    formalParameters132=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters132.getTree());
                    // COMTOR.g:352:9: ( '[' ']' )*
                    loop57:
                    do {
                        int alt57=2;
                        int LA57_0 = input.LA(1);

                        if ( (LA57_0==LBRACKET) ) {
                            alt57=1;
                        }


                        switch (alt57) {
                    	case 1 :
                    	    // COMTOR.g:352:10: '[' ']'
                    	    {
                    	    char_literal133=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_methodDeclaration2804); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal133);

                    	    char_literal134=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_methodDeclaration2806); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal134);


                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);

                    // COMTOR.g:354:9: ( 'throws' qualifiedNameList )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==THROWS) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // COMTOR.g:354:10: 'throws' qualifiedNameList
                            {
                            string_literal135=(Token)match(input,THROWS,FOLLOW_THROWS_in_methodDeclaration2828); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THROWS.add(string_literal135);

                            pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaration2830);
                            qualifiedNameList136=qualifiedNameList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList136.getTree());

                            }
                            break;

                    }

                    // COMTOR.g:356:9: ( block | ';' )
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==LBRACE) ) {
                        alt59=1;
                    }
                    else if ( (LA59_0==SEMI) ) {
                        alt59=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 59, 0, input);

                        throw nvae;
                    }
                    switch (alt59) {
                        case 1 :
                            // COMTOR.g:357:13: block
                            {
                            pushFollow(FOLLOW_block_in_methodDeclaration2885);
                            block137=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block137.getTree());

                            }
                            break;
                        case 2 :
                            // COMTOR.g:358:13: ';'
                            {
                            char_literal138=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDeclaration2899); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMI.add(char_literal138);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: IDENTIFIER, block, typeParameters, v, SEMI, t, formalParameters, modifiers, qualifiedNameList
                    // token labels: v
                    // rule labels: retval, t
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 360:9: -> ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) )
                    {
                        // COMTOR.g:360:12: ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_DEC, "METHOD_DEC"), root_1);

                        adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                        // COMTOR.g:360:36: ( ^( ACCESS_MODIFIER modifiers ) )?
                        if ( stream_modifiers.hasNext() ) {
                            // COMTOR.g:360:36: ^( ACCESS_MODIFIER modifiers )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                            adaptor.addChild(root_2, stream_modifiers.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_modifiers.reset();
                        // COMTOR.g:360:66: ^( TYPE ( $t)? ( $v)? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                        // COMTOR.g:360:73: ( $t)?
                        if ( stream_t.hasNext() ) {
                            adaptor.addChild(root_2, stream_t.nextTree());

                        }
                        stream_t.reset();
                        // COMTOR.g:360:77: ( $v)?
                        if ( stream_v.hasNext() ) {
                            adaptor.addChild(root_2, stream_v.nextNode());

                        }
                        stream_v.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:360:82: ( ^( PARAMS formalParameters ) )?
                        if ( stream_formalParameters.hasNext() ) {
                            // COMTOR.g:360:82: ^( PARAMS formalParameters )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMS, "PARAMS"), root_2);

                            adaptor.addChild(root_2, stream_formalParameters.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_formalParameters.reset();
                        // COMTOR.g:360:110: ( ^( TYPE_PARAMS typeParameters ) )?
                        if ( stream_typeParameters.hasNext() ) {
                            // COMTOR.g:360:110: ^( TYPE_PARAMS typeParameters )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PARAMS, "TYPE_PARAMS"), root_2);

                            adaptor.addChild(root_2, stream_typeParameters.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_typeParameters.reset();
                        // COMTOR.g:361:10: ( ^( THROWS qualifiedNameList ) )?
                        if ( stream_qualifiedNameList.hasNext() ) {
                            // COMTOR.g:361:10: ^( THROWS qualifiedNameList )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS, "THROWS"), root_2);

                            adaptor.addChild(root_2, stream_qualifiedNameList.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_qualifiedNameList.reset();
                        // COMTOR.g:361:39: ^( BODY ( block )? ( ';' )? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                        // COMTOR.g:361:46: ( block )?
                        if ( stream_block.hasNext() ) {
                            adaptor.addChild(root_2, stream_block.nextTree());

                        }
                        stream_block.reset();
                        // COMTOR.g:361:53: ( ';' )?
                        if ( stream_SEMI.hasNext() ) {
                            adaptor.addChild(root_2, stream_SEMI.nextNode());

                        }
                        stream_SEMI.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // COMTOR.g:365:1: fieldDeclaration : ( modifiers )? type variableDeclarator ( ',' variableDeclarator )* ';' -> ^( VAR_DEF ( variableDeclarator )+ ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE type ) ) ;
    public final COMTORParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        COMTORParser.fieldDeclaration_return retval = new COMTORParser.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal142=null;
        Token char_literal144=null;
        COMTORParser.modifiers_return modifiers139 = null;

        COMTORParser.type_return type140 = null;

        COMTORParser.variableDeclarator_return variableDeclarator141 = null;

        COMTORParser.variableDeclarator_return variableDeclarator143 = null;


        CommonTree char_literal142_tree=null;
        CommonTree char_literal144_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // COMTOR.g:366:5: ( ( modifiers )? type variableDeclarator ( ',' variableDeclarator )* ';' -> ^( VAR_DEF ( variableDeclarator )+ ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE type ) ) )
            // COMTOR.g:366:9: ( modifiers )? type variableDeclarator ( ',' variableDeclarator )* ';'
            {
            // COMTOR.g:366:9: ( modifiers )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==ABSTRACT||LA61_0==FINAL||LA61_0==NATIVE||(LA61_0>=PRIVATE && LA61_0<=PUBLIC)||(LA61_0>=STATIC && LA61_0<=STRICTFP)||LA61_0==SYNCHRONIZED||LA61_0==TRANSIENT||LA61_0==VOLATILE||LA61_0==MONKEYS_AT) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // COMTOR.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_fieldDeclaration3009);
                    modifiers139=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers139.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_in_fieldDeclaration3020);
            type140=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type140.getTree());
            pushFollow(FOLLOW_variableDeclarator_in_fieldDeclaration3030);
            variableDeclarator141=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator141.getTree());
            // COMTOR.g:369:9: ( ',' variableDeclarator )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==COMMA) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // COMTOR.g:369:10: ',' variableDeclarator
            	    {
            	    char_literal142=(Token)match(input,COMMA,FOLLOW_COMMA_in_fieldDeclaration3041); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal142);

            	    pushFollow(FOLLOW_variableDeclarator_in_fieldDeclaration3043);
            	    variableDeclarator143=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator143.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            char_literal144=(Token)match(input,SEMI,FOLLOW_SEMI_in_fieldDeclaration3064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal144);



            // AST REWRITE
            // elements: modifiers, type, variableDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 372:9: -> ^( VAR_DEF ( variableDeclarator )+ ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE type ) )
            {
                // COMTOR.g:372:12: ^( VAR_DEF ( variableDeclarator )+ ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE type ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DEF, "VAR_DEF"), root_1);

                if ( !(stream_variableDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variableDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclarator.nextTree());

                }
                stream_variableDeclarator.reset();
                // COMTOR.g:372:42: ( ^( ACCESS_MODIFIER modifiers ) )?
                if ( stream_modifiers.hasNext() ) {
                    // COMTOR.g:372:42: ^( ACCESS_MODIFIER modifiers )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                    adaptor.addChild(root_2, stream_modifiers.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_modifiers.reset();
                // COMTOR.g:372:72: ^( TYPE type )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                adaptor.addChild(root_2, stream_type.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // COMTOR.g:375:1: variableDeclarator : IDENTIFIER (b+= '[' b+= ']' )* ( '=' variableInitializer )? -> IDENTIFIER ( ^( INITIAL_VALUE variableInitializer ) )? ( ^( ARRAY ( $b)* ) )? ;
    public final COMTORParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        COMTORParser.variableDeclarator_return retval = new COMTORParser.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER145=null;
        Token char_literal146=null;
        Token b=null;
        List list_b=null;
        COMTORParser.variableInitializer_return variableInitializer147 = null;


        CommonTree IDENTIFIER145_tree=null;
        CommonTree char_literal146_tree=null;
        CommonTree b_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // COMTOR.g:376:5: ( IDENTIFIER (b+= '[' b+= ']' )* ( '=' variableInitializer )? -> IDENTIFIER ( ^( INITIAL_VALUE variableInitializer ) )? ( ^( ARRAY ( $b)* ) )? )
            // COMTOR.g:376:9: IDENTIFIER (b+= '[' b+= ']' )* ( '=' variableInitializer )?
            {
            IDENTIFIER145=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variableDeclarator3114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER145);

            // COMTOR.g:377:9: (b+= '[' b+= ']' )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==LBRACKET) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // COMTOR.g:377:10: b+= '[' b+= ']'
            	    {
            	    b=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_variableDeclarator3127); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACKET.add(b);

            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b);

            	    b=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_variableDeclarator3131); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACKET.add(b);

            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b);


            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            // COMTOR.g:379:9: ( '=' variableInitializer )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==EQ) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // COMTOR.g:379:10: '=' variableInitializer
                    {
                    char_literal146=(Token)match(input,EQ,FOLLOW_EQ_in_variableDeclarator3153); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQ.add(char_literal146);

                    pushFollow(FOLLOW_variableInitializer_in_variableDeclarator3155);
                    variableInitializer147=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer147.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: variableInitializer, IDENTIFIER, b
            // token labels: 
            // rule labels: retval
            // token list labels: b
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b", list_b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 381:9: -> IDENTIFIER ( ^( INITIAL_VALUE variableInitializer ) )? ( ^( ARRAY ( $b)* ) )?
            {
                adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());
                // COMTOR.g:381:23: ( ^( INITIAL_VALUE variableInitializer ) )?
                if ( stream_variableInitializer.hasNext() ) {
                    // COMTOR.g:381:23: ^( INITIAL_VALUE variableInitializer )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INITIAL_VALUE, "INITIAL_VALUE"), root_1);

                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_variableInitializer.reset();
                // COMTOR.g:381:61: ( ^( ARRAY ( $b)* ) )?
                if ( stream_b.hasNext() ) {
                    // COMTOR.g:381:61: ^( ARRAY ( $b)* )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);

                    // COMTOR.g:381:69: ( $b)*
                    while ( stream_b.hasNext() ) {
                        adaptor.addChild(root_1, stream_b.nextNode());

                    }
                    stream_b.reset();

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_b.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // COMTOR.g:384:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );
    public final COMTORParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        COMTORParser.interfaceBodyDeclaration_return retval = new COMTORParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal152=null;
        COMTORParser.interfaceFieldDeclaration_return interfaceFieldDeclaration148 = null;

        COMTORParser.interfaceMethodDeclaration_return interfaceMethodDeclaration149 = null;

        COMTORParser.interfaceDeclaration_return interfaceDeclaration150 = null;

        COMTORParser.classDeclaration_return classDeclaration151 = null;


        CommonTree char_literal152_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // COMTOR.g:388:5: ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' )
            int alt65=5;
            alt65 = dfa65.predict(input);
            switch (alt65) {
                case 1 :
                    // COMTOR.g:388:9: interfaceFieldDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interfaceFieldDeclaration_in_interfaceBodyDeclaration3217);
                    interfaceFieldDeclaration148=interfaceFieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceFieldDeclaration148.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:389:9: interfaceMethodDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodDeclaration_in_interfaceBodyDeclaration3227);
                    interfaceMethodDeclaration149=interfaceMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaration149.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:390:9: interfaceDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration3237);
                    interfaceDeclaration150=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceDeclaration150.getTree());

                    }
                    break;
                case 4 :
                    // COMTOR.g:391:9: classDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_interfaceBodyDeclaration3247);
                    classDeclaration151=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDeclaration151.getTree());

                    }
                    break;
                case 5 :
                    // COMTOR.g:392:9: ';'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal152=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceBodyDeclaration3257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal152_tree = (CommonTree)adaptor.create(char_literal152);
                    adaptor.addChild(root_0, char_literal152_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class interfaceMethodDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaration"
    // COMTOR.g:395:1: interfaceMethodDeclaration : ( modifiers )? ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' -> ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( THROWS qualifiedNameList ) )? ) ;
    public final COMTORParser.interfaceMethodDeclaration_return interfaceMethodDeclaration() throws RecognitionException {
        COMTORParser.interfaceMethodDeclaration_return retval = new COMTORParser.interfaceMethodDeclaration_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token v=null;
        Token IDENTIFIER155=null;
        Token char_literal157=null;
        Token char_literal158=null;
        Token string_literal159=null;
        Token char_literal161=null;
        COMTORParser.type_return t = null;

        COMTORParser.modifiers_return modifiers153 = null;

        COMTORParser.typeParameters_return typeParameters154 = null;

        COMTORParser.formalParameters_return formalParameters156 = null;

        COMTORParser.qualifiedNameList_return qualifiedNameList160 = null;


        CommonTree v_tree=null;
        CommonTree IDENTIFIER155_tree=null;
        CommonTree char_literal157_tree=null;
        CommonTree char_literal158_tree=null;
        CommonTree string_literal159_tree=null;
        CommonTree char_literal161_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_THROWS=new RewriteRuleTokenStream(adaptor,"token THROWS");
        RewriteRuleTokenStream stream_VOID=new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_qualifiedNameList=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedNameList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // COMTOR.g:396:5: ( ( modifiers )? ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' -> ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( THROWS qualifiedNameList ) )? ) )
            // COMTOR.g:396:9: ( modifiers )? ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
            {
            // COMTOR.g:396:9: ( modifiers )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==ABSTRACT||LA66_0==FINAL||LA66_0==NATIVE||(LA66_0>=PRIVATE && LA66_0<=PUBLIC)||(LA66_0>=STATIC && LA66_0<=STRICTFP)||LA66_0==SYNCHRONIZED||LA66_0==TRANSIENT||LA66_0==VOLATILE||LA66_0==MONKEYS_AT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // COMTOR.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_interfaceMethodDeclaration3277);
                    modifiers153=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers153.getTree());

                    }
                    break;

            }

            // COMTOR.g:397:9: ( typeParameters )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LT) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // COMTOR.g:397:10: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_interfaceMethodDeclaration3289);
                    typeParameters154=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters154.getTree());

                    }
                    break;

            }

            // COMTOR.g:399:9: (t= type | v= 'void' )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==IDENTIFIER||LA68_0==BOOLEAN||LA68_0==BYTE||LA68_0==CHAR||LA68_0==DOUBLE||LA68_0==FLOAT||LA68_0==INT||LA68_0==LONG||LA68_0==SHORT) ) {
                alt68=1;
            }
            else if ( (LA68_0==VOID) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // COMTOR.g:399:10: t= type
                    {
                    pushFollow(FOLLOW_type_in_interfaceMethodDeclaration3313);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(t.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:400:10: v= 'void'
                    {
                    v=(Token)match(input,VOID,FOLLOW_VOID_in_interfaceMethodDeclaration3326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VOID.add(v);


                    }
                    break;

            }

            IDENTIFIER155=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interfaceMethodDeclaration3346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER155);

            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaration3356);
            formalParameters156=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters156.getTree());
            // COMTOR.g:404:9: ( '[' ']' )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==LBRACKET) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // COMTOR.g:404:10: '[' ']'
            	    {
            	    char_literal157=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_interfaceMethodDeclaration3367); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal157);

            	    char_literal158=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_interfaceMethodDeclaration3369); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal158);


            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);

            // COMTOR.g:406:9: ( 'throws' qualifiedNameList )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==THROWS) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // COMTOR.g:406:10: 'throws' qualifiedNameList
                    {
                    string_literal159=(Token)match(input,THROWS,FOLLOW_THROWS_in_interfaceMethodDeclaration3391); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROWS.add(string_literal159);

                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaration3393);
                    qualifiedNameList160=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifiedNameList.add(qualifiedNameList160.getTree());

                    }
                    break;

            }

            char_literal161=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceMethodDeclaration3406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal161);



            // AST REWRITE
            // elements: qualifiedNameList, t, IDENTIFIER, v, typeParameters, modifiers, formalParameters
            // token labels: v
            // rule labels: retval, t
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_v=new RewriteRuleTokenStream(adaptor,"token v",v);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 408:9: -> ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( THROWS qualifiedNameList ) )? )
            {
                // COMTOR.g:408:12: ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( TYPE_PARAMS typeParameters ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( THROWS qualifiedNameList ) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_DEC, "METHOD_DEC"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // COMTOR.g:408:36: ( ^( ACCESS_MODIFIER modifiers ) )?
                if ( stream_modifiers.hasNext() ) {
                    // COMTOR.g:408:36: ^( ACCESS_MODIFIER modifiers )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                    adaptor.addChild(root_2, stream_modifiers.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_modifiers.reset();
                // COMTOR.g:408:66: ( ^( TYPE_PARAMS typeParameters ) )?
                if ( stream_typeParameters.hasNext() ) {
                    // COMTOR.g:408:66: ^( TYPE_PARAMS typeParameters )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_PARAMS, "TYPE_PARAMS"), root_2);

                    adaptor.addChild(root_2, stream_typeParameters.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_typeParameters.reset();
                // COMTOR.g:408:97: ^( TYPE ( $t)? ( $v)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                // COMTOR.g:408:104: ( $t)?
                if ( stream_t.hasNext() ) {
                    adaptor.addChild(root_2, stream_t.nextTree());

                }
                stream_t.reset();
                // COMTOR.g:408:108: ( $v)?
                if ( stream_v.hasNext() ) {
                    adaptor.addChild(root_2, stream_v.nextNode());

                }
                stream_v.reset();

                adaptor.addChild(root_1, root_2);
                }
                // COMTOR.g:408:113: ( ^( PARAMS formalParameters ) )?
                if ( stream_formalParameters.hasNext() ) {
                    // COMTOR.g:408:113: ^( PARAMS formalParameters )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMS, "PARAMS"), root_2);

                    adaptor.addChild(root_2, stream_formalParameters.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_formalParameters.reset();
                // COMTOR.g:409:10: ( ^( THROWS qualifiedNameList ) )?
                if ( stream_qualifiedNameList.hasNext() ) {
                    // COMTOR.g:409:10: ^( THROWS qualifiedNameList )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS, "THROWS"), root_2);

                    adaptor.addChild(root_2, stream_qualifiedNameList.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_qualifiedNameList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, interfaceMethodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaration"

    public static class interfaceFieldDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceFieldDeclaration"
    // COMTOR.g:412:1: interfaceFieldDeclaration : ( modifiers )? type variableDeclarator ( ',' variableDeclarator )* ';' -> ( ^( VAR_DEF ( modifiers )? type variableDeclarator ) )+ ;
    public final COMTORParser.interfaceFieldDeclaration_return interfaceFieldDeclaration() throws RecognitionException {
        COMTORParser.interfaceFieldDeclaration_return retval = new COMTORParser.interfaceFieldDeclaration_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal165=null;
        Token char_literal167=null;
        COMTORParser.modifiers_return modifiers162 = null;

        COMTORParser.type_return type163 = null;

        COMTORParser.variableDeclarator_return variableDeclarator164 = null;

        COMTORParser.variableDeclarator_return variableDeclarator166 = null;


        CommonTree char_literal165_tree=null;
        CommonTree char_literal167_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // COMTOR.g:418:5: ( ( modifiers )? type variableDeclarator ( ',' variableDeclarator )* ';' -> ( ^( VAR_DEF ( modifiers )? type variableDeclarator ) )+ )
            // COMTOR.g:418:9: ( modifiers )? type variableDeclarator ( ',' variableDeclarator )* ';'
            {
            // COMTOR.g:418:9: ( modifiers )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==ABSTRACT||LA71_0==FINAL||LA71_0==NATIVE||(LA71_0>=PRIVATE && LA71_0<=PUBLIC)||(LA71_0>=STATIC && LA71_0<=STRICTFP)||LA71_0==SYNCHRONIZED||LA71_0==TRANSIENT||LA71_0==VOLATILE||LA71_0==MONKEYS_AT) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // COMTOR.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_interfaceFieldDeclaration3493);
                    modifiers162=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers162.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_in_interfaceFieldDeclaration3496);
            type163=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type163.getTree());
            pushFollow(FOLLOW_variableDeclarator_in_interfaceFieldDeclaration3498);
            variableDeclarator164=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator164.getTree());
            // COMTOR.g:419:9: ( ',' variableDeclarator )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // COMTOR.g:419:10: ',' variableDeclarator
            	    {
            	    char_literal165=(Token)match(input,COMMA,FOLLOW_COMMA_in_interfaceFieldDeclaration3509); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal165);

            	    pushFollow(FOLLOW_variableDeclarator_in_interfaceFieldDeclaration3511);
            	    variableDeclarator166=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator166.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            char_literal167=(Token)match(input,SEMI,FOLLOW_SEMI_in_interfaceFieldDeclaration3532); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal167);



            // AST REWRITE
            // elements: modifiers, type, variableDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 422:9: -> ( ^( VAR_DEF ( modifiers )? type variableDeclarator ) )+
            {
                if ( !(stream_type.hasNext()||stream_variableDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type.hasNext()||stream_variableDeclarator.hasNext() ) {
                    // COMTOR.g:422:12: ^( VAR_DEF ( modifiers )? type variableDeclarator )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DEF, "VAR_DEF"), root_1);

                    // COMTOR.g:422:22: ( modifiers )?
                    if ( stream_modifiers.hasNext() ) {
                        adaptor.addChild(root_1, stream_modifiers.nextTree());

                    }
                    stream_modifiers.reset();
                    adaptor.addChild(root_1, stream_type.nextTree());
                    adaptor.addChild(root_1, stream_variableDeclarator.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type.reset();
                stream_variableDeclarator.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, interfaceFieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclaration"

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // COMTOR.g:426:1: type : ( classOrInterfaceType (b+= '[' b+= ']' )* -> classOrInterfaceType ( ^( ARRAY ( $b)* ) )? | primitiveType (b+= '[' b+= ']' )* -> primitiveType ( ^( ARRAY ( $b)* ) )? );
    public final COMTORParser.type_return type() throws RecognitionException {
        COMTORParser.type_return retval = new COMTORParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token b=null;
        List list_b=null;
        COMTORParser.classOrInterfaceType_return classOrInterfaceType168 = null;

        COMTORParser.primitiveType_return primitiveType169 = null;


        CommonTree b_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_classOrInterfaceType=new RewriteRuleSubtreeStream(adaptor,"rule classOrInterfaceType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // COMTOR.g:427:5: ( classOrInterfaceType (b+= '[' b+= ']' )* -> classOrInterfaceType ( ^( ARRAY ( $b)* ) )? | primitiveType (b+= '[' b+= ']' )* -> primitiveType ( ^( ARRAY ( $b)* ) )? )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==IDENTIFIER) ) {
                alt75=1;
            }
            else if ( (LA75_0==BOOLEAN||LA75_0==BYTE||LA75_0==CHAR||LA75_0==DOUBLE||LA75_0==FLOAT||LA75_0==INT||LA75_0==LONG||LA75_0==SHORT) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // COMTOR.g:427:9: classOrInterfaceType (b+= '[' b+= ']' )*
                    {
                    pushFollow(FOLLOW_classOrInterfaceType_in_type3575);
                    classOrInterfaceType168=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classOrInterfaceType.add(classOrInterfaceType168.getTree());
                    // COMTOR.g:428:9: (b+= '[' b+= ']' )*
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==LBRACKET) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // COMTOR.g:428:10: b+= '[' b+= ']'
                    	    {
                    	    b=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_type3588); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(b);

                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);

                    	    b=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_type3592); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(b);

                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);


                    	    }
                    	    break;

                    	default :
                    	    break loop73;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: b, classOrInterfaceType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: b
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b", list_b);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 430:9: -> classOrInterfaceType ( ^( ARRAY ( $b)* ) )?
                    {
                        adaptor.addChild(root_0, stream_classOrInterfaceType.nextTree());
                        // COMTOR.g:430:33: ( ^( ARRAY ( $b)* ) )?
                        if ( stream_b.hasNext() ) {
                            // COMTOR.g:430:33: ^( ARRAY ( $b)* )
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);

                            // COMTOR.g:430:41: ( $b)*
                            while ( stream_b.hasNext() ) {
                                adaptor.addChild(root_1, stream_b.nextNode());

                            }
                            stream_b.reset();

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_b.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:431:9: primitiveType (b+= '[' b+= ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type3634);
                    primitiveType169=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType169.getTree());
                    // COMTOR.g:432:9: (b+= '[' b+= ']' )*
                    loop74:
                    do {
                        int alt74=2;
                        int LA74_0 = input.LA(1);

                        if ( (LA74_0==LBRACKET) ) {
                            alt74=1;
                        }


                        switch (alt74) {
                    	case 1 :
                    	    // COMTOR.g:432:10: b+= '[' b+= ']'
                    	    {
                    	    b=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_type3647); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(b);

                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);

                    	    b=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_type3651); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(b);

                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);


                    	    }
                    	    break;

                    	default :
                    	    break loop74;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: primitiveType, b
                    // token labels: 
                    // rule labels: retval
                    // token list labels: b
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b", list_b);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 434:9: -> primitiveType ( ^( ARRAY ( $b)* ) )?
                    {
                        adaptor.addChild(root_0, stream_primitiveType.nextTree());
                        // COMTOR.g:434:26: ( ^( ARRAY ( $b)* ) )?
                        if ( stream_b.hasNext() ) {
                            // COMTOR.g:434:26: ^( ARRAY ( $b)* )
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);

                            // COMTOR.g:434:34: ( $b)*
                            while ( stream_b.hasNext() ) {
                                adaptor.addChild(root_1, stream_b.nextNode());

                            }
                            stream_b.reset();

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_b.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // COMTOR.g:438:1: classOrInterfaceType : IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* ;
    public final COMTORParser.classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        COMTORParser.classOrInterfaceType_return retval = new COMTORParser.classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER170=null;
        Token char_literal172=null;
        Token IDENTIFIER173=null;
        COMTORParser.typeArguments_return typeArguments171 = null;

        COMTORParser.typeArguments_return typeArguments174 = null;


        CommonTree IDENTIFIER170_tree=null;
        CommonTree char_literal172_tree=null;
        CommonTree IDENTIFIER173_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // COMTOR.g:439:5: ( IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* )
            // COMTOR.g:439:9: IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )*
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENTIFIER170=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_classOrInterfaceType3704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER170_tree = (CommonTree)adaptor.create(IDENTIFIER170);
            adaptor.addChild(root_0, IDENTIFIER170_tree);
            }
            // COMTOR.g:440:9: ( typeArguments )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==LT) ) {
                int LA76_1 = input.LA(2);

                if ( (LA76_1==IDENTIFIER||LA76_1==BOOLEAN||LA76_1==BYTE||LA76_1==CHAR||LA76_1==DOUBLE||LA76_1==FLOAT||LA76_1==INT||LA76_1==LONG||LA76_1==SHORT||LA76_1==QUES) ) {
                    alt76=1;
                }
            }
            switch (alt76) {
                case 1 :
                    // COMTOR.g:440:10: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType3715);
                    typeArguments171=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments171.getTree());

                    }
                    break;

            }

            // COMTOR.g:442:9: ( '.' IDENTIFIER ( typeArguments )? )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==DOT) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // COMTOR.g:442:10: '.' IDENTIFIER ( typeArguments )?
            	    {
            	    char_literal172=(Token)match(input,DOT,FOLLOW_DOT_in_classOrInterfaceType3737); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal172_tree = (CommonTree)adaptor.create(char_literal172);
            	    adaptor.addChild(root_0, char_literal172_tree);
            	    }
            	    IDENTIFIER173=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_classOrInterfaceType3739); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    IDENTIFIER173_tree = (CommonTree)adaptor.create(IDENTIFIER173);
            	    adaptor.addChild(root_0, IDENTIFIER173_tree);
            	    }
            	    // COMTOR.g:443:13: ( typeArguments )?
            	    int alt77=2;
            	    int LA77_0 = input.LA(1);

            	    if ( (LA77_0==LT) ) {
            	        int LA77_1 = input.LA(2);

            	        if ( (LA77_1==IDENTIFIER||LA77_1==BOOLEAN||LA77_1==BYTE||LA77_1==CHAR||LA77_1==DOUBLE||LA77_1==FLOAT||LA77_1==INT||LA77_1==LONG||LA77_1==SHORT||LA77_1==QUES) ) {
            	            alt77=1;
            	        }
            	    }
            	    switch (alt77) {
            	        case 1 :
            	            // COMTOR.g:443:14: typeArguments
            	            {
            	            pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType3754);
            	            typeArguments174=typeArguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments174.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // COMTOR.g:448:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final COMTORParser.primitiveType_return primitiveType() throws RecognitionException {
        COMTORParser.primitiveType_return retval = new COMTORParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set175=null;

        CommonTree set175_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // COMTOR.g:449:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            // COMTOR.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set175=(Token)input.LT(1);
            if ( input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set175));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class typeArguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // COMTOR.g:459:1: typeArguments : '<' typeArgument ( ',' typeArgument )* '>' -> ( typeArgument )* ;
    public final COMTORParser.typeArguments_return typeArguments() throws RecognitionException {
        COMTORParser.typeArguments_return retval = new COMTORParser.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal176=null;
        Token char_literal178=null;
        Token char_literal180=null;
        COMTORParser.typeArgument_return typeArgument177 = null;

        COMTORParser.typeArgument_return typeArgument179 = null;


        CommonTree char_literal176_tree=null;
        CommonTree char_literal178_tree=null;
        CommonTree char_literal180_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_typeArgument=new RewriteRuleSubtreeStream(adaptor,"rule typeArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // COMTOR.g:460:5: ( '<' typeArgument ( ',' typeArgument )* '>' -> ( typeArgument )* )
            // COMTOR.g:460:9: '<' typeArgument ( ',' typeArgument )* '>'
            {
            char_literal176=(Token)match(input,LT,FOLLOW_LT_in_typeArguments3891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LT.add(char_literal176);

            pushFollow(FOLLOW_typeArgument_in_typeArguments3893);
            typeArgument177=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeArgument.add(typeArgument177.getTree());
            // COMTOR.g:461:9: ( ',' typeArgument )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==COMMA) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // COMTOR.g:461:10: ',' typeArgument
            	    {
            	    char_literal178=(Token)match(input,COMMA,FOLLOW_COMMA_in_typeArguments3904); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal178);

            	    pushFollow(FOLLOW_typeArgument_in_typeArguments3906);
            	    typeArgument179=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeArgument.add(typeArgument179.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            char_literal180=(Token)match(input,GT,FOLLOW_GT_in_typeArguments3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GT.add(char_literal180);



            // AST REWRITE
            // elements: typeArgument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 464:9: -> ( typeArgument )*
            {
                // COMTOR.g:464:12: ( typeArgument )*
                while ( stream_typeArgument.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeArgument.nextTree());

                }
                stream_typeArgument.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // COMTOR.g:467:1: typeArgument : ( type | '?' ( (e= 'extends' | s= 'super' ) type )? -> ( $e)? ( $s)? ( '?' )? ( type )? );
    public final COMTORParser.typeArgument_return typeArgument() throws RecognitionException {
        COMTORParser.typeArgument_return retval = new COMTORParser.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token e=null;
        Token s=null;
        Token char_literal182=null;
        COMTORParser.type_return type181 = null;

        COMTORParser.type_return type183 = null;


        CommonTree e_tree=null;
        CommonTree s_tree=null;
        CommonTree char_literal182_tree=null;
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_EXTENDS=new RewriteRuleTokenStream(adaptor,"token EXTENDS");
        RewriteRuleTokenStream stream_QUES=new RewriteRuleTokenStream(adaptor,"token QUES");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // COMTOR.g:468:5: ( type | '?' ( (e= 'extends' | s= 'super' ) type )? -> ( $e)? ( $s)? ( '?' )? ( type )? )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==IDENTIFIER||LA82_0==BOOLEAN||LA82_0==BYTE||LA82_0==CHAR||LA82_0==DOUBLE||LA82_0==FLOAT||LA82_0==INT||LA82_0==LONG||LA82_0==SHORT) ) {
                alt82=1;
            }
            else if ( (LA82_0==QUES) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // COMTOR.g:468:9: type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument3961);
                    type181=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type181.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:469:9: '?' ( (e= 'extends' | s= 'super' ) type )?
                    {
                    char_literal182=(Token)match(input,QUES,FOLLOW_QUES_in_typeArgument3971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUES.add(char_literal182);

                    // COMTOR.g:470:9: ( (e= 'extends' | s= 'super' ) type )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==EXTENDS||LA81_0==SUPER) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // COMTOR.g:471:13: (e= 'extends' | s= 'super' ) type
                            {
                            // COMTOR.g:471:13: (e= 'extends' | s= 'super' )
                            int alt80=2;
                            int LA80_0 = input.LA(1);

                            if ( (LA80_0==EXTENDS) ) {
                                alt80=1;
                            }
                            else if ( (LA80_0==SUPER) ) {
                                alt80=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 80, 0, input);

                                throw nvae;
                            }
                            switch (alt80) {
                                case 1 :
                                    // COMTOR.g:471:14: e= 'extends'
                                    {
                                    e=(Token)match(input,EXTENDS,FOLLOW_EXTENDS_in_typeArgument3998); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_EXTENDS.add(e);


                                    }
                                    break;
                                case 2 :
                                    // COMTOR.g:472:14: s= 'super'
                                    {
                                    s=(Token)match(input,SUPER,FOLLOW_SUPER_in_typeArgument4015); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SUPER.add(s);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument4043);
                            type183=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type183.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: QUES, s, type, e
                    // token labels: e, s
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_e=new RewriteRuleTokenStream(adaptor,"token e",e);
                    RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 476:9: -> ( $e)? ( $s)? ( '?' )? ( type )?
                    {
                        // COMTOR.g:476:12: ( $e)?
                        if ( stream_e.hasNext() ) {
                            adaptor.addChild(root_0, stream_e.nextNode());

                        }
                        stream_e.reset();
                        // COMTOR.g:476:16: ( $s)?
                        if ( stream_s.hasNext() ) {
                            adaptor.addChild(root_0, stream_s.nextNode());

                        }
                        stream_s.reset();
                        // COMTOR.g:476:20: ( '?' )?
                        if ( stream_QUES.hasNext() ) {
                            adaptor.addChild(root_0, stream_QUES.nextNode());

                        }
                        stream_QUES.reset();
                        // COMTOR.g:476:25: ( type )?
                        if ( stream_type.hasNext() ) {
                            adaptor.addChild(root_0, stream_type.nextTree());

                        }
                        stream_type.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // COMTOR.g:479:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* -> ( qualifiedName )+ ;
    public final COMTORParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        COMTORParser.qualifiedNameList_return retval = new COMTORParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal185=null;
        COMTORParser.qualifiedName_return qualifiedName184 = null;

        COMTORParser.qualifiedName_return qualifiedName186 = null;


        CommonTree char_literal185_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // COMTOR.g:480:5: ( qualifiedName ( ',' qualifiedName )* -> ( qualifiedName )+ )
            // COMTOR.g:480:9: qualifiedName ( ',' qualifiedName )*
            {
            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4098);
            qualifiedName184=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName184.getTree());
            // COMTOR.g:481:9: ( ',' qualifiedName )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // COMTOR.g:481:10: ',' qualifiedName
            	    {
            	    char_literal185=(Token)match(input,COMMA,FOLLOW_COMMA_in_qualifiedNameList4109); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal185);

            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4111);
            	    qualifiedName186=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName186.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);



            // AST REWRITE
            // elements: qualifiedName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 483:9: -> ( qualifiedName )+
            {
                if ( !(stream_qualifiedName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifiedName.hasNext() ) {
                    adaptor.addChild(root_0, stream_qualifiedName.nextTree());

                }
                stream_qualifiedName.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // COMTOR.g:486:1: formalParameters : '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? ;
    public final COMTORParser.formalParameters_return formalParameters() throws RecognitionException {
        COMTORParser.formalParameters_return retval = new COMTORParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal187=null;
        Token char_literal189=null;
        COMTORParser.formalParameterDecls_return formalParameterDecls188 = null;


        CommonTree char_literal187_tree=null;
        CommonTree char_literal189_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // COMTOR.g:487:5: ( '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? )
            // COMTOR.g:487:9: '(' ( formalParameterDecls )? ')'
            {
            char_literal187=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameters4155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal187);

            // COMTOR.g:488:9: ( formalParameterDecls )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==EOF||LA84_0==IDENTIFIER||LA84_0==BOOLEAN||LA84_0==BYTE||LA84_0==CHAR||LA84_0==DOUBLE||LA84_0==FINAL||LA84_0==FLOAT||LA84_0==INT||LA84_0==LONG||LA84_0==SHORT||LA84_0==MONKEYS_AT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // COMTOR.g:488:10: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters4166);
                    formalParameterDecls188=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls188.getTree());

                    }
                    break;

            }

            char_literal189=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameters4188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal189);



            // AST REWRITE
            // elements: formalParameterDecls
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 491:9: -> ( formalParameterDecls )?
            {
                // COMTOR.g:491:12: ( formalParameterDecls )?
                if ( stream_formalParameterDecls.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                }
                stream_formalParameterDecls.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // COMTOR.g:494:1: formalParameterDecls : ( ellipsisParameterDecl | n+= normalParameterDecl ( ',' n+= normalParameterDecl )* -> $n | (n+= normalParameterDecl ',' )+ ellipsisParameterDecl -> $n ellipsisParameterDecl );
    public final COMTORParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        COMTORParser.formalParameterDecls_return retval = new COMTORParser.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal191=null;
        Token char_literal192=null;
        List list_n=null;
        COMTORParser.ellipsisParameterDecl_return ellipsisParameterDecl190 = null;

        COMTORParser.ellipsisParameterDecl_return ellipsisParameterDecl193 = null;

        RuleReturnScope n = null;
        CommonTree char_literal191_tree=null;
        CommonTree char_literal192_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_ellipsisParameterDecl=new RewriteRuleSubtreeStream(adaptor,"rule ellipsisParameterDecl");
        RewriteRuleSubtreeStream stream_normalParameterDecl=new RewriteRuleSubtreeStream(adaptor,"rule normalParameterDecl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // COMTOR.g:495:5: ( ellipsisParameterDecl | n+= normalParameterDecl ( ',' n+= normalParameterDecl )* -> $n | (n+= normalParameterDecl ',' )+ ellipsisParameterDecl -> $n ellipsisParameterDecl )
            int alt87=3;
            switch ( input.LA(1) ) {
            case FINAL:
                {
                int LA87_1 = input.LA(2);

                if ( (synpred111_COMTOR()) ) {
                    alt87=1;
                }
                else if ( (synpred113_COMTOR()) ) {
                    alt87=2;
                }
                else if ( (true) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 1, input);

                    throw nvae;
                }
                }
                break;
            case MONKEYS_AT:
                {
                int LA87_2 = input.LA(2);

                if ( (synpred111_COMTOR()) ) {
                    alt87=1;
                }
                else if ( (synpred113_COMTOR()) ) {
                    alt87=2;
                }
                else if ( (true) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;
                }
                }
                break;
            case IDENTIFIER:
                {
                int LA87_3 = input.LA(2);

                if ( (synpred111_COMTOR()) ) {
                    alt87=1;
                }
                else if ( (synpred113_COMTOR()) ) {
                    alt87=2;
                }
                else if ( (true) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 3, input);

                    throw nvae;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA87_4 = input.LA(2);

                if ( (synpred111_COMTOR()) ) {
                    alt87=1;
                }
                else if ( (synpred113_COMTOR()) ) {
                    alt87=2;
                }
                else if ( (true) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 4, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // COMTOR.g:495:9: ellipsisParameterDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ellipsisParameterDecl_in_formalParameterDecls4221);
                    ellipsisParameterDecl190=ellipsisParameterDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ellipsisParameterDecl190.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:496:9: n+= normalParameterDecl ( ',' n+= normalParameterDecl )*
                    {
                    pushFollow(FOLLOW_normalParameterDecl_in_formalParameterDecls4233);
                    n=normalParameterDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_normalParameterDecl.add(n.getTree());
                    if (list_n==null) list_n=new ArrayList();
                    list_n.add(n.getTree());

                    // COMTOR.g:497:9: ( ',' n+= normalParameterDecl )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==COMMA) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // COMTOR.g:497:10: ',' n+= normalParameterDecl
                    	    {
                    	    char_literal191=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterDecls4244); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal191);

                    	    pushFollow(FOLLOW_normalParameterDecl_in_formalParameterDecls4248);
                    	    n=normalParameterDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_normalParameterDecl.add(n.getTree());
                    	    if (list_n==null) list_n=new ArrayList();
                    	    list_n.add(n.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: n
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: n
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"token n",list_n);
                    root_0 = (CommonTree)adaptor.nil();
                    // 499:9: -> $n
                    {
                        adaptor.addChild(root_0, stream_n.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // COMTOR.g:500:9: (n+= normalParameterDecl ',' )+ ellipsisParameterDecl
                    {
                    // COMTOR.g:500:9: (n+= normalParameterDecl ',' )+
                    int cnt86=0;
                    loop86:
                    do {
                        int alt86=2;
                        switch ( input.LA(1) ) {
                        case FINAL:
                            {
                            int LA86_1 = input.LA(2);

                            if ( (synpred114_COMTOR()) ) {
                                alt86=1;
                            }


                            }
                            break;
                        case MONKEYS_AT:
                            {
                            int LA86_2 = input.LA(2);

                            if ( (synpred114_COMTOR()) ) {
                                alt86=1;
                            }


                            }
                            break;
                        case IDENTIFIER:
                            {
                            int LA86_3 = input.LA(2);

                            if ( (synpred114_COMTOR()) ) {
                                alt86=1;
                            }


                            }
                            break;
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case SHORT:
                            {
                            int LA86_4 = input.LA(2);

                            if ( (synpred114_COMTOR()) ) {
                                alt86=1;
                            }


                            }
                            break;

                        }

                        switch (alt86) {
                    	case 1 :
                    	    // COMTOR.g:500:10: n+= normalParameterDecl ','
                    	    {
                    	    pushFollow(FOLLOW_normalParameterDecl_in_formalParameterDecls4285);
                    	    n=normalParameterDecl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_normalParameterDecl.add(n.getTree());
                    	    if (list_n==null) list_n=new ArrayList();
                    	    list_n.add(n.getTree());

                    	    char_literal192=(Token)match(input,COMMA,FOLLOW_COMMA_in_formalParameterDecls4295); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal192);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt86 >= 1 ) break loop86;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(86, input);
                                throw eee;
                        }
                        cnt86++;
                    } while (true);

                    pushFollow(FOLLOW_ellipsisParameterDecl_in_formalParameterDecls4317);
                    ellipsisParameterDecl193=ellipsisParameterDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ellipsisParameterDecl.add(ellipsisParameterDecl193.getTree());


                    // AST REWRITE
                    // elements: n, ellipsisParameterDecl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: n
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"token n",list_n);
                    root_0 = (CommonTree)adaptor.nil();
                    // 504:9: -> $n ellipsisParameterDecl
                    {
                        adaptor.addChild(root_0, stream_n.nextTree());
                        adaptor.addChild(root_0, stream_ellipsisParameterDecl.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class normalParameterDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalParameterDecl"
    // COMTOR.g:507:1: normalParameterDecl : variableModifiers type IDENTIFIER (b+= '[' b+= ']' )* -> IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ( ^( ARRAY ( $b)* ) )? ) ;
    public final COMTORParser.normalParameterDecl_return normalParameterDecl() throws RecognitionException {
        COMTORParser.normalParameterDecl_return retval = new COMTORParser.normalParameterDecl_return();
        retval.start = input.LT(1);
        int normalParameterDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER196=null;
        Token b=null;
        List list_b=null;
        COMTORParser.variableModifiers_return variableModifiers194 = null;

        COMTORParser.type_return type195 = null;


        CommonTree IDENTIFIER196_tree=null;
        CommonTree b_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // COMTOR.g:508:5: ( variableModifiers type IDENTIFIER (b+= '[' b+= ']' )* -> IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ( ^( ARRAY ( $b)* ) )? ) )
            // COMTOR.g:508:9: variableModifiers type IDENTIFIER (b+= '[' b+= ']' )*
            {
            pushFollow(FOLLOW_variableModifiers_in_normalParameterDecl4352);
            variableModifiers194=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers194.getTree());
            pushFollow(FOLLOW_type_in_normalParameterDecl4354);
            type195=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type195.getTree());
            IDENTIFIER196=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_normalParameterDecl4356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER196);

            // COMTOR.g:509:9: (b+= '[' b+= ']' )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==LBRACKET) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // COMTOR.g:509:10: b+= '[' b+= ']'
            	    {
            	    b=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_normalParameterDecl4369); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACKET.add(b);

            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b);

            	    b=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_normalParameterDecl4373); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACKET.add(b);

            	    if (list_b==null) list_b=new ArrayList();
            	    list_b.add(b);


            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);



            // AST REWRITE
            // elements: type, b, IDENTIFIER, variableModifiers
            // token labels: 
            // rule labels: retval
            // token list labels: b
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b", list_b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 511:9: -> IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ( ^( ARRAY ( $b)* ) )? )
            {
                adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());
                // COMTOR.g:511:23: ( ^( ACCESS_MODIFIER variableModifiers ) )?
                if ( stream_variableModifiers.hasNext() ) {
                    // COMTOR.g:511:23: ^( ACCESS_MODIFIER variableModifiers )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_1);

                    adaptor.addChild(root_1, stream_variableModifiers.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_variableModifiers.reset();
                // COMTOR.g:511:61: ^( TYPE type ( ^( ARRAY ( $b)* ) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_type.nextTree());
                // COMTOR.g:511:73: ( ^( ARRAY ( $b)* ) )?
                if ( stream_b.hasNext() ) {
                    // COMTOR.g:511:73: ^( ARRAY ( $b)* )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_2);

                    // COMTOR.g:511:81: ( $b)*
                    while ( stream_b.hasNext() ) {
                        adaptor.addChild(root_2, stream_b.nextNode());

                    }
                    stream_b.reset();

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, normalParameterDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalParameterDecl"

    public static class ellipsisParameterDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ellipsisParameterDecl"
    // COMTOR.g:514:1: ellipsisParameterDecl : variableModifiers type '...' IDENTIFIER -> IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) ;
    public final COMTORParser.ellipsisParameterDecl_return ellipsisParameterDecl() throws RecognitionException {
        COMTORParser.ellipsisParameterDecl_return retval = new COMTORParser.ellipsisParameterDecl_return();
        retval.start = input.LT(1);
        int ellipsisParameterDecl_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal199=null;
        Token IDENTIFIER200=null;
        COMTORParser.variableModifiers_return variableModifiers197 = null;

        COMTORParser.type_return type198 = null;


        CommonTree string_literal199_tree=null;
        CommonTree IDENTIFIER200_tree=null;
        RewriteRuleTokenStream stream_ELLIPSIS=new RewriteRuleTokenStream(adaptor,"token ELLIPSIS");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // COMTOR.g:515:5: ( variableModifiers type '...' IDENTIFIER -> IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) )
            // COMTOR.g:515:9: variableModifiers type '...' IDENTIFIER
            {
            pushFollow(FOLLOW_variableModifiers_in_ellipsisParameterDecl4438);
            variableModifiers197=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers197.getTree());
            pushFollow(FOLLOW_type_in_ellipsisParameterDecl4448);
            type198=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type198.getTree());
            string_literal199=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_ellipsisParameterDecl4451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELLIPSIS.add(string_literal199);

            IDENTIFIER200=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_ellipsisParameterDecl4461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER200);



            // AST REWRITE
            // elements: IDENTIFIER, variableModifiers, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 518:9: -> IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type )
            {
                adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());
                // COMTOR.g:518:23: ( ^( ACCESS_MODIFIER variableModifiers ) )?
                if ( stream_variableModifiers.hasNext() ) {
                    // COMTOR.g:518:23: ^( ACCESS_MODIFIER variableModifiers )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_1);

                    adaptor.addChild(root_1, stream_variableModifiers.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_variableModifiers.reset();
                // COMTOR.g:518:61: ^( TYPE type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, ellipsisParameterDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ellipsisParameterDecl"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // COMTOR.g:522:1: qualifiedName : IDENTIFIER ( '.' IDENTIFIER )* -> IDENTIFIER ( '.' IDENTIFIER )* ;
    public final COMTORParser.qualifiedName_return qualifiedName() throws RecognitionException {
        COMTORParser.qualifiedName_return retval = new COMTORParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER201=null;
        Token char_literal202=null;
        Token IDENTIFIER203=null;

        CommonTree IDENTIFIER201_tree=null;
        CommonTree char_literal202_tree=null;
        CommonTree IDENTIFIER203_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // COMTOR.g:523:5: ( IDENTIFIER ( '.' IDENTIFIER )* -> IDENTIFIER ( '.' IDENTIFIER )* )
            // COMTOR.g:523:9: IDENTIFIER ( '.' IDENTIFIER )*
            {
            IDENTIFIER201=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedName4507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER201);

            // COMTOR.g:524:9: ( '.' IDENTIFIER )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==DOT) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // COMTOR.g:524:10: '.' IDENTIFIER
            	    {
            	    char_literal202=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedName4518); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(char_literal202);

            	    IDENTIFIER203=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_qualifiedName4520); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER203);


            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);



            // AST REWRITE
            // elements: IDENTIFIER, IDENTIFIER, DOT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 526:9: -> IDENTIFIER ( '.' IDENTIFIER )*
            {
                adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());
                // COMTOR.g:526:23: ( '.' IDENTIFIER )*
                while ( stream_IDENTIFIER.hasNext()||stream_DOT.hasNext() ) {
                    adaptor.addChild(root_0, stream_DOT.nextNode());
                    adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());

                }
                stream_IDENTIFIER.reset();
                stream_DOT.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class explicitConstructorInvocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitConstructorInvocation"
    // COMTOR.g:528:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? (t= 'this' | s= 'super' ) arguments ';' -> ^( CONSTRUCTOR_CALL ( $s)? ( $t)? ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? ) | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' -> ^( CONSTRUCTOR_CALL 'super' primary ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? ) );
    public final COMTORParser.explicitConstructorInvocation_return explicitConstructorInvocation() throws RecognitionException {
        COMTORParser.explicitConstructorInvocation_return retval = new COMTORParser.explicitConstructorInvocation_return();
        retval.start = input.LT(1);
        int explicitConstructorInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t=null;
        Token s=null;
        Token char_literal206=null;
        Token char_literal208=null;
        Token string_literal210=null;
        Token char_literal212=null;
        COMTORParser.nonWildcardTypeArguments_return nonWildcardTypeArguments204 = null;

        COMTORParser.arguments_return arguments205 = null;

        COMTORParser.primary_return primary207 = null;

        COMTORParser.nonWildcardTypeArguments_return nonWildcardTypeArguments209 = null;

        COMTORParser.arguments_return arguments211 = null;


        CommonTree t_tree=null;
        CommonTree s_tree=null;
        CommonTree char_literal206_tree=null;
        CommonTree char_literal208_tree=null;
        CommonTree string_literal210_tree=null;
        CommonTree char_literal212_tree=null;
        RewriteRuleTokenStream stream_SUPER=new RewriteRuleTokenStream(adaptor,"token SUPER");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_THIS=new RewriteRuleTokenStream(adaptor,"token THIS");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // COMTOR.g:529:5: ( ( nonWildcardTypeArguments )? (t= 'this' | s= 'super' ) arguments ';' -> ^( CONSTRUCTOR_CALL ( $s)? ( $t)? ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? ) | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' -> ^( CONSTRUCTOR_CALL 'super' primary ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? ) )
            int alt93=2;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // COMTOR.g:529:9: ( nonWildcardTypeArguments )? (t= 'this' | s= 'super' ) arguments ';'
                    {
                    // COMTOR.g:529:9: ( nonWildcardTypeArguments )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==LT) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // COMTOR.g:529:10: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4570);
                            nonWildcardTypeArguments204=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments204.getTree());

                            }
                            break;

                    }

                    // COMTOR.g:531:9: (t= 'this' | s= 'super' )
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==THIS) ) {
                        alt91=1;
                    }
                    else if ( (LA91_0==SUPER) ) {
                        alt91=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 0, input);

                        throw nvae;
                    }
                    switch (alt91) {
                        case 1 :
                            // COMTOR.g:531:10: t= 'this'
                            {
                            t=(Token)match(input,THIS,FOLLOW_THIS_in_explicitConstructorInvocation4599); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THIS.add(t);


                            }
                            break;
                        case 2 :
                            // COMTOR.g:532:10: s= 'super'
                            {
                            s=(Token)match(input,SUPER,FOLLOW_SUPER_in_explicitConstructorInvocation4612); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SUPER.add(s);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4632);
                    arguments205=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments205.getTree());
                    char_literal206=(Token)match(input,SEMI,FOLLOW_SEMI_in_explicitConstructorInvocation4634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal206);



                    // AST REWRITE
                    // elements: s, t, nonWildcardTypeArguments, arguments
                    // token labels: t, s
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
                    RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 535:9: -> ^( CONSTRUCTOR_CALL ( $s)? ( $t)? ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? )
                    {
                        // COMTOR.g:535:12: ^( CONSTRUCTOR_CALL ( $s)? ( $t)? ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, "CONSTRUCTOR_CALL"), root_1);

                        // COMTOR.g:535:31: ( $s)?
                        if ( stream_s.hasNext() ) {
                            adaptor.addChild(root_1, stream_s.nextNode());

                        }
                        stream_s.reset();
                        // COMTOR.g:535:35: ( $t)?
                        if ( stream_t.hasNext() ) {
                            adaptor.addChild(root_1, stream_t.nextNode());

                        }
                        stream_t.reset();
                        // COMTOR.g:535:39: ^( ARGUMENTS arguments )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENTS, "ARGUMENTS"), root_2);

                        adaptor.addChild(root_2, stream_arguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:535:62: ( nonWildcardTypeArguments )?
                        if ( stream_nonWildcardTypeArguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_nonWildcardTypeArguments.nextTree());

                        }
                        stream_nonWildcardTypeArguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:536:9: primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';'
                    {
                    pushFollow(FOLLOW_primary_in_explicitConstructorInvocation4675);
                    primary207=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary.add(primary207.getTree());
                    char_literal208=(Token)match(input,DOT,FOLLOW_DOT_in_explicitConstructorInvocation4685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal208);

                    // COMTOR.g:538:9: ( nonWildcardTypeArguments )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==LT) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // COMTOR.g:538:10: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4696);
                            nonWildcardTypeArguments209=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments209.getTree());

                            }
                            break;

                    }

                    string_literal210=(Token)match(input,SUPER,FOLLOW_SUPER_in_explicitConstructorInvocation4717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUPER.add(string_literal210);

                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4727);
                    arguments211=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments211.getTree());
                    char_literal212=(Token)match(input,SEMI,FOLLOW_SEMI_in_explicitConstructorInvocation4729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal212);



                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, arguments, SUPER, primary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 542:9: -> ^( CONSTRUCTOR_CALL 'super' primary ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? )
                    {
                        // COMTOR.g:542:12: ^( CONSTRUCTOR_CALL 'super' primary ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_CALL, "CONSTRUCTOR_CALL"), root_1);

                        adaptor.addChild(root_1, stream_SUPER.nextNode());
                        adaptor.addChild(root_1, stream_primary.nextTree());
                        // COMTOR.g:542:47: ^( ARGUMENTS arguments )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARGUMENTS, "ARGUMENTS"), root_2);

                        adaptor.addChild(root_2, stream_arguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:542:70: ( nonWildcardTypeArguments )?
                        if ( stream_nonWildcardTypeArguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_nonWildcardTypeArguments.nextTree());

                        }
                        stream_nonWildcardTypeArguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, explicitConstructorInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitConstructorInvocation"

    public static class annotations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // COMTOR.g:545:1: annotations : ( annotation )+ -> ( ^( ANNOTATION annotation ) )* ;
    public final COMTORParser.annotations_return annotations() throws RecognitionException {
        COMTORParser.annotations_return retval = new COMTORParser.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.annotation_return annotation213 = null;


        RewriteRuleSubtreeStream stream_annotation=new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // COMTOR.g:546:5: ( ( annotation )+ -> ( ^( ANNOTATION annotation ) )* )
            // COMTOR.g:546:9: ( annotation )+
            {
            // COMTOR.g:546:9: ( annotation )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==MONKEYS_AT) ) {
                    int LA94_2 = input.LA(2);

                    if ( (LA94_2==IDENTIFIER) ) {
                        int LA94_3 = input.LA(3);

                        if ( (synpred121_COMTOR()) ) {
                            alt94=1;
                        }


                    }


                }


                switch (alt94) {
            	case 1 :
            	    // COMTOR.g:546:10: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations4780);
            	    annotation213=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotation.add(annotation213.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);



            // AST REWRITE
            // elements: annotation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 548:9: -> ( ^( ANNOTATION annotation ) )*
            {
                // COMTOR.g:548:12: ( ^( ANNOTATION annotation ) )*
                while ( stream_annotation.hasNext() ) {
                    // COMTOR.g:548:12: ^( ANNOTATION annotation )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                    adaptor.addChild(root_1, stream_annotation.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_annotation.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // COMTOR.g:551:1: annotation : '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? -> ^( qualifiedName ( elementValuePairs )? ( elementValue )? ) ;
    public final COMTORParser.annotation_return annotation() throws RecognitionException {
        COMTORParser.annotation_return retval = new COMTORParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal214=null;
        Token char_literal216=null;
        Token char_literal219=null;
        COMTORParser.qualifiedName_return qualifiedName215 = null;

        COMTORParser.elementValuePairs_return elementValuePairs217 = null;

        COMTORParser.elementValue_return elementValue218 = null;


        CommonTree char_literal214_tree=null;
        CommonTree char_literal216_tree=null;
        CommonTree char_literal219_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MONKEYS_AT=new RewriteRuleTokenStream(adaptor,"token MONKEYS_AT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // COMTOR.g:556:5: ( '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? -> ^( qualifiedName ( elementValuePairs )? ( elementValue )? ) )
            // COMTOR.g:556:9: '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )?
            {
            char_literal214=(Token)match(input,MONKEYS_AT,FOLLOW_MONKEYS_AT_in_annotation4830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MONKEYS_AT.add(char_literal214);

            pushFollow(FOLLOW_qualifiedName_in_annotation4832);
            qualifiedName215=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName215.getTree());
            // COMTOR.g:557:9: ( '(' ( elementValuePairs | elementValue )? ')' )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==LPAREN) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // COMTOR.g:557:13: '(' ( elementValuePairs | elementValue )? ')'
                    {
                    char_literal216=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotation4846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal216);

                    // COMTOR.g:558:19: ( elementValuePairs | elementValue )?
                    int alt95=3;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==IDENTIFIER) ) {
                        int LA95_1 = input.LA(2);

                        if ( (LA95_1==EQ) ) {
                            alt95=1;
                        }
                        else if ( (LA95_1==INSTANCEOF||(LA95_1>=LPAREN && LA95_1<=RPAREN)||LA95_1==LBRACKET||LA95_1==DOT||LA95_1==QUES||(LA95_1>=EQEQ && LA95_1<=PERCENT)||(LA95_1>=BANGEQ && LA95_1<=LT)) ) {
                            alt95=2;
                        }
                    }
                    else if ( ((LA95_0>=INTLITERAL && LA95_0<=NULL)||LA95_0==BOOLEAN||LA95_0==BYTE||LA95_0==CHAR||LA95_0==DOUBLE||LA95_0==FLOAT||LA95_0==INT||LA95_0==LONG||LA95_0==NEW||LA95_0==SHORT||LA95_0==SUPER||LA95_0==THIS||LA95_0==VOID||LA95_0==LPAREN||LA95_0==LBRACE||(LA95_0>=BANG && LA95_0<=TILDE)||(LA95_0>=PLUSPLUS && LA95_0<=SUB)||LA95_0==MONKEYS_AT) ) {
                        alt95=2;
                    }
                    switch (alt95) {
                        case 1 :
                            // COMTOR.g:558:23: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation4873);
                            elementValuePairs217=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs217.getTree());

                            }
                            break;
                        case 2 :
                            // COMTOR.g:559:23: elementValue
                            {
                            pushFollow(FOLLOW_elementValue_in_annotation4897);
                            elementValue218=elementValue();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValue.add(elementValue218.getTree());

                            }
                            break;

                    }

                    char_literal219=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotation4933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal219);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValuePairs, qualifiedName, elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 563:9: -> ^( qualifiedName ( elementValuePairs )? ( elementValue )? )
            {
                // COMTOR.g:563:12: ^( qualifiedName ( elementValuePairs )? ( elementValue )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_qualifiedName.nextNode(), root_1);

                // COMTOR.g:563:28: ( elementValuePairs )?
                if ( stream_elementValuePairs.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairs.nextTree());

                }
                stream_elementValuePairs.reset();
                // COMTOR.g:563:47: ( elementValue )?
                if ( stream_elementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValue.nextTree());

                }
                stream_elementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // COMTOR.g:566:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* -> ( ^( elementValuePair ) )+ ;
    public final COMTORParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        COMTORParser.elementValuePairs_return retval = new COMTORParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal221=null;
        COMTORParser.elementValuePair_return elementValuePair220 = null;

        COMTORParser.elementValuePair_return elementValuePair222 = null;


        CommonTree char_literal221_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_elementValuePair=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePair");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // COMTOR.g:567:5: ( elementValuePair ( ',' elementValuePair )* -> ( ^( elementValuePair ) )+ )
            // COMTOR.g:567:9: elementValuePair ( ',' elementValuePair )*
            {
            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs4985);
            elementValuePair220=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValuePair.add(elementValuePair220.getTree());
            // COMTOR.g:568:9: ( ',' elementValuePair )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // COMTOR.g:568:10: ',' elementValuePair
            	    {
            	    char_literal221=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairs4996); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal221);

            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs4998);
            	    elementValuePair222=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_elementValuePair.add(elementValuePair222.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);



            // AST REWRITE
            // elements: elementValuePair
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 570:9: -> ( ^( elementValuePair ) )+
            {
                if ( !(stream_elementValuePair.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_elementValuePair.hasNext() ) {
                    // COMTOR.g:570:12: ^( elementValuePair )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot(stream_elementValuePair.nextNode(), root_1);

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_elementValuePair.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // COMTOR.g:573:1: elementValuePair : IDENTIFIER '=' elementValue -> IDENTIFIER elementValue ;
    public final COMTORParser.elementValuePair_return elementValuePair() throws RecognitionException {
        COMTORParser.elementValuePair_return retval = new COMTORParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER223=null;
        Token char_literal224=null;
        COMTORParser.elementValue_return elementValue225 = null;


        CommonTree IDENTIFIER223_tree=null;
        CommonTree char_literal224_tree=null;
        RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // COMTOR.g:574:5: ( IDENTIFIER '=' elementValue -> IDENTIFIER elementValue )
            // COMTOR.g:574:9: IDENTIFIER '=' elementValue
            {
            IDENTIFIER223=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_elementValuePair5044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER223);

            char_literal224=(Token)match(input,EQ,FOLLOW_EQ_in_elementValuePair5046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQ.add(char_literal224);

            pushFollow(FOLLOW_elementValue_in_elementValuePair5048);
            elementValue225=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValue.add(elementValue225.getTree());


            // AST REWRITE
            // elements: IDENTIFIER, elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 575:5: -> IDENTIFIER elementValue
            {
                adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());
                adaptor.addChild(root_0, stream_elementValue.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // COMTOR.g:578:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final COMTORParser.elementValue_return elementValue() throws RecognitionException {
        COMTORParser.elementValue_return retval = new COMTORParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.conditionalExpression_return conditionalExpression226 = null;

        COMTORParser.annotation_return annotation227 = null;

        COMTORParser.elementValueArrayInitializer_return elementValueArrayInitializer228 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // COMTOR.g:579:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt98=3;
            switch ( input.LA(1) ) {
            case IDENTIFIER:
            case INTLITERAL:
            case LONGLITERAL:
            case FLOATLITERAL:
            case DOUBLELITERAL:
            case CHARLITERAL:
            case UNICODECHARLITERAL:
            case STRINGLITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case LPAREN:
            case BANG:
            case TILDE:
            case PLUSPLUS:
            case SUBSUB:
            case PLUS:
            case SUB:
                {
                alt98=1;
                }
                break;
            case MONKEYS_AT:
                {
                alt98=2;
                }
                break;
            case LBRACE:
                {
                alt98=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // COMTOR.g:579:9: conditionalExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue5078);
                    conditionalExpression226=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression226.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:580:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue5088);
                    annotation227=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation227.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:581:9: elementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue5098);
                    elementValueArrayInitializer228=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer228.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // COMTOR.g:584:1: elementValueArrayInitializer : ( '{' '}' -> EMPTY_ARRAY | '{' ( elementValue ( ',' elementValue )* ) ( ',' )? '}' -> ( elementValue )+ );
    public final COMTORParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        COMTORParser.elementValueArrayInitializer_return retval = new COMTORParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal229=null;
        Token char_literal230=null;
        Token char_literal231=null;
        Token char_literal233=null;
        Token char_literal235=null;
        Token char_literal236=null;
        COMTORParser.elementValue_return elementValue232 = null;

        COMTORParser.elementValue_return elementValue234 = null;


        CommonTree char_literal229_tree=null;
        CommonTree char_literal230_tree=null;
        CommonTree char_literal231_tree=null;
        CommonTree char_literal233_tree=null;
        CommonTree char_literal235_tree=null;
        CommonTree char_literal236_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // COMTOR.g:585:5: ( '{' '}' -> EMPTY_ARRAY | '{' ( elementValue ( ',' elementValue )* ) ( ',' )? '}' -> ( elementValue )+ )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==LBRACE) ) {
                int LA101_1 = input.LA(2);

                if ( (LA101_1==RBRACE) ) {
                    alt101=1;
                }
                else if ( ((LA101_1>=IDENTIFIER && LA101_1<=NULL)||LA101_1==BOOLEAN||LA101_1==BYTE||LA101_1==CHAR||LA101_1==DOUBLE||LA101_1==FLOAT||LA101_1==INT||LA101_1==LONG||LA101_1==NEW||LA101_1==SHORT||LA101_1==SUPER||LA101_1==THIS||LA101_1==VOID||LA101_1==LPAREN||LA101_1==LBRACE||(LA101_1>=BANG && LA101_1<=TILDE)||(LA101_1>=PLUSPLUS && LA101_1<=SUB)||LA101_1==MONKEYS_AT) ) {
                    alt101=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    // COMTOR.g:585:9: '{' '}'
                    {
                    char_literal229=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_elementValueArrayInitializer5118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACE.add(char_literal229);

                    char_literal230=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_elementValueArrayInitializer5120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACE.add(char_literal230);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 585:17: -> EMPTY_ARRAY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(EMPTY_ARRAY, "EMPTY_ARRAY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:586:9: '{' ( elementValue ( ',' elementValue )* ) ( ',' )? '}'
                    {
                    char_literal231=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_elementValueArrayInitializer5134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACE.add(char_literal231);

                    // COMTOR.g:587:9: ( elementValue ( ',' elementValue )* )
                    // COMTOR.g:587:10: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5145);
                    elementValue232=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(elementValue232.getTree());
                    // COMTOR.g:588:13: ( ',' elementValue )*
                    loop99:
                    do {
                        int alt99=2;
                        int LA99_0 = input.LA(1);

                        if ( (LA99_0==COMMA) ) {
                            int LA99_1 = input.LA(2);

                            if ( ((LA99_1>=IDENTIFIER && LA99_1<=NULL)||LA99_1==BOOLEAN||LA99_1==BYTE||LA99_1==CHAR||LA99_1==DOUBLE||LA99_1==FLOAT||LA99_1==INT||LA99_1==LONG||LA99_1==NEW||LA99_1==SHORT||LA99_1==SUPER||LA99_1==THIS||LA99_1==VOID||LA99_1==LPAREN||LA99_1==LBRACE||(LA99_1>=BANG && LA99_1<=TILDE)||(LA99_1>=PLUSPLUS && LA99_1<=SUB)||LA99_1==MONKEYS_AT) ) {
                                alt99=1;
                            }


                        }


                        switch (alt99) {
                    	case 1 :
                    	    // COMTOR.g:588:14: ',' elementValue
                    	    {
                    	    char_literal233=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer5160); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal233);

                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5162);
                    	    elementValue234=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValue.add(elementValue234.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop99;
                        }
                    } while (true);


                    }

                    // COMTOR.g:590:11: ( ',' )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==COMMA) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // COMTOR.g:590:12: ','
                            {
                            char_literal235=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer5190); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(char_literal235);


                            }
                            break;

                    }

                    char_literal236=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_elementValueArrayInitializer5194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACE.add(char_literal236);



                    // AST REWRITE
                    // elements: elementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 591:9: -> ( elementValue )+
                    {
                        if ( !(stream_elementValue.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_elementValue.hasNext() ) {
                            adaptor.addChild(root_0, stream_elementValue.nextTree());

                        }
                        stream_elementValue.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // COMTOR.g:595:1: annotationTypeDeclaration : modifiers '@' 'interface' IDENTIFIER annotationTypeBody ;
    public final COMTORParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        COMTORParser.annotationTypeDeclaration_return retval = new COMTORParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal238=null;
        Token string_literal239=null;
        Token IDENTIFIER240=null;
        COMTORParser.modifiers_return modifiers237 = null;

        COMTORParser.annotationTypeBody_return annotationTypeBody241 = null;


        CommonTree char_literal238_tree=null;
        CommonTree string_literal239_tree=null;
        CommonTree IDENTIFIER240_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // COMTOR.g:599:5: ( modifiers '@' 'interface' IDENTIFIER annotationTypeBody )
            // COMTOR.g:599:9: modifiers '@' 'interface' IDENTIFIER annotationTypeBody
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_annotationTypeDeclaration5230);
            modifiers237=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers237.getTree());
            char_literal238=(Token)match(input,MONKEYS_AT,FOLLOW_MONKEYS_AT_in_annotationTypeDeclaration5232); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal238_tree = (CommonTree)adaptor.create(char_literal238);
            adaptor.addChild(root_0, char_literal238_tree);
            }
            string_literal239=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationTypeDeclaration5242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal239_tree = (CommonTree)adaptor.create(string_literal239);
            adaptor.addChild(root_0, string_literal239_tree);
            }
            IDENTIFIER240=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_annotationTypeDeclaration5252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER240_tree = (CommonTree)adaptor.create(IDENTIFIER240);
            adaptor.addChild(root_0, IDENTIFIER240_tree);
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5262);
            annotationTypeBody241=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeBody241.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // COMTOR.g:606:1: annotationTypeBody : '{' ( annotationTypeElementDeclaration )* '}' -> ( annotationTypeElementDeclaration )* ;
    public final COMTORParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        COMTORParser.annotationTypeBody_return retval = new COMTORParser.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal242=null;
        Token char_literal244=null;
        COMTORParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration243 = null;


        CommonTree char_literal242_tree=null;
        CommonTree char_literal244_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_annotationTypeElementDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeElementDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // COMTOR.g:607:5: ( '{' ( annotationTypeElementDeclaration )* '}' -> ( annotationTypeElementDeclaration )* )
            // COMTOR.g:607:9: '{' ( annotationTypeElementDeclaration )* '}'
            {
            char_literal242=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_annotationTypeBody5284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal242);

            // COMTOR.g:608:9: ( annotationTypeElementDeclaration )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==IDENTIFIER||LA102_0==ABSTRACT||LA102_0==BOOLEAN||LA102_0==BYTE||(LA102_0>=CHAR && LA102_0<=CLASS)||LA102_0==DOUBLE||LA102_0==ENUM||LA102_0==FINAL||LA102_0==FLOAT||(LA102_0>=INT && LA102_0<=NATIVE)||(LA102_0>=PRIVATE && LA102_0<=PUBLIC)||(LA102_0>=SHORT && LA102_0<=STRICTFP)||LA102_0==SYNCHRONIZED||LA102_0==TRANSIENT||LA102_0==VOLATILE||LA102_0==SEMI||LA102_0==MONKEYS_AT) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // COMTOR.g:608:10: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5296);
            	    annotationTypeElementDeclaration243=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationTypeElementDeclaration.add(annotationTypeElementDeclaration243.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            char_literal244=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_annotationTypeBody5318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal244);



            // AST REWRITE
            // elements: annotationTypeElementDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 611:9: -> ( annotationTypeElementDeclaration )*
            {
                // COMTOR.g:611:12: ( annotationTypeElementDeclaration )*
                while ( stream_annotationTypeElementDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_annotationTypeElementDeclaration.nextTree());

                }
                stream_annotationTypeElementDeclaration.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // COMTOR.g:614:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' ->);
    public final COMTORParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        COMTORParser.annotationTypeElementDeclaration_return retval = new COMTORParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal251=null;
        COMTORParser.annotationMethodDeclaration_return annotationMethodDeclaration245 = null;

        COMTORParser.interfaceFieldDeclaration_return interfaceFieldDeclaration246 = null;

        COMTORParser.normalClassDeclaration_return normalClassDeclaration247 = null;

        COMTORParser.normalInterfaceDeclaration_return normalInterfaceDeclaration248 = null;

        COMTORParser.enumDeclaration_return enumDeclaration249 = null;

        COMTORParser.annotationTypeDeclaration_return annotationTypeDeclaration250 = null;


        CommonTree char_literal251_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // COMTOR.g:618:5: ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' ->)
            int alt103=7;
            alt103 = dfa103.predict(input);
            switch (alt103) {
                case 1 :
                    // COMTOR.g:618:9: annotationMethodDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodDeclaration_in_annotationTypeElementDeclaration5353);
                    annotationMethodDeclaration245=annotationMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationMethodDeclaration245.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:619:9: interfaceFieldDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_interfaceFieldDeclaration_in_annotationTypeElementDeclaration5363);
                    interfaceFieldDeclaration246=interfaceFieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceFieldDeclaration246.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:620:9: normalClassDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_annotationTypeElementDeclaration5373);
                    normalClassDeclaration247=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalClassDeclaration247.getTree());

                    }
                    break;
                case 4 :
                    // COMTOR.g:621:9: normalInterfaceDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementDeclaration5383);
                    normalInterfaceDeclaration248=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, normalInterfaceDeclaration248.getTree());

                    }
                    break;
                case 5 :
                    // COMTOR.g:622:9: enumDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementDeclaration5393);
                    enumDeclaration249=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumDeclaration249.getTree());

                    }
                    break;
                case 6 :
                    // COMTOR.g:623:9: annotationTypeDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementDeclaration5403);
                    annotationTypeDeclaration250=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeDeclaration250.getTree());

                    }
                    break;
                case 7 :
                    // COMTOR.g:624:9: ';'
                    {
                    char_literal251=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationTypeElementDeclaration5413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal251);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 624:13: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationMethodDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodDeclaration"
    // COMTOR.g:627:1: annotationMethodDeclaration : ( modifiers )? type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' -> IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE type ) ( ^( 'default' elementValue ) )? ;
    public final COMTORParser.annotationMethodDeclaration_return annotationMethodDeclaration() throws RecognitionException {
        COMTORParser.annotationMethodDeclaration_return retval = new COMTORParser.annotationMethodDeclaration_return();
        retval.start = input.LT(1);
        int annotationMethodDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER254=null;
        Token char_literal255=null;
        Token char_literal256=null;
        Token string_literal257=null;
        Token char_literal259=null;
        COMTORParser.modifiers_return modifiers252 = null;

        COMTORParser.type_return type253 = null;

        COMTORParser.elementValue_return elementValue258 = null;


        CommonTree IDENTIFIER254_tree=null;
        CommonTree char_literal255_tree=null;
        CommonTree char_literal256_tree=null;
        CommonTree string_literal257_tree=null;
        CommonTree char_literal259_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        RewriteRuleSubtreeStream stream_modifiers=new RewriteRuleSubtreeStream(adaptor,"rule modifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // COMTOR.g:628:5: ( ( modifiers )? type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' -> IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE type ) ( ^( 'default' elementValue ) )? )
            // COMTOR.g:628:9: ( modifiers )? type IDENTIFIER '(' ')' ( 'default' elementValue )? ';'
            {
            // COMTOR.g:628:9: ( modifiers )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==ABSTRACT||LA104_0==FINAL||LA104_0==NATIVE||(LA104_0>=PRIVATE && LA104_0<=PUBLIC)||(LA104_0>=STATIC && LA104_0<=STRICTFP)||LA104_0==SYNCHRONIZED||LA104_0==TRANSIENT||LA104_0==VOLATILE||LA104_0==MONKEYS_AT) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // COMTOR.g:0:0: modifiers
                    {
                    pushFollow(FOLLOW_modifiers_in_annotationMethodDeclaration5435);
                    modifiers252=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifiers.add(modifiers252.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_in_annotationMethodDeclaration5438);
            type253=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type253.getTree());
            IDENTIFIER254=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_annotationMethodDeclaration5440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER254);

            char_literal255=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationMethodDeclaration5450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal255);

            char_literal256=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationMethodDeclaration5452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal256);

            // COMTOR.g:629:17: ( 'default' elementValue )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==DEFAULT) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // COMTOR.g:629:18: 'default' elementValue
                    {
                    string_literal257=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_annotationMethodDeclaration5455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(string_literal257);

                    pushFollow(FOLLOW_elementValue_in_annotationMethodDeclaration5457);
                    elementValue258=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(elementValue258.getTree());

                    }
                    break;

            }

            char_literal259=(Token)match(input,SEMI,FOLLOW_SEMI_in_annotationMethodDeclaration5486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal259);



            // AST REWRITE
            // elements: DEFAULT, elementValue, IDENTIFIER, type, modifiers
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 632:9: -> IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE type ) ( ^( 'default' elementValue ) )?
            {
                adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());
                // COMTOR.g:632:23: ( ^( ACCESS_MODIFIER modifiers ) )?
                if ( stream_modifiers.hasNext() ) {
                    // COMTOR.g:632:23: ^( ACCESS_MODIFIER modifiers )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_1);

                    adaptor.addChild(root_1, stream_modifiers.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_modifiers.reset();
                // COMTOR.g:632:53: ^( TYPE type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }
                // COMTOR.g:632:66: ( ^( 'default' elementValue ) )?
                if ( stream_DEFAULT.hasNext()||stream_elementValue.hasNext() ) {
                    // COMTOR.g:632:66: ^( 'default' elementValue )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot(stream_DEFAULT.nextNode(), root_1);

                    adaptor.addChild(root_1, stream_elementValue.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_DEFAULT.reset();
                stream_elementValue.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, annotationMethodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodDeclaration"

    public static class block_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // COMTOR.g:635:1: block : '{' ( blockStatement )* '}' -> ( blockStatement )* ;
    public final COMTORParser.block_return block() throws RecognitionException {
        COMTORParser.block_return retval = new COMTORParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal260=null;
        Token char_literal262=null;
        COMTORParser.blockStatement_return blockStatement261 = null;


        CommonTree char_literal260_tree=null;
        CommonTree char_literal262_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // COMTOR.g:636:5: ( '{' ( blockStatement )* '}' -> ( blockStatement )* )
            // COMTOR.g:636:9: '{' ( blockStatement )* '}'
            {
            char_literal260=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_block5542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal260);

            // COMTOR.g:637:9: ( blockStatement )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==EOF||(LA106_0>=IDENTIFIER && LA106_0<=NULL)||(LA106_0>=ABSTRACT && LA106_0<=BYTE)||(LA106_0>=CHAR && LA106_0<=CLASS)||LA106_0==CONTINUE||(LA106_0>=DO && LA106_0<=DOUBLE)||LA106_0==ENUM||LA106_0==FINAL||(LA106_0>=FLOAT && LA106_0<=FOR)||LA106_0==IF||(LA106_0>=INT && LA106_0<=THROW)||(LA106_0>=TRANSIENT && LA106_0<=LPAREN)||LA106_0==LBRACE||LA106_0==SEMI||(LA106_0>=BANG && LA106_0<=TILDE)||(LA106_0>=PLUSPLUS && LA106_0<=SUB)||LA106_0==MONKEYS_AT) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // COMTOR.g:637:10: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block5553);
            	    blockStatement261=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement261.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            char_literal262=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_block5574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal262);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 640:9: -> ( blockStatement )*
            {
                // COMTOR.g:640:12: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_0, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // COMTOR.g:668:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );
    public final COMTORParser.blockStatement_return blockStatement() throws RecognitionException {
        COMTORParser.blockStatement_return retval = new COMTORParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.localVariableDeclarationStatement_return localVariableDeclarationStatement263 = null;

        COMTORParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration264 = null;

        COMTORParser.statement_return statement265 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // COMTOR.g:669:5: ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement )
            int alt107=3;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // COMTOR.g:669:9: localVariableDeclarationStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclarationStatement_in_blockStatement5610);
                    localVariableDeclarationStatement263=localVariableDeclarationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclarationStatement263.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:670:9: classOrInterfaceDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement5620);
                    classOrInterfaceDeclaration264=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration264.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:671:9: statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement5630);
                    statement265=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement265.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclarationStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclarationStatement"
    // COMTOR.g:675:1: localVariableDeclarationStatement : localVariableDeclaration ';' -> localVariableDeclaration ;
    public final COMTORParser.localVariableDeclarationStatement_return localVariableDeclarationStatement() throws RecognitionException {
        COMTORParser.localVariableDeclarationStatement_return retval = new COMTORParser.localVariableDeclarationStatement_return();
        retval.start = input.LT(1);
        int localVariableDeclarationStatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal267=null;
        COMTORParser.localVariableDeclaration_return localVariableDeclaration266 = null;


        CommonTree char_literal267_tree=null;
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_localVariableDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // COMTOR.g:676:5: ( localVariableDeclaration ';' -> localVariableDeclaration )
            // COMTOR.g:676:9: localVariableDeclaration ';'
            {
            pushFollow(FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5651);
            localVariableDeclaration266=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_localVariableDeclaration.add(localVariableDeclaration266.getTree());
            char_literal267=(Token)match(input,SEMI,FOLLOW_SEMI_in_localVariableDeclarationStatement5661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMI.add(char_literal267);



            // AST REWRITE
            // elements: localVariableDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 678:9: -> localVariableDeclaration
            {
                adaptor.addChild(root_0, stream_localVariableDeclaration.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, localVariableDeclarationStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclarationStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // COMTOR.g:681:1: localVariableDeclaration : variableModifiers type variableDeclarator ( ',' variableDeclarator )* -> ( ^( VAR_DEF variableDeclarator ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) ) )+ ;
    public final COMTORParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        COMTORParser.localVariableDeclaration_return retval = new COMTORParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal271=null;
        COMTORParser.variableModifiers_return variableModifiers268 = null;

        COMTORParser.type_return type269 = null;

        COMTORParser.variableDeclarator_return variableDeclarator270 = null;

        COMTORParser.variableDeclarator_return variableDeclarator272 = null;


        CommonTree char_literal271_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // COMTOR.g:682:5: ( variableModifiers type variableDeclarator ( ',' variableDeclarator )* -> ( ^( VAR_DEF variableDeclarator ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) ) )+ )
            // COMTOR.g:682:9: variableModifiers type variableDeclarator ( ',' variableDeclarator )*
            {
            pushFollow(FOLLOW_variableModifiers_in_localVariableDeclaration5693);
            variableModifiers268=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers268.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration5695);
            type269=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type269.getTree());
            pushFollow(FOLLOW_variableDeclarator_in_localVariableDeclaration5705);
            variableDeclarator270=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator270.getTree());
            // COMTOR.g:684:9: ( ',' variableDeclarator )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==COMMA) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // COMTOR.g:684:10: ',' variableDeclarator
            	    {
            	    char_literal271=(Token)match(input,COMMA,FOLLOW_COMMA_in_localVariableDeclaration5716); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal271);

            	    pushFollow(FOLLOW_variableDeclarator_in_localVariableDeclaration5718);
            	    variableDeclarator272=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator272.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);



            // AST REWRITE
            // elements: variableDeclarator, variableModifiers, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 686:9: -> ( ^( VAR_DEF variableDeclarator ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) ) )+
            {
                if ( !(stream_variableDeclarator.hasNext()||stream_type.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variableDeclarator.hasNext()||stream_type.hasNext() ) {
                    // COMTOR.g:686:12: ^( VAR_DEF variableDeclarator ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DEF, "VAR_DEF"), root_1);

                    adaptor.addChild(root_1, stream_variableDeclarator.nextTree());
                    // COMTOR.g:686:41: ( ^( ACCESS_MODIFIER variableModifiers ) )?
                    if ( stream_variableModifiers.hasNext() ) {
                        // COMTOR.g:686:41: ^( ACCESS_MODIFIER variableModifiers )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                        adaptor.addChild(root_2, stream_variableModifiers.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                    }
                    stream_variableModifiers.reset();
                    // COMTOR.g:686:79: ^( TYPE type )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                    adaptor.addChild(root_2, stream_type.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_variableDeclarator.reset();
                stream_type.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // COMTOR.g:689:1: statement : ( block | 'assert' expression ( ':' expression )? ';' -> ^( ASSERT ( expression )+ ) | 'assert' expression ( ':' expression )? ';' -> ^( ASSERT ( expression )+ ) | 'if' parExpression ( statement )? ( 'else' el= statement )? -> ^( IF_STATEMENT ^( CONDITION parExpression ) ( ^( BODY statement ) )? ( ^( ELSE_STATEMENT ^( BODY $el) ) )? ) | forstatement | 'while' parExpression statement -> ^( WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? ) | 'do' statement 'while' parExpression ';' -> ^( DO_WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? ) | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH_STATEMENT ^( CONDITION parExpression ) ( ^( BODY switchBlockStatementGroups ) )? ) | 'synchronized' parExpression block -> ^( SYNCHRONIZED_BLOCK parExpression ( ^( BODY block ) )? ) | 'return' ( expression )? ';' -> ^( RETURN_STATEMENT ( expression )? ) | 'throw' expression ';' -> ^( THROWS expression ) | 'break' ( IDENTIFIER )? ';' -> ^( 'break' ( IDENTIFIER )? ) | 'continue' ( IDENTIFIER )? ';' -> ^( 'continue' ( IDENTIFIER )? ) | expression ';' -> expression | IDENTIFIER ':' statement -> ^( statement ^( LABEL IDENTIFIER ) ) | ';' ->);
    public final COMTORParser.statement_return statement() throws RecognitionException {
        COMTORParser.statement_return retval = new COMTORParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal274=null;
        Token char_literal276=null;
        Token char_literal278=null;
        Token string_literal279=null;
        Token char_literal281=null;
        Token char_literal283=null;
        Token string_literal284=null;
        Token string_literal287=null;
        Token string_literal289=null;
        Token string_literal292=null;
        Token string_literal294=null;
        Token char_literal296=null;
        Token string_literal298=null;
        Token char_literal300=null;
        Token char_literal302=null;
        Token string_literal303=null;
        Token string_literal306=null;
        Token char_literal308=null;
        Token string_literal309=null;
        Token char_literal311=null;
        Token string_literal312=null;
        Token IDENTIFIER313=null;
        Token char_literal314=null;
        Token string_literal315=null;
        Token IDENTIFIER316=null;
        Token char_literal317=null;
        Token char_literal319=null;
        Token IDENTIFIER320=null;
        Token char_literal321=null;
        Token char_literal323=null;
        COMTORParser.statement_return el = null;

        COMTORParser.block_return block273 = null;

        COMTORParser.expression_return expression275 = null;

        COMTORParser.expression_return expression277 = null;

        COMTORParser.expression_return expression280 = null;

        COMTORParser.expression_return expression282 = null;

        COMTORParser.parExpression_return parExpression285 = null;

        COMTORParser.statement_return statement286 = null;

        COMTORParser.forstatement_return forstatement288 = null;

        COMTORParser.parExpression_return parExpression290 = null;

        COMTORParser.statement_return statement291 = null;

        COMTORParser.statement_return statement293 = null;

        COMTORParser.parExpression_return parExpression295 = null;

        COMTORParser.trystatement_return trystatement297 = null;

        COMTORParser.parExpression_return parExpression299 = null;

        COMTORParser.switchBlockStatementGroups_return switchBlockStatementGroups301 = null;

        COMTORParser.parExpression_return parExpression304 = null;

        COMTORParser.block_return block305 = null;

        COMTORParser.expression_return expression307 = null;

        COMTORParser.expression_return expression310 = null;

        COMTORParser.expression_return expression318 = null;

        COMTORParser.statement_return statement322 = null;


        CommonTree string_literal274_tree=null;
        CommonTree char_literal276_tree=null;
        CommonTree char_literal278_tree=null;
        CommonTree string_literal279_tree=null;
        CommonTree char_literal281_tree=null;
        CommonTree char_literal283_tree=null;
        CommonTree string_literal284_tree=null;
        CommonTree string_literal287_tree=null;
        CommonTree string_literal289_tree=null;
        CommonTree string_literal292_tree=null;
        CommonTree string_literal294_tree=null;
        CommonTree char_literal296_tree=null;
        CommonTree string_literal298_tree=null;
        CommonTree char_literal300_tree=null;
        CommonTree char_literal302_tree=null;
        CommonTree string_literal303_tree=null;
        CommonTree string_literal306_tree=null;
        CommonTree char_literal308_tree=null;
        CommonTree string_literal309_tree=null;
        CommonTree char_literal311_tree=null;
        CommonTree string_literal312_tree=null;
        CommonTree IDENTIFIER313_tree=null;
        CommonTree char_literal314_tree=null;
        CommonTree string_literal315_tree=null;
        CommonTree IDENTIFIER316_tree=null;
        CommonTree char_literal317_tree=null;
        CommonTree char_literal319_tree=null;
        CommonTree IDENTIFIER320_tree=null;
        CommonTree char_literal321_tree=null;
        CommonTree char_literal323_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_SYNCHRONIZED=new RewriteRuleTokenStream(adaptor,"token SYNCHRONIZED");
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_CONTINUE=new RewriteRuleTokenStream(adaptor,"token CONTINUE");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_ASSERT=new RewriteRuleTokenStream(adaptor,"token ASSERT");
        RewriteRuleTokenStream stream_BREAK=new RewriteRuleTokenStream(adaptor,"token BREAK");
        RewriteRuleTokenStream stream_THROW=new RewriteRuleTokenStream(adaptor,"token THROW");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_parExpression=new RewriteRuleSubtreeStream(adaptor,"rule parExpression");
        RewriteRuleSubtreeStream stream_switchBlockStatementGroups=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroups");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // COMTOR.g:690:5: ( block | 'assert' expression ( ':' expression )? ';' -> ^( ASSERT ( expression )+ ) | 'assert' expression ( ':' expression )? ';' -> ^( ASSERT ( expression )+ ) | 'if' parExpression ( statement )? ( 'else' el= statement )? -> ^( IF_STATEMENT ^( CONDITION parExpression ) ( ^( BODY statement ) )? ( ^( ELSE_STATEMENT ^( BODY $el) ) )? ) | forstatement | 'while' parExpression statement -> ^( WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? ) | 'do' statement 'while' parExpression ';' -> ^( DO_WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? ) | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH_STATEMENT ^( CONDITION parExpression ) ( ^( BODY switchBlockStatementGroups ) )? ) | 'synchronized' parExpression block -> ^( SYNCHRONIZED_BLOCK parExpression ( ^( BODY block ) )? ) | 'return' ( expression )? ';' -> ^( RETURN_STATEMENT ( expression )? ) | 'throw' expression ';' -> ^( THROWS expression ) | 'break' ( IDENTIFIER )? ';' -> ^( 'break' ( IDENTIFIER )? ) | 'continue' ( IDENTIFIER )? ';' -> ^( 'continue' ( IDENTIFIER )? ) | expression ';' -> expression | IDENTIFIER ':' statement -> ^( statement ^( LABEL IDENTIFIER ) ) | ';' ->)
            int alt116=17;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // COMTOR.g:690:9: block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement5779);
                    block273=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block273.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:692:9: 'assert' expression ( ':' expression )? ';'
                    {
                    string_literal274=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement5802); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSERT.add(string_literal274);

                    pushFollow(FOLLOW_expression_in_statement5804);
                    expression275=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression275.getTree());
                    // COMTOR.g:692:29: ( ':' expression )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==COLON) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // COMTOR.g:692:30: ':' expression
                            {
                            char_literal276=(Token)match(input,COLON,FOLLOW_COLON_in_statement5807); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal276);

                            pushFollow(FOLLOW_expression_in_statement5809);
                            expression277=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression277.getTree());

                            }
                            break;

                    }

                    char_literal278=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement5813); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal278);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 693:9: -> ^( ASSERT ( expression )+ )
                    {
                        // COMTOR.g:693:12: ^( ASSERT ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSERT, "ASSERT"), root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // COMTOR.g:694:9: 'assert' expression ( ':' expression )? ';'
                    {
                    string_literal279=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement5840); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSERT.add(string_literal279);

                    pushFollow(FOLLOW_expression_in_statement5843);
                    expression280=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression280.getTree());
                    // COMTOR.g:694:30: ( ':' expression )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==COLON) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // COMTOR.g:694:31: ':' expression
                            {
                            char_literal281=(Token)match(input,COLON,FOLLOW_COLON_in_statement5846); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(char_literal281);

                            pushFollow(FOLLOW_expression_in_statement5848);
                            expression282=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression282.getTree());

                            }
                            break;

                    }

                    char_literal283=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement5852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal283);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 695:6: -> ^( ASSERT ( expression )+ )
                    {
                        // COMTOR.g:695:9: ^( ASSERT ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ASSERT, "ASSERT"), root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // COMTOR.g:696:9: 'if' parExpression ( statement )? ( 'else' el= statement )?
                    {
                    string_literal284=(Token)match(input,IF,FOLLOW_IF_in_statement5880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IF.add(string_literal284);

                    pushFollow(FOLLOW_parExpression_in_statement5882);
                    parExpression285=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression285.getTree());
                    // COMTOR.g:696:28: ( statement )?
                    int alt111=2;
                    alt111 = dfa111.predict(input);
                    switch (alt111) {
                        case 1 :
                            // COMTOR.g:0:0: statement
                            {
                            pushFollow(FOLLOW_statement_in_statement5884);
                            statement286=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement286.getTree());

                            }
                            break;

                    }

                    // COMTOR.g:696:39: ( 'else' el= statement )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==ELSE) ) {
                        int LA112_1 = input.LA(2);

                        if ( (synpred150_COMTOR()) ) {
                            alt112=1;
                        }
                    }
                    switch (alt112) {
                        case 1 :
                            // COMTOR.g:696:40: 'else' el= statement
                            {
                            string_literal287=(Token)match(input,ELSE,FOLLOW_ELSE_in_statement5888); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ELSE.add(string_literal287);

                            pushFollow(FOLLOW_statement_in_statement5892);
                            el=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(el.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: parExpression, statement, el
                    // token labels: 
                    // rule labels: retval, el
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_el=new RewriteRuleSubtreeStream(adaptor,"rule el",el!=null?el.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 697:6: -> ^( IF_STATEMENT ^( CONDITION parExpression ) ( ^( BODY statement ) )? ( ^( ELSE_STATEMENT ^( BODY $el) ) )? )
                    {
                        // COMTOR.g:697:9: ^( IF_STATEMENT ^( CONDITION parExpression ) ( ^( BODY statement ) )? ( ^( ELSE_STATEMENT ^( BODY $el) ) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_STATEMENT, "IF_STATEMENT"), root_1);

                        // COMTOR.g:697:24: ^( CONDITION parExpression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:697:51: ( ^( BODY statement ) )?
                        if ( stream_statement.hasNext() ) {
                            // COMTOR.g:697:51: ^( BODY statement )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                            adaptor.addChild(root_2, stream_statement.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_statement.reset();
                        // COMTOR.g:697:70: ( ^( ELSE_STATEMENT ^( BODY $el) ) )?
                        if ( stream_el.hasNext() ) {
                            // COMTOR.g:697:70: ^( ELSE_STATEMENT ^( BODY $el) )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ELSE_STATEMENT, "ELSE_STATEMENT"), root_2);

                            // COMTOR.g:697:87: ^( BODY $el)
                            {
                            CommonTree root_3 = (CommonTree)adaptor.nil();
                            root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_3);

                            adaptor.addChild(root_3, stream_el.nextTree());

                            adaptor.addChild(root_2, root_3);
                            }

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_el.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // COMTOR.g:698:9: forstatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_forstatement_in_statement5948);
                    forstatement288=forstatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forstatement288.getTree());

                    }
                    break;
                case 6 :
                    // COMTOR.g:699:9: 'while' parExpression statement
                    {
                    string_literal289=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement5958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(string_literal289);

                    pushFollow(FOLLOW_parExpression_in_statement5960);
                    parExpression290=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression290.getTree());
                    pushFollow(FOLLOW_statement_in_statement5962);
                    statement291=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement291.getTree());


                    // AST REWRITE
                    // elements: statement, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 700:6: -> ^( WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? )
                    {
                        // COMTOR.g:700:9: ^( WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHILE_BLOCK, "WHILE_BLOCK"), root_1);

                        // COMTOR.g:700:23: ^( CONDITION parExpression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:700:50: ( ^( BODY statement ) )?
                        if ( stream_statement.hasNext() ) {
                            // COMTOR.g:700:50: ^( BODY statement )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                            adaptor.addChild(root_2, stream_statement.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // COMTOR.g:701:9: 'do' statement 'while' parExpression ';'
                    {
                    string_literal292=(Token)match(input,DO,FOLLOW_DO_in_statement5996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(string_literal292);

                    pushFollow(FOLLOW_statement_in_statement5998);
                    statement293=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement293.getTree());
                    string_literal294=(Token)match(input,WHILE,FOLLOW_WHILE_in_statement6000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(string_literal294);

                    pushFollow(FOLLOW_parExpression_in_statement6002);
                    parExpression295=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression295.getTree());
                    char_literal296=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement6004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal296);



                    // AST REWRITE
                    // elements: statement, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 702:6: -> ^( DO_WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? )
                    {
                        // COMTOR.g:702:9: ^( DO_WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DO_WHILE_BLOCK, "DO_WHILE_BLOCK"), root_1);

                        // COMTOR.g:702:26: ^( CONDITION parExpression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:702:53: ( ^( BODY statement ) )?
                        if ( stream_statement.hasNext() ) {
                            // COMTOR.g:702:53: ^( BODY statement )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                            adaptor.addChild(root_2, stream_statement.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // COMTOR.g:703:9: trystatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_trystatement_in_statement6038);
                    trystatement297=trystatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trystatement297.getTree());

                    }
                    break;
                case 9 :
                    // COMTOR.g:704:9: 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                    string_literal298=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_statement6048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SWITCH.add(string_literal298);

                    pushFollow(FOLLOW_parExpression_in_statement6050);
                    parExpression299=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression299.getTree());
                    char_literal300=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_statement6052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACE.add(char_literal300);

                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement6054);
                    switchBlockStatementGroups301=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockStatementGroups.add(switchBlockStatementGroups301.getTree());
                    char_literal302=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_statement6056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACE.add(char_literal302);



                    // AST REWRITE
                    // elements: parExpression, switchBlockStatementGroups
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 705:6: -> ^( SWITCH_STATEMENT ^( CONDITION parExpression ) ( ^( BODY switchBlockStatementGroups ) )? )
                    {
                        // COMTOR.g:705:9: ^( SWITCH_STATEMENT ^( CONDITION parExpression ) ( ^( BODY switchBlockStatementGroups ) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SWITCH_STATEMENT, "SWITCH_STATEMENT"), root_1);

                        // COMTOR.g:705:28: ^( CONDITION parExpression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONDITION, "CONDITION"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:705:55: ( ^( BODY switchBlockStatementGroups ) )?
                        if ( stream_switchBlockStatementGroups.hasNext() ) {
                            // COMTOR.g:705:55: ^( BODY switchBlockStatementGroups )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                            adaptor.addChild(root_2, stream_switchBlockStatementGroups.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_switchBlockStatementGroups.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // COMTOR.g:706:9: 'synchronized' parExpression block
                    {
                    string_literal303=(Token)match(input,SYNCHRONIZED,FOLLOW_SYNCHRONIZED_in_statement6090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SYNCHRONIZED.add(string_literal303);

                    pushFollow(FOLLOW_parExpression_in_statement6092);
                    parExpression304=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression304.getTree());
                    pushFollow(FOLLOW_block_in_statement6094);
                    block305=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block305.getTree());


                    // AST REWRITE
                    // elements: block, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 707:6: -> ^( SYNCHRONIZED_BLOCK parExpression ( ^( BODY block ) )? )
                    {
                        // COMTOR.g:707:9: ^( SYNCHRONIZED_BLOCK parExpression ( ^( BODY block ) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SYNCHRONIZED_BLOCK, "SYNCHRONIZED_BLOCK"), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        // COMTOR.g:707:44: ( ^( BODY block ) )?
                        if ( stream_block.hasNext() ) {
                            // COMTOR.g:707:44: ^( BODY block )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                            adaptor.addChild(root_2, stream_block.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_block.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // COMTOR.g:708:9: 'return' ( expression )? ';'
                    {
                    string_literal306=(Token)match(input,RETURN,FOLLOW_RETURN_in_statement6125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETURN.add(string_literal306);

                    // COMTOR.g:708:18: ( expression )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( ((LA113_0>=IDENTIFIER && LA113_0<=NULL)||LA113_0==BOOLEAN||LA113_0==BYTE||LA113_0==CHAR||LA113_0==DOUBLE||LA113_0==FLOAT||LA113_0==INT||LA113_0==LONG||LA113_0==NEW||LA113_0==SHORT||LA113_0==SUPER||LA113_0==THIS||LA113_0==VOID||LA113_0==LPAREN||(LA113_0>=BANG && LA113_0<=TILDE)||(LA113_0>=PLUSPLUS && LA113_0<=SUB)) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // COMTOR.g:708:19: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement6128);
                            expression307=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression307.getTree());

                            }
                            break;

                    }

                    char_literal308=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement6133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal308);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 709:6: -> ^( RETURN_STATEMENT ( expression )? )
                    {
                        // COMTOR.g:709:9: ^( RETURN_STATEMENT ( expression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RETURN_STATEMENT, "RETURN_STATEMENT"), root_1);

                        // COMTOR.g:709:28: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // COMTOR.g:710:9: 'throw' expression ';'
                    {
                    string_literal309=(Token)match(input,THROW,FOLLOW_THROW_in_statement6157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_THROW.add(string_literal309);

                    pushFollow(FOLLOW_expression_in_statement6159);
                    expression310=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression310.getTree());
                    char_literal311=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement6161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal311);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 711:6: -> ^( THROWS expression )
                    {
                        // COMTOR.g:711:9: ^( THROWS expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(THROWS, "THROWS"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // COMTOR.g:712:9: 'break' ( IDENTIFIER )? ';'
                    {
                    string_literal312=(Token)match(input,BREAK,FOLLOW_BREAK_in_statement6184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BREAK.add(string_literal312);

                    // COMTOR.g:713:13: ( IDENTIFIER )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==IDENTIFIER) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // COMTOR.g:713:14: IDENTIFIER
                            {
                            IDENTIFIER313=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_statement6199); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER313);


                            }
                            break;

                    }

                    char_literal314=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement6216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal314);



                    // AST REWRITE
                    // elements: IDENTIFIER, BREAK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 715:9: -> ^( 'break' ( IDENTIFIER )? )
                    {
                        // COMTOR.g:715:12: ^( 'break' ( IDENTIFIER )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BREAK.nextNode(), root_1);

                        // COMTOR.g:715:22: ( IDENTIFIER )?
                        if ( stream_IDENTIFIER.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                        }
                        stream_IDENTIFIER.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // COMTOR.g:716:9: 'continue' ( IDENTIFIER )? ';'
                    {
                    string_literal315=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_statement6243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONTINUE.add(string_literal315);

                    // COMTOR.g:717:13: ( IDENTIFIER )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==IDENTIFIER) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // COMTOR.g:717:14: IDENTIFIER
                            {
                            IDENTIFIER316=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_statement6258); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER316);


                            }
                            break;

                    }

                    char_literal317=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement6275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal317);



                    // AST REWRITE
                    // elements: IDENTIFIER, CONTINUE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 719:9: -> ^( 'continue' ( IDENTIFIER )? )
                    {
                        // COMTOR.g:719:12: ^( 'continue' ( IDENTIFIER )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_CONTINUE.nextNode(), root_1);

                        // COMTOR.g:719:25: ( IDENTIFIER )?
                        if ( stream_IDENTIFIER.hasNext() ) {
                            adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                        }
                        stream_IDENTIFIER.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // COMTOR.g:720:9: expression ';'
                    {
                    pushFollow(FOLLOW_expression_in_statement6302);
                    expression318=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression318.getTree());
                    char_literal319=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement6305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal319);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 720:25: -> expression
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // COMTOR.g:721:9: IDENTIFIER ':' statement
                    {
                    IDENTIFIER320=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_statement6323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER320);

                    char_literal321=(Token)match(input,COLON,FOLLOW_COLON_in_statement6325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal321);

                    pushFollow(FOLLOW_statement_in_statement6327);
                    statement322=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement322.getTree());


                    // AST REWRITE
                    // elements: IDENTIFIER, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 722:6: -> ^( statement ^( LABEL IDENTIFIER ) )
                    {
                        // COMTOR.g:722:9: ^( statement ^( LABEL IDENTIFIER ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_statement.nextNode(), root_1);

                        // COMTOR.g:722:21: ^( LABEL IDENTIFIER )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LABEL, "LABEL"), root_2);

                        adaptor.addChild(root_2, stream_IDENTIFIER.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 17 :
                    // COMTOR.g:723:9: ';'
                    {
                    char_literal323=(Token)match(input,SEMI,FOLLOW_SEMI_in_statement6354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal323);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 723:13: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // COMTOR.g:727:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final COMTORParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        COMTORParser.switchBlockStatementGroups_return retval = new COMTORParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.switchBlockStatementGroup_return switchBlockStatementGroup324 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // COMTOR.g:728:5: ( ( switchBlockStatementGroup )* )
            // COMTOR.g:728:9: ( switchBlockStatementGroup )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // COMTOR.g:728:9: ( switchBlockStatementGroup )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==CASE||LA117_0==DEFAULT) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // COMTOR.g:728:10: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups6378);
            	    switchBlockStatementGroup324=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup324.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // COMTOR.g:731:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
    public final COMTORParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        COMTORParser.switchBlockStatementGroup_return retval = new COMTORParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.switchLabel_return switchLabel325 = null;

        COMTORParser.blockStatement_return blockStatement326 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // COMTOR.g:732:5: ( switchLabel ( blockStatement )* )
            // COMTOR.g:733:9: switchLabel ( blockStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup6407);
            switchLabel325=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, switchLabel325.getTree());
            // COMTOR.g:734:9: ( blockStatement )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( ((LA118_0>=IDENTIFIER && LA118_0<=NULL)||(LA118_0>=ABSTRACT && LA118_0<=BYTE)||(LA118_0>=CHAR && LA118_0<=CLASS)||LA118_0==CONTINUE||(LA118_0>=DO && LA118_0<=DOUBLE)||LA118_0==ENUM||LA118_0==FINAL||(LA118_0>=FLOAT && LA118_0<=FOR)||LA118_0==IF||(LA118_0>=INT && LA118_0<=THROW)||(LA118_0>=TRANSIENT && LA118_0<=LPAREN)||LA118_0==LBRACE||LA118_0==SEMI||(LA118_0>=BANG && LA118_0<=TILDE)||(LA118_0>=PLUSPLUS && LA118_0<=SUB)||LA118_0==MONKEYS_AT) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // COMTOR.g:734:10: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup6418);
            	    blockStatement326=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement326.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // COMTOR.g:738:1: switchLabel : ( 'case' expression ':' -> ^( CASE expression ) | 'default' ':' -> ^( CASE 'default' ) );
    public final COMTORParser.switchLabel_return switchLabel() throws RecognitionException {
        COMTORParser.switchLabel_return retval = new COMTORParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal327=null;
        Token char_literal329=null;
        Token string_literal330=null;
        Token char_literal331=null;
        COMTORParser.expression_return expression328 = null;


        CommonTree string_literal327_tree=null;
        CommonTree char_literal329_tree=null;
        CommonTree string_literal330_tree=null;
        CommonTree char_literal331_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // COMTOR.g:739:5: ( 'case' expression ':' -> ^( CASE expression ) | 'default' ':' -> ^( CASE 'default' ) )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==CASE) ) {
                alt119=1;
            }
            else if ( (LA119_0==DEFAULT) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    // COMTOR.g:739:9: 'case' expression ':'
                    {
                    string_literal327=(Token)match(input,CASE,FOLLOW_CASE_in_switchLabel6449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(string_literal327);

                    pushFollow(FOLLOW_expression_in_switchLabel6451);
                    expression328=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression328.getTree());
                    char_literal329=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal329);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 739:31: -> ^( CASE expression )
                    {
                        // COMTOR.g:739:34: ^( CASE expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE, "CASE"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:740:9: 'default' ':'
                    {
                    string_literal330=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_switchLabel6471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(string_literal330);

                    char_literal331=(Token)match(input,COLON,FOLLOW_COLON_in_switchLabel6473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal331);



                    // AST REWRITE
                    // elements: DEFAULT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 740:23: -> ^( CASE 'default' )
                    {
                        // COMTOR.g:740:26: ^( CASE 'default' )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE, "CASE"), root_1);

                        adaptor.addChild(root_1, stream_DEFAULT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class trystatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trystatement"
    // COMTOR.g:744:1: trystatement : 'try' block (c= catches f= 'finally' b= block | c= catches | f= 'finally' b= block ) -> ^( TRY_STATEMENT ( ^( BODY block ) )? ^( CATCH ( $c)? ( $f)? ( ^( BODY $b) )? ) ) ;
    public final COMTORParser.trystatement_return trystatement() throws RecognitionException {
        COMTORParser.trystatement_return retval = new COMTORParser.trystatement_return();
        retval.start = input.LT(1);
        int trystatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token f=null;
        Token string_literal332=null;
        COMTORParser.catches_return c = null;

        COMTORParser.block_return b = null;

        COMTORParser.block_return block333 = null;


        CommonTree f_tree=null;
        CommonTree string_literal332_tree=null;
        RewriteRuleTokenStream stream_FINALLY=new RewriteRuleTokenStream(adaptor,"token FINALLY");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // COMTOR.g:745:5: ( 'try' block (c= catches f= 'finally' b= block | c= catches | f= 'finally' b= block ) -> ^( TRY_STATEMENT ( ^( BODY block ) )? ^( CATCH ( $c)? ( $f)? ( ^( BODY $b) )? ) ) )
            // COMTOR.g:745:9: 'try' block (c= catches f= 'finally' b= block | c= catches | f= 'finally' b= block )
            {
            string_literal332=(Token)match(input,TRY,FOLLOW_TRY_in_trystatement6502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TRY.add(string_literal332);

            pushFollow(FOLLOW_block_in_trystatement6504);
            block333=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block333.getTree());
            // COMTOR.g:746:9: (c= catches f= 'finally' b= block | c= catches | f= 'finally' b= block )
            int alt120=3;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==CATCH) ) {
                int LA120_1 = input.LA(2);

                if ( (synpred170_COMTOR()) ) {
                    alt120=1;
                }
                else if ( (synpred171_COMTOR()) ) {
                    alt120=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA120_0==FINALLY) ) {
                alt120=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // COMTOR.g:746:13: c= catches f= 'finally' b= block
                    {
                    pushFollow(FOLLOW_catches_in_trystatement6520);
                    c=catches();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_catches.add(c.getTree());
                    f=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_trystatement6524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FINALLY.add(f);

                    pushFollow(FOLLOW_block_in_trystatement6528);
                    b=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(b.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:747:13: c= catches
                    {
                    pushFollow(FOLLOW_catches_in_trystatement6544);
                    c=catches();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_catches.add(c.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:748:13: f= 'finally' b= block
                    {
                    f=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_trystatement6560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FINALLY.add(f);

                    pushFollow(FOLLOW_block_in_trystatement6564);
                    b=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(b.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: c, b, block, f
            // token labels: f
            // rule labels: retval, b, c
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);
            RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 750:9: -> ^( TRY_STATEMENT ( ^( BODY block ) )? ^( CATCH ( $c)? ( $f)? ( ^( BODY $b) )? ) )
            {
                // COMTOR.g:750:12: ^( TRY_STATEMENT ( ^( BODY block ) )? ^( CATCH ( $c)? ( $f)? ( ^( BODY $b) )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TRY_STATEMENT, "TRY_STATEMENT"), root_1);

                // COMTOR.g:750:28: ( ^( BODY block ) )?
                if ( stream_block.hasNext() ) {
                    // COMTOR.g:750:28: ^( BODY block )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                    adaptor.addChild(root_2, stream_block.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_block.reset();
                // COMTOR.g:750:43: ^( CATCH ( $c)? ( $f)? ( ^( BODY $b) )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CATCH, "CATCH"), root_2);

                // COMTOR.g:750:51: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_2, stream_c.nextTree());

                }
                stream_c.reset();
                // COMTOR.g:750:55: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_2, stream_f.nextNode());

                }
                stream_f.reset();
                // COMTOR.g:750:59: ( ^( BODY $b) )?
                if ( stream_b.hasNext() ) {
                    // COMTOR.g:750:59: ^( BODY $b)
                    {
                    CommonTree root_3 = (CommonTree)adaptor.nil();
                    root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_3);

                    adaptor.addChild(root_3, stream_b.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                }
                stream_b.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, trystatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "trystatement"

    public static class catches_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // COMTOR.g:753:1: catches : catchClause ( catchClause )* ;
    public final COMTORParser.catches_return catches() throws RecognitionException {
        COMTORParser.catches_return retval = new COMTORParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.catchClause_return catchClause334 = null;

        COMTORParser.catchClause_return catchClause335 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // COMTOR.g:754:5: ( catchClause ( catchClause )* )
            // COMTOR.g:754:9: catchClause ( catchClause )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches6636);
            catchClause334=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause334.getTree());
            // COMTOR.g:755:9: ( catchClause )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==CATCH) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // COMTOR.g:755:10: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches6647);
            	    catchClause335=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause335.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // COMTOR.g:759:1: catchClause : 'catch' '(' formalParameter ')' ( block )? -> 'catch' ^( PARAMS formalParameter ) ( ^( BODY block ) )? ;
    public final COMTORParser.catchClause_return catchClause() throws RecognitionException {
        COMTORParser.catchClause_return retval = new COMTORParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal336=null;
        Token char_literal337=null;
        Token char_literal339=null;
        COMTORParser.formalParameter_return formalParameter338 = null;

        COMTORParser.block_return block340 = null;


        CommonTree string_literal336_tree=null;
        CommonTree char_literal337_tree=null;
        CommonTree char_literal339_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CATCH=new RewriteRuleTokenStream(adaptor,"token CATCH");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // COMTOR.g:760:5: ( 'catch' '(' formalParameter ')' ( block )? -> 'catch' ^( PARAMS formalParameter ) ( ^( BODY block ) )? )
            // COMTOR.g:760:9: 'catch' '(' formalParameter ')' ( block )?
            {
            string_literal336=(Token)match(input,CATCH,FOLLOW_CATCH_in_catchClause6678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CATCH.add(string_literal336);

            char_literal337=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_catchClause6680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal337);

            pushFollow(FOLLOW_formalParameter_in_catchClause6682);
            formalParameter338=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter338.getTree());
            char_literal339=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_catchClause6692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal339);

            // COMTOR.g:761:13: ( block )?
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // COMTOR.g:0:0: block
                    {
                    pushFollow(FOLLOW_block_in_catchClause6694);
                    block340=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block340.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: CATCH, block, formalParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 762:9: -> 'catch' ^( PARAMS formalParameter ) ( ^( BODY block ) )?
            {
                adaptor.addChild(root_0, stream_CATCH.nextNode());
                // COMTOR.g:762:20: ^( PARAMS formalParameter )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PARAMS, "PARAMS"), root_1);

                adaptor.addChild(root_1, stream_formalParameter.nextTree());

                adaptor.addChild(root_0, root_1);
                }
                // COMTOR.g:762:46: ( ^( BODY block ) )?
                if ( stream_block.hasNext() ) {
                    // COMTOR.g:762:46: ^( BODY block )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_1);

                    adaptor.addChild(root_1, stream_block.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_block.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // COMTOR.g:765:1: formalParameter : variableModifiers type ( '|' type )* IDENTIFIER ( '[' ']' )* -> ^( VAR_DEF IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ( ^( TYPE type ) )* ) ;
    public final COMTORParser.formalParameter_return formalParameter() throws RecognitionException {
        COMTORParser.formalParameter_return retval = new COMTORParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal343=null;
        Token IDENTIFIER345=null;
        Token char_literal346=null;
        Token char_literal347=null;
        COMTORParser.variableModifiers_return variableModifiers341 = null;

        COMTORParser.type_return type342 = null;

        COMTORParser.type_return type344 = null;


        CommonTree char_literal343_tree=null;
        CommonTree IDENTIFIER345_tree=null;
        CommonTree char_literal346_tree=null;
        CommonTree char_literal347_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleTokenStream stream_BAR=new RewriteRuleTokenStream(adaptor,"token BAR");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // COMTOR.g:766:5: ( variableModifiers type ( '|' type )* IDENTIFIER ( '[' ']' )* -> ^( VAR_DEF IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ( ^( TYPE type ) )* ) )
            // COMTOR.g:766:9: variableModifiers type ( '|' type )* IDENTIFIER ( '[' ']' )*
            {
            pushFollow(FOLLOW_variableModifiers_in_formalParameter6740);
            variableModifiers341=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers341.getTree());
            pushFollow(FOLLOW_type_in_formalParameter6742);
            type342=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type342.getTree());
            // COMTOR.g:766:32: ( '|' type )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==BAR) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // COMTOR.g:766:33: '|' type
            	    {
            	    char_literal343=(Token)match(input,BAR,FOLLOW_BAR_in_formalParameter6745); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BAR.add(char_literal343);

            	    pushFollow(FOLLOW_type_in_formalParameter6747);
            	    type344=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(type344.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            IDENTIFIER345=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_formalParameter6751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER345);

            // COMTOR.g:767:9: ( '[' ']' )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==LBRACKET) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // COMTOR.g:767:10: '[' ']'
            	    {
            	    char_literal346=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_formalParameter6762); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_LBRACKET.add(char_literal346);

            	    char_literal347=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_formalParameter6764); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_RBRACKET.add(char_literal347);


            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);



            // AST REWRITE
            // elements: variableModifiers, IDENTIFIER, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 768:9: -> ^( VAR_DEF IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ( ^( TYPE type ) )* )
            {
                // COMTOR.g:768:12: ^( VAR_DEF IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ( ^( TYPE type ) )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DEF, "VAR_DEF"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());
                // COMTOR.g:768:33: ( ^( ACCESS_MODIFIER variableModifiers ) )?
                if ( stream_variableModifiers.hasNext() ) {
                    // COMTOR.g:768:33: ^( ACCESS_MODIFIER variableModifiers )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_2);

                    adaptor.addChild(root_2, stream_variableModifiers.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_variableModifiers.reset();
                // COMTOR.g:768:71: ( ^( TYPE type ) )*
                while ( stream_type.hasNext() ) {
                    // COMTOR.g:768:71: ^( TYPE type )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_2);

                    adaptor.addChild(root_2, stream_type.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class forstatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forstatement"
    // COMTOR.g:771:1: forstatement : ( 'for' '(' ( variableModifiers )? type variableDeclarator ':' expression ')' statement -> ^( FOR_BLOCK ^( INIT IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) expression ) ^( BODY statement ) ) | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' ( statement )? -> ^( FOR_BLOCK ( forInit )? ( expression )? ( expressionList )? ( ^( BODY statement ) )? ) );
    public final COMTORParser.forstatement_return forstatement() throws RecognitionException {
        COMTORParser.forstatement_return retval = new COMTORParser.forstatement_return();
        retval.start = input.LT(1);
        int forstatement_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal348=null;
        Token char_literal349=null;
        Token char_literal353=null;
        Token char_literal355=null;
        Token string_literal357=null;
        Token char_literal358=null;
        Token char_literal360=null;
        Token char_literal362=null;
        Token char_literal364=null;
        COMTORParser.variableModifiers_return variableModifiers350 = null;

        COMTORParser.type_return type351 = null;

        COMTORParser.variableDeclarator_return variableDeclarator352 = null;

        COMTORParser.expression_return expression354 = null;

        COMTORParser.statement_return statement356 = null;

        COMTORParser.forInit_return forInit359 = null;

        COMTORParser.expression_return expression361 = null;

        COMTORParser.expressionList_return expressionList363 = null;

        COMTORParser.statement_return statement365 = null;


        CommonTree string_literal348_tree=null;
        CommonTree char_literal349_tree=null;
        CommonTree char_literal353_tree=null;
        CommonTree char_literal355_tree=null;
        CommonTree string_literal357_tree=null;
        CommonTree char_literal358_tree=null;
        CommonTree char_literal360_tree=null;
        CommonTree char_literal362_tree=null;
        CommonTree char_literal364_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_variableModifiers=new RewriteRuleSubtreeStream(adaptor,"rule variableModifiers");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // COMTOR.g:772:5: ( 'for' '(' ( variableModifiers )? type variableDeclarator ':' expression ')' statement -> ^( FOR_BLOCK ^( INIT IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) expression ) ^( BODY statement ) ) | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' ( statement )? -> ^( FOR_BLOCK ( forInit )? ( expression )? ( expressionList )? ( ^( BODY statement ) )? ) )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==FOR) ) {
                int LA130_1 = input.LA(2);

                if ( (synpred177_COMTOR()) ) {
                    alt130=1;
                }
                else if ( (true) ) {
                    alt130=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    // COMTOR.g:774:9: 'for' '(' ( variableModifiers )? type variableDeclarator ':' expression ')' statement
                    {
                    string_literal348=(Token)match(input,FOR,FOLLOW_FOR_in_forstatement6835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(string_literal348);

                    char_literal349=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forstatement6837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal349);

                    // COMTOR.g:774:19: ( variableModifiers )?
                    int alt125=2;
                    switch ( input.LA(1) ) {
                        case FINAL:
                        case MONKEYS_AT:
                            {
                            alt125=1;
                            }
                            break;
                        case IDENTIFIER:
                            {
                            int LA125_2 = input.LA(2);

                            if ( (synpred176_COMTOR()) ) {
                                alt125=1;
                            }
                            }
                            break;
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case SHORT:
                            {
                            int LA125_3 = input.LA(2);

                            if ( (synpred176_COMTOR()) ) {
                                alt125=1;
                            }
                            }
                            break;
                    }

                    switch (alt125) {
                        case 1 :
                            // COMTOR.g:0:0: variableModifiers
                            {
                            pushFollow(FOLLOW_variableModifiers_in_forstatement6839);
                            variableModifiers350=variableModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variableModifiers.add(variableModifiers350.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_type_in_forstatement6842);
                    type351=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type351.getTree());
                    pushFollow(FOLLOW_variableDeclarator_in_forstatement6844);
                    variableDeclarator352=variableDeclarator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclarator.add(variableDeclarator352.getTree());
                    char_literal353=(Token)match(input,COLON,FOLLOW_COLON_in_forstatement6846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(char_literal353);

                    pushFollow(FOLLOW_expression_in_forstatement6857);
                    expression354=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression354.getTree());
                    char_literal355=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forstatement6859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal355);

                    pushFollow(FOLLOW_statement_in_forstatement6861);
                    statement356=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement356.getTree());


                    // AST REWRITE
                    // elements: statement, expression, variableModifiers, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 776:9: -> ^( FOR_BLOCK ^( INIT IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) expression ) ^( BODY statement ) )
                    {
                        // COMTOR.g:776:12: ^( FOR_BLOCK ^( INIT IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) expression ) ^( BODY statement ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_BLOCK, "FOR_BLOCK"), root_1);

                        // COMTOR.g:776:24: ^( INIT IDENTIFIER ( ^( ACCESS_MODIFIER variableModifiers ) )? ^( TYPE type ) expression )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INIT, "INIT"), root_2);

                        adaptor.addChild(root_2, (CommonTree)adaptor.create(IDENTIFIER, "IDENTIFIER"));
                        // COMTOR.g:776:42: ( ^( ACCESS_MODIFIER variableModifiers ) )?
                        if ( stream_variableModifiers.hasNext() ) {
                            // COMTOR.g:776:42: ^( ACCESS_MODIFIER variableModifiers )
                            {
                            CommonTree root_3 = (CommonTree)adaptor.nil();
                            root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ACCESS_MODIFIER, "ACCESS_MODIFIER"), root_3);

                            adaptor.addChild(root_3, stream_variableModifiers.nextTree());

                            adaptor.addChild(root_2, root_3);
                            }

                        }
                        stream_variableModifiers.reset();
                        // COMTOR.g:776:80: ^( TYPE type )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_3);

                        adaptor.addChild(root_3, stream_type.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }
                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // COMTOR.g:776:105: ^( BODY statement )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                        adaptor.addChild(root_2, stream_statement.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:778:9: 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' ( statement )?
                    {
                    string_literal357=(Token)match(input,FOR,FOLLOW_FOR_in_forstatement6921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOR.add(string_literal357);

                    char_literal358=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forstatement6923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal358);

                    // COMTOR.g:779:17: ( forInit )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==EOF||(LA126_0>=IDENTIFIER && LA126_0<=NULL)||LA126_0==BOOLEAN||LA126_0==BYTE||LA126_0==CHAR||LA126_0==DOUBLE||LA126_0==FINAL||LA126_0==FLOAT||LA126_0==INT||LA126_0==LONG||LA126_0==NEW||LA126_0==SHORT||LA126_0==SUPER||LA126_0==THIS||LA126_0==VOID||LA126_0==LPAREN||(LA126_0>=BANG && LA126_0<=TILDE)||(LA126_0>=PLUSPLUS && LA126_0<=SUB)||LA126_0==MONKEYS_AT) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // COMTOR.g:779:18: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forstatement6943);
                            forInit359=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit359.getTree());

                            }
                            break;

                    }

                    char_literal360=(Token)match(input,SEMI,FOLLOW_SEMI_in_forstatement6964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal360);

                    // COMTOR.g:781:17: ( expression )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( ((LA127_0>=IDENTIFIER && LA127_0<=NULL)||LA127_0==BOOLEAN||LA127_0==BYTE||LA127_0==CHAR||LA127_0==DOUBLE||LA127_0==FLOAT||LA127_0==INT||LA127_0==LONG||LA127_0==NEW||LA127_0==SHORT||LA127_0==SUPER||LA127_0==THIS||LA127_0==VOID||LA127_0==LPAREN||(LA127_0>=BANG && LA127_0<=TILDE)||(LA127_0>=PLUSPLUS && LA127_0<=SUB)) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // COMTOR.g:781:18: expression
                            {
                            pushFollow(FOLLOW_expression_in_forstatement6984);
                            expression361=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression361.getTree());

                            }
                            break;

                    }

                    char_literal362=(Token)match(input,SEMI,FOLLOW_SEMI_in_forstatement7005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(char_literal362);

                    // COMTOR.g:783:17: ( expressionList )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( ((LA128_0>=IDENTIFIER && LA128_0<=NULL)||LA128_0==BOOLEAN||LA128_0==BYTE||LA128_0==CHAR||LA128_0==DOUBLE||LA128_0==FLOAT||LA128_0==INT||LA128_0==LONG||LA128_0==NEW||LA128_0==SHORT||LA128_0==SUPER||LA128_0==THIS||LA128_0==VOID||LA128_0==LPAREN||(LA128_0>=BANG && LA128_0<=TILDE)||(LA128_0>=PLUSPLUS && LA128_0<=SUB)) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // COMTOR.g:783:18: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_forstatement7025);
                            expressionList363=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList363.getTree());

                            }
                            break;

                    }

                    char_literal364=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forstatement7046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal364);

                    // COMTOR.g:784:24: ( statement )?
                    int alt129=2;
                    alt129 = dfa129.predict(input);
                    switch (alt129) {
                        case 1 :
                            // COMTOR.g:0:0: statement
                            {
                            pushFollow(FOLLOW_statement_in_forstatement7048);
                            statement365=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement365.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, forInit, statement, expressionList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 785:9: -> ^( FOR_BLOCK ( forInit )? ( expression )? ( expressionList )? ( ^( BODY statement ) )? )
                    {
                        // COMTOR.g:785:12: ^( FOR_BLOCK ( forInit )? ( expression )? ( expressionList )? ( ^( BODY statement ) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_BLOCK, "FOR_BLOCK"), root_1);

                        // COMTOR.g:785:24: ( forInit )?
                        if ( stream_forInit.hasNext() ) {
                            adaptor.addChild(root_1, stream_forInit.nextTree());

                        }
                        stream_forInit.reset();
                        // COMTOR.g:785:33: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();
                        // COMTOR.g:785:45: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // COMTOR.g:785:61: ( ^( BODY statement ) )?
                        if ( stream_statement.hasNext() ) {
                            // COMTOR.g:785:61: ^( BODY statement )
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BODY, "BODY"), root_2);

                            adaptor.addChild(root_2, stream_statement.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, forstatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forstatement"

    public static class forInit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // COMTOR.g:788:1: forInit : ( localVariableDeclaration | expressionList );
    public final COMTORParser.forInit_return forInit() throws RecognitionException {
        COMTORParser.forInit_return retval = new COMTORParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.localVariableDeclaration_return localVariableDeclaration366 = null;

        COMTORParser.expressionList_return expressionList367 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // COMTOR.g:789:5: ( localVariableDeclaration | expressionList )
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // COMTOR.g:789:9: localVariableDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit7099);
                    localVariableDeclaration366=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration366.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:790:9: expressionList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit7109);
                    expressionList367=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList367.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class parExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // COMTOR.g:793:1: parExpression : '(' expression ')' -> expression ;
    public final COMTORParser.parExpression_return parExpression() throws RecognitionException {
        COMTORParser.parExpression_return retval = new COMTORParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal368=null;
        Token char_literal370=null;
        COMTORParser.expression_return expression369 = null;


        CommonTree char_literal368_tree=null;
        CommonTree char_literal370_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // COMTOR.g:794:5: ( '(' expression ')' -> expression )
            // COMTOR.g:794:9: '(' expression ')'
            {
            char_literal368=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parExpression7129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(char_literal368);

            pushFollow(FOLLOW_expression_in_parExpression7131);
            expression369=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression369.getTree());
            char_literal370=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parExpression7133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(char_literal370);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 795:6: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // COMTOR.g:798:1: expressionList : expression ( ',' expression )* -> ( expression )+ ;
    public final COMTORParser.expressionList_return expressionList() throws RecognitionException {
        COMTORParser.expressionList_return retval = new COMTORParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal372=null;
        COMTORParser.expression_return expression371 = null;

        COMTORParser.expression_return expression373 = null;


        CommonTree char_literal372_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // COMTOR.g:799:5: ( expression ( ',' expression )* -> ( expression )+ )
            // COMTOR.g:799:9: expression ( ',' expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList7162);
            expression371=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression371.getTree());
            // COMTOR.g:800:9: ( ',' expression )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==COMMA) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // COMTOR.g:800:10: ',' expression
            	    {
            	    char_literal372=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList7173); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal372);

            	    pushFollow(FOLLOW_expression_in_expressionList7175);
            	    expression373=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression373.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 802:9: -> ( expression )+
            {
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_0, stream_expression.nextTree());

                }
                stream_expression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // COMTOR.g:806:1: expression : conditionalExpression ( assignmentOperator expression )? ;
    public final COMTORParser.expression_return expression() throws RecognitionException {
        COMTORParser.expression_return retval = new COMTORParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.conditionalExpression_return conditionalExpression374 = null;

        COMTORParser.assignmentOperator_return assignmentOperator375 = null;

        COMTORParser.expression_return expression376 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // COMTOR.g:807:5: ( conditionalExpression ( assignmentOperator expression )? )
            // COMTOR.g:807:9: conditionalExpression ( assignmentOperator expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression7220);
            conditionalExpression374=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression374.getTree());
            // COMTOR.g:808:9: ( assignmentOperator expression )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==EQ||(LA133_0>=PLUSEQ && LA133_0<=PERCENTEQ)||(LA133_0>=GT && LA133_0<=LT)) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // COMTOR.g:808:10: assignmentOperator expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression7231);
                    assignmentOperator375=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignmentOperator375.getTree());
                    pushFollow(FOLLOW_expression_in_expression7233);
                    expression376=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression376.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // COMTOR.g:813:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );
    public final COMTORParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        COMTORParser.assignmentOperator_return retval = new COMTORParser.assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal377=null;
        Token string_literal378=null;
        Token string_literal379=null;
        Token string_literal380=null;
        Token string_literal381=null;
        Token string_literal382=null;
        Token string_literal383=null;
        Token string_literal384=null;
        Token string_literal385=null;
        Token char_literal386=null;
        Token char_literal387=null;
        Token char_literal388=null;
        Token char_literal389=null;
        Token char_literal390=null;
        Token char_literal391=null;
        Token char_literal392=null;
        Token char_literal393=null;
        Token char_literal394=null;
        Token char_literal395=null;

        CommonTree char_literal377_tree=null;
        CommonTree string_literal378_tree=null;
        CommonTree string_literal379_tree=null;
        CommonTree string_literal380_tree=null;
        CommonTree string_literal381_tree=null;
        CommonTree string_literal382_tree=null;
        CommonTree string_literal383_tree=null;
        CommonTree string_literal384_tree=null;
        CommonTree string_literal385_tree=null;
        CommonTree char_literal386_tree=null;
        CommonTree char_literal387_tree=null;
        CommonTree char_literal388_tree=null;
        CommonTree char_literal389_tree=null;
        CommonTree char_literal390_tree=null;
        CommonTree char_literal391_tree=null;
        CommonTree char_literal392_tree=null;
        CommonTree char_literal393_tree=null;
        CommonTree char_literal394_tree=null;
        CommonTree char_literal395_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // COMTOR.g:814:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' )
            int alt134=12;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // COMTOR.g:814:9: '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal377=(Token)match(input,EQ,FOLLOW_EQ_in_assignmentOperator7265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal377_tree = (CommonTree)adaptor.create(char_literal377);
                    adaptor.addChild(root_0, char_literal377_tree);
                    }

                    }
                    break;
                case 2 :
                    // COMTOR.g:815:9: '+='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal378=(Token)match(input,PLUSEQ,FOLLOW_PLUSEQ_in_assignmentOperator7275); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal378_tree = (CommonTree)adaptor.create(string_literal378);
                    adaptor.addChild(root_0, string_literal378_tree);
                    }

                    }
                    break;
                case 3 :
                    // COMTOR.g:816:9: '-='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal379=(Token)match(input,SUBEQ,FOLLOW_SUBEQ_in_assignmentOperator7285); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal379_tree = (CommonTree)adaptor.create(string_literal379);
                    adaptor.addChild(root_0, string_literal379_tree);
                    }

                    }
                    break;
                case 4 :
                    // COMTOR.g:817:9: '*='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal380=(Token)match(input,STAREQ,FOLLOW_STAREQ_in_assignmentOperator7295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal380_tree = (CommonTree)adaptor.create(string_literal380);
                    adaptor.addChild(root_0, string_literal380_tree);
                    }

                    }
                    break;
                case 5 :
                    // COMTOR.g:818:9: '/='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal381=(Token)match(input,SLASHEQ,FOLLOW_SLASHEQ_in_assignmentOperator7305); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal381_tree = (CommonTree)adaptor.create(string_literal381);
                    adaptor.addChild(root_0, string_literal381_tree);
                    }

                    }
                    break;
                case 6 :
                    // COMTOR.g:819:9: '&='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal382=(Token)match(input,AMPEQ,FOLLOW_AMPEQ_in_assignmentOperator7315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal382_tree = (CommonTree)adaptor.create(string_literal382);
                    adaptor.addChild(root_0, string_literal382_tree);
                    }

                    }
                    break;
                case 7 :
                    // COMTOR.g:820:9: '|='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal383=(Token)match(input,BAREQ,FOLLOW_BAREQ_in_assignmentOperator7325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal383_tree = (CommonTree)adaptor.create(string_literal383);
                    adaptor.addChild(root_0, string_literal383_tree);
                    }

                    }
                    break;
                case 8 :
                    // COMTOR.g:821:9: '^='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal384=(Token)match(input,CARETEQ,FOLLOW_CARETEQ_in_assignmentOperator7335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal384_tree = (CommonTree)adaptor.create(string_literal384);
                    adaptor.addChild(root_0, string_literal384_tree);
                    }

                    }
                    break;
                case 9 :
                    // COMTOR.g:822:9: '%='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal385=(Token)match(input,PERCENTEQ,FOLLOW_PERCENTEQ_in_assignmentOperator7345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal385_tree = (CommonTree)adaptor.create(string_literal385);
                    adaptor.addChild(root_0, string_literal385_tree);
                    }

                    }
                    break;
                case 10 :
                    // COMTOR.g:823:10: '<' '<' '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal386=(Token)match(input,LT,FOLLOW_LT_in_assignmentOperator7356); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal386_tree = (CommonTree)adaptor.create(char_literal386);
                    adaptor.addChild(root_0, char_literal386_tree);
                    }
                    char_literal387=(Token)match(input,LT,FOLLOW_LT_in_assignmentOperator7358); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal387_tree = (CommonTree)adaptor.create(char_literal387);
                    adaptor.addChild(root_0, char_literal387_tree);
                    }
                    char_literal388=(Token)match(input,EQ,FOLLOW_EQ_in_assignmentOperator7360); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal388_tree = (CommonTree)adaptor.create(char_literal388);
                    adaptor.addChild(root_0, char_literal388_tree);
                    }

                    }
                    break;
                case 11 :
                    // COMTOR.g:824:10: '>' '>' '>' '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal389=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal389_tree = (CommonTree)adaptor.create(char_literal389);
                    adaptor.addChild(root_0, char_literal389_tree);
                    }
                    char_literal390=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal390_tree = (CommonTree)adaptor.create(char_literal390);
                    adaptor.addChild(root_0, char_literal390_tree);
                    }
                    char_literal391=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7375); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal391_tree = (CommonTree)adaptor.create(char_literal391);
                    adaptor.addChild(root_0, char_literal391_tree);
                    }
                    char_literal392=(Token)match(input,EQ,FOLLOW_EQ_in_assignmentOperator7377); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal392_tree = (CommonTree)adaptor.create(char_literal392);
                    adaptor.addChild(root_0, char_literal392_tree);
                    }

                    }
                    break;
                case 12 :
                    // COMTOR.g:825:10: '>' '>' '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal393=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal393_tree = (CommonTree)adaptor.create(char_literal393);
                    adaptor.addChild(root_0, char_literal393_tree);
                    }
                    char_literal394=(Token)match(input,GT,FOLLOW_GT_in_assignmentOperator7390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal394_tree = (CommonTree)adaptor.create(char_literal394);
                    adaptor.addChild(root_0, char_literal394_tree);
                    }
                    char_literal395=(Token)match(input,EQ,FOLLOW_EQ_in_assignmentOperator7392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal395_tree = (CommonTree)adaptor.create(char_literal395);
                    adaptor.addChild(root_0, char_literal395_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, assignmentOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // COMTOR.g:829:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' conditionalExpression )? ;
    public final COMTORParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        COMTORParser.conditionalExpression_return retval = new COMTORParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal397=null;
        Token char_literal399=null;
        COMTORParser.conditionalOrExpression_return conditionalOrExpression396 = null;

        COMTORParser.expression_return expression398 = null;

        COMTORParser.conditionalExpression_return conditionalExpression400 = null;


        CommonTree char_literal397_tree=null;
        CommonTree char_literal399_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // COMTOR.g:830:5: ( conditionalOrExpression ( '?' expression ':' conditionalExpression )? )
            // COMTOR.g:830:9: conditionalOrExpression ( '?' expression ':' conditionalExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression7413);
            conditionalOrExpression396=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalOrExpression396.getTree());
            // COMTOR.g:831:9: ( '?' expression ':' conditionalExpression )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==QUES) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // COMTOR.g:831:10: '?' expression ':' conditionalExpression
                    {
                    char_literal397=(Token)match(input,QUES,FOLLOW_QUES_in_conditionalExpression7424); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal397_tree = (CommonTree)adaptor.create(char_literal397);
                    adaptor.addChild(root_0, char_literal397_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression7426);
                    expression398=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression398.getTree());
                    char_literal399=(Token)match(input,COLON,FOLLOW_COLON_in_conditionalExpression7428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal399_tree = (CommonTree)adaptor.create(char_literal399);
                    adaptor.addChild(root_0, char_literal399_tree);
                    }
                    pushFollow(FOLLOW_conditionalExpression_in_conditionalExpression7430);
                    conditionalExpression400=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression400.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // COMTOR.g:835:1: conditionalOrExpression : conditionalAndExpression ( '||' conditionalAndExpression )* ;
    public final COMTORParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        COMTORParser.conditionalOrExpression_return retval = new COMTORParser.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal402=null;
        COMTORParser.conditionalAndExpression_return conditionalAndExpression401 = null;

        COMTORParser.conditionalAndExpression_return conditionalAndExpression403 = null;


        CommonTree string_literal402_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // COMTOR.g:836:5: ( conditionalAndExpression ( '||' conditionalAndExpression )* )
            // COMTOR.g:836:9: conditionalAndExpression ( '||' conditionalAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7461);
            conditionalAndExpression401=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression401.getTree());
            // COMTOR.g:837:9: ( '||' conditionalAndExpression )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==BARBAR) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // COMTOR.g:837:10: '||' conditionalAndExpression
            	    {
            	    string_literal402=(Token)match(input,BARBAR,FOLLOW_BARBAR_in_conditionalOrExpression7472); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal402_tree = (CommonTree)adaptor.create(string_literal402);
            	    adaptor.addChild(root_0, string_literal402_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7474);
            	    conditionalAndExpression403=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalAndExpression403.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // COMTOR.g:841:1: conditionalAndExpression : inclusiveOrExpression ( '&&' inclusiveOrExpression )* ;
    public final COMTORParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        COMTORParser.conditionalAndExpression_return retval = new COMTORParser.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal405=null;
        COMTORParser.inclusiveOrExpression_return inclusiveOrExpression404 = null;

        COMTORParser.inclusiveOrExpression_return inclusiveOrExpression406 = null;


        CommonTree string_literal405_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // COMTOR.g:842:5: ( inclusiveOrExpression ( '&&' inclusiveOrExpression )* )
            // COMTOR.g:842:9: inclusiveOrExpression ( '&&' inclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7505);
            inclusiveOrExpression404=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression404.getTree());
            // COMTOR.g:843:9: ( '&&' inclusiveOrExpression )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==AMPAMP) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // COMTOR.g:843:10: '&&' inclusiveOrExpression
            	    {
            	    string_literal405=(Token)match(input,AMPAMP,FOLLOW_AMPAMP_in_conditionalAndExpression7516); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal405_tree = (CommonTree)adaptor.create(string_literal405);
            	    adaptor.addChild(root_0, string_literal405_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7518);
            	    inclusiveOrExpression406=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inclusiveOrExpression406.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // COMTOR.g:847:1: inclusiveOrExpression : exclusiveOrExpression ( '|' exclusiveOrExpression )* ;
    public final COMTORParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        COMTORParser.inclusiveOrExpression_return retval = new COMTORParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal408=null;
        COMTORParser.exclusiveOrExpression_return exclusiveOrExpression407 = null;

        COMTORParser.exclusiveOrExpression_return exclusiveOrExpression409 = null;


        CommonTree char_literal408_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // COMTOR.g:848:5: ( exclusiveOrExpression ( '|' exclusiveOrExpression )* )
            // COMTOR.g:848:9: exclusiveOrExpression ( '|' exclusiveOrExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7549);
            exclusiveOrExpression407=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression407.getTree());
            // COMTOR.g:849:9: ( '|' exclusiveOrExpression )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==BAR) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // COMTOR.g:849:10: '|' exclusiveOrExpression
            	    {
            	    char_literal408=(Token)match(input,BAR,FOLLOW_BAR_in_inclusiveOrExpression7560); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal408_tree = (CommonTree)adaptor.create(char_literal408);
            	    adaptor.addChild(root_0, char_literal408_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7562);
            	    exclusiveOrExpression409=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusiveOrExpression409.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // COMTOR.g:853:1: exclusiveOrExpression : andExpression ( '^' andExpression )* ;
    public final COMTORParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        COMTORParser.exclusiveOrExpression_return retval = new COMTORParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal411=null;
        COMTORParser.andExpression_return andExpression410 = null;

        COMTORParser.andExpression_return andExpression412 = null;


        CommonTree char_literal411_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // COMTOR.g:854:5: ( andExpression ( '^' andExpression )* )
            // COMTOR.g:854:9: andExpression ( '^' andExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7593);
            andExpression410=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression410.getTree());
            // COMTOR.g:855:9: ( '^' andExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==CARET) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // COMTOR.g:855:10: '^' andExpression
            	    {
            	    char_literal411=(Token)match(input,CARET,FOLLOW_CARET_in_exclusiveOrExpression7604); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal411_tree = (CommonTree)adaptor.create(char_literal411);
            	    adaptor.addChild(root_0, char_literal411_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7606);
            	    andExpression412=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, andExpression412.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // COMTOR.g:859:1: andExpression : equalityExpression ( '&' equalityExpression )* ;
    public final COMTORParser.andExpression_return andExpression() throws RecognitionException {
        COMTORParser.andExpression_return retval = new COMTORParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal414=null;
        COMTORParser.equalityExpression_return equalityExpression413 = null;

        COMTORParser.equalityExpression_return equalityExpression415 = null;


        CommonTree char_literal414_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // COMTOR.g:860:5: ( equalityExpression ( '&' equalityExpression )* )
            // COMTOR.g:860:9: equalityExpression ( '&' equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression7637);
            equalityExpression413=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression413.getTree());
            // COMTOR.g:861:9: ( '&' equalityExpression )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==AMP) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // COMTOR.g:861:10: '&' equalityExpression
            	    {
            	    char_literal414=(Token)match(input,AMP,FOLLOW_AMP_in_andExpression7648); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal414_tree = (CommonTree)adaptor.create(char_literal414);
            	    adaptor.addChild(root_0, char_literal414_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression7650);
            	    equalityExpression415=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityExpression415.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // COMTOR.g:865:1: equalityExpression : instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* ;
    public final COMTORParser.equalityExpression_return equalityExpression() throws RecognitionException {
        COMTORParser.equalityExpression_return retval = new COMTORParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set417=null;
        COMTORParser.instanceOfExpression_return instanceOfExpression416 = null;

        COMTORParser.instanceOfExpression_return instanceOfExpression418 = null;


        CommonTree set417_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // COMTOR.g:866:5: ( instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* )
            // COMTOR.g:866:9: instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7681);
            instanceOfExpression416=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression416.getTree());
            // COMTOR.g:867:9: ( ( '==' | '!=' ) instanceOfExpression )*
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==EQEQ||LA141_0==BANGEQ) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    // COMTOR.g:868:13: ( '==' | '!=' ) instanceOfExpression
            	    {
            	    set417=(Token)input.LT(1);
            	    if ( input.LA(1)==EQEQ||input.LA(1)==BANGEQ ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set417));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7758);
            	    instanceOfExpression418=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOfExpression418.getTree());

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // COMTOR.g:875:1: instanceOfExpression : relationalExpression ( 'instanceof' type )? ;
    public final COMTORParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        COMTORParser.instanceOfExpression_return retval = new COMTORParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal420=null;
        COMTORParser.relationalExpression_return relationalExpression419 = null;

        COMTORParser.type_return type421 = null;


        CommonTree string_literal420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // COMTOR.g:876:5: ( relationalExpression ( 'instanceof' type )? )
            // COMTOR.g:876:9: relationalExpression ( 'instanceof' type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression7789);
            relationalExpression419=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalExpression419.getTree());
            // COMTOR.g:877:9: ( 'instanceof' type )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==INSTANCEOF) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // COMTOR.g:877:10: 'instanceof' type
                    {
                    string_literal420=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_instanceOfExpression7800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal420_tree = (CommonTree)adaptor.create(string_literal420);
                    adaptor.addChild(root_0, string_literal420_tree);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression7802);
                    type421=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type421.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // COMTOR.g:881:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* ;
    public final COMTORParser.relationalExpression_return relationalExpression() throws RecognitionException {
        COMTORParser.relationalExpression_return retval = new COMTORParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.shiftExpression_return shiftExpression422 = null;

        COMTORParser.relationalOp_return relationalOp423 = null;

        COMTORParser.shiftExpression_return shiftExpression424 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // COMTOR.g:882:5: ( shiftExpression ( relationalOp shiftExpression )* )
            // COMTOR.g:882:9: shiftExpression ( relationalOp shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression7833);
            shiftExpression422=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression422.getTree());
            // COMTOR.g:883:9: ( relationalOp shiftExpression )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==LT) ) {
                    int LA143_2 = input.LA(2);

                    if ( ((LA143_2>=IDENTIFIER && LA143_2<=NULL)||LA143_2==BOOLEAN||LA143_2==BYTE||LA143_2==CHAR||LA143_2==DOUBLE||LA143_2==FLOAT||LA143_2==INT||LA143_2==LONG||LA143_2==NEW||LA143_2==SHORT||LA143_2==SUPER||LA143_2==THIS||LA143_2==VOID||LA143_2==LPAREN||(LA143_2>=EQ && LA143_2<=TILDE)||(LA143_2>=PLUSPLUS && LA143_2<=SUB)) ) {
                        alt143=1;
                    }


                }
                else if ( (LA143_0==GT) ) {
                    int LA143_3 = input.LA(2);

                    if ( ((LA143_3>=IDENTIFIER && LA143_3<=NULL)||LA143_3==BOOLEAN||LA143_3==BYTE||LA143_3==CHAR||LA143_3==DOUBLE||LA143_3==FLOAT||LA143_3==INT||LA143_3==LONG||LA143_3==NEW||LA143_3==SHORT||LA143_3==SUPER||LA143_3==THIS||LA143_3==VOID||LA143_3==LPAREN||(LA143_3>=EQ && LA143_3<=TILDE)||(LA143_3>=PLUSPLUS && LA143_3<=SUB)) ) {
                        alt143=1;
                    }


                }


                switch (alt143) {
            	case 1 :
            	    // COMTOR.g:883:10: relationalOp shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression7844);
            	    relationalOp423=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalOp423.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression7846);
            	    shiftExpression424=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftExpression424.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // COMTOR.g:887:1: relationalOp : ( '<' '=' | '>' '=' | '<' | '>' );
    public final COMTORParser.relationalOp_return relationalOp() throws RecognitionException {
        COMTORParser.relationalOp_return retval = new COMTORParser.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal425=null;
        Token char_literal426=null;
        Token char_literal427=null;
        Token char_literal428=null;
        Token char_literal429=null;
        Token char_literal430=null;

        CommonTree char_literal425_tree=null;
        CommonTree char_literal426_tree=null;
        CommonTree char_literal427_tree=null;
        CommonTree char_literal428_tree=null;
        CommonTree char_literal429_tree=null;
        CommonTree char_literal430_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // COMTOR.g:888:5: ( '<' '=' | '>' '=' | '<' | '>' )
            int alt144=4;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==LT) ) {
                int LA144_1 = input.LA(2);

                if ( (LA144_1==EQ) ) {
                    alt144=1;
                }
                else if ( ((LA144_1>=IDENTIFIER && LA144_1<=NULL)||LA144_1==BOOLEAN||LA144_1==BYTE||LA144_1==CHAR||LA144_1==DOUBLE||LA144_1==FLOAT||LA144_1==INT||LA144_1==LONG||LA144_1==NEW||LA144_1==SHORT||LA144_1==SUPER||LA144_1==THIS||LA144_1==VOID||LA144_1==LPAREN||(LA144_1>=BANG && LA144_1<=TILDE)||(LA144_1>=PLUSPLUS && LA144_1<=SUB)) ) {
                    alt144=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA144_0==GT) ) {
                int LA144_2 = input.LA(2);

                if ( (LA144_2==EQ) ) {
                    alt144=2;
                }
                else if ( ((LA144_2>=IDENTIFIER && LA144_2<=NULL)||LA144_2==BOOLEAN||LA144_2==BYTE||LA144_2==CHAR||LA144_2==DOUBLE||LA144_2==FLOAT||LA144_2==INT||LA144_2==LONG||LA144_2==NEW||LA144_2==SHORT||LA144_2==SUPER||LA144_2==THIS||LA144_2==VOID||LA144_2==LPAREN||(LA144_2>=BANG && LA144_2<=TILDE)||(LA144_2>=PLUSPLUS && LA144_2<=SUB)) ) {
                    alt144=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // COMTOR.g:888:10: '<' '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal425=(Token)match(input,LT,FOLLOW_LT_in_relationalOp7878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal425_tree = (CommonTree)adaptor.create(char_literal425);
                    adaptor.addChild(root_0, char_literal425_tree);
                    }
                    char_literal426=(Token)match(input,EQ,FOLLOW_EQ_in_relationalOp7880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal426_tree = (CommonTree)adaptor.create(char_literal426);
                    adaptor.addChild(root_0, char_literal426_tree);
                    }

                    }
                    break;
                case 2 :
                    // COMTOR.g:889:10: '>' '='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal427=(Token)match(input,GT,FOLLOW_GT_in_relationalOp7891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal427_tree = (CommonTree)adaptor.create(char_literal427);
                    adaptor.addChild(root_0, char_literal427_tree);
                    }
                    char_literal428=(Token)match(input,EQ,FOLLOW_EQ_in_relationalOp7893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal428_tree = (CommonTree)adaptor.create(char_literal428);
                    adaptor.addChild(root_0, char_literal428_tree);
                    }

                    }
                    break;
                case 3 :
                    // COMTOR.g:890:9: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal429=(Token)match(input,LT,FOLLOW_LT_in_relationalOp7903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal429_tree = (CommonTree)adaptor.create(char_literal429);
                    adaptor.addChild(root_0, char_literal429_tree);
                    }

                    }
                    break;
                case 4 :
                    // COMTOR.g:891:9: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal430=(Token)match(input,GT,FOLLOW_GT_in_relationalOp7913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal430_tree = (CommonTree)adaptor.create(char_literal430);
                    adaptor.addChild(root_0, char_literal430_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // COMTOR.g:894:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
    public final COMTORParser.shiftExpression_return shiftExpression() throws RecognitionException {
        COMTORParser.shiftExpression_return retval = new COMTORParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.additiveExpression_return additiveExpression431 = null;

        COMTORParser.shiftOp_return shiftOp432 = null;

        COMTORParser.additiveExpression_return additiveExpression433 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // COMTOR.g:895:5: ( additiveExpression ( shiftOp additiveExpression )* )
            // COMTOR.g:895:9: additiveExpression ( shiftOp additiveExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression7933);
            additiveExpression431=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression431.getTree());
            // COMTOR.g:896:9: ( shiftOp additiveExpression )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==LT) ) {
                    int LA145_1 = input.LA(2);

                    if ( (LA145_1==LT) ) {
                        int LA145_4 = input.LA(3);

                        if ( ((LA145_4>=IDENTIFIER && LA145_4<=NULL)||LA145_4==BOOLEAN||LA145_4==BYTE||LA145_4==CHAR||LA145_4==DOUBLE||LA145_4==FLOAT||LA145_4==INT||LA145_4==LONG||LA145_4==NEW||LA145_4==SHORT||LA145_4==SUPER||LA145_4==THIS||LA145_4==VOID||LA145_4==LPAREN||(LA145_4>=BANG && LA145_4<=TILDE)||(LA145_4>=PLUSPLUS && LA145_4<=SUB)) ) {
                            alt145=1;
                        }


                    }


                }
                else if ( (LA145_0==GT) ) {
                    int LA145_2 = input.LA(2);

                    if ( (LA145_2==GT) ) {
                        int LA145_5 = input.LA(3);

                        if ( (LA145_5==GT) ) {
                            int LA145_7 = input.LA(4);

                            if ( ((LA145_7>=IDENTIFIER && LA145_7<=NULL)||LA145_7==BOOLEAN||LA145_7==BYTE||LA145_7==CHAR||LA145_7==DOUBLE||LA145_7==FLOAT||LA145_7==INT||LA145_7==LONG||LA145_7==NEW||LA145_7==SHORT||LA145_7==SUPER||LA145_7==THIS||LA145_7==VOID||LA145_7==LPAREN||(LA145_7>=BANG && LA145_7<=TILDE)||(LA145_7>=PLUSPLUS && LA145_7<=SUB)) ) {
                                alt145=1;
                            }


                        }
                        else if ( ((LA145_5>=IDENTIFIER && LA145_5<=NULL)||LA145_5==BOOLEAN||LA145_5==BYTE||LA145_5==CHAR||LA145_5==DOUBLE||LA145_5==FLOAT||LA145_5==INT||LA145_5==LONG||LA145_5==NEW||LA145_5==SHORT||LA145_5==SUPER||LA145_5==THIS||LA145_5==VOID||LA145_5==LPAREN||(LA145_5>=BANG && LA145_5<=TILDE)||(LA145_5>=PLUSPLUS && LA145_5<=SUB)) ) {
                            alt145=1;
                        }


                    }


                }


                switch (alt145) {
            	case 1 :
            	    // COMTOR.g:896:10: shiftOp additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression7944);
            	    shiftOp432=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, shiftOp432.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression7946);
            	    additiveExpression433=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additiveExpression433.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // COMTOR.g:901:1: shiftOp : ( '<' '<' | '>' '>' '>' | '>' '>' );
    public final COMTORParser.shiftOp_return shiftOp() throws RecognitionException {
        COMTORParser.shiftOp_return retval = new COMTORParser.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal434=null;
        Token char_literal435=null;
        Token char_literal436=null;
        Token char_literal437=null;
        Token char_literal438=null;
        Token char_literal439=null;
        Token char_literal440=null;

        CommonTree char_literal434_tree=null;
        CommonTree char_literal435_tree=null;
        CommonTree char_literal436_tree=null;
        CommonTree char_literal437_tree=null;
        CommonTree char_literal438_tree=null;
        CommonTree char_literal439_tree=null;
        CommonTree char_literal440_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // COMTOR.g:902:5: ( '<' '<' | '>' '>' '>' | '>' '>' )
            int alt146=3;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==LT) ) {
                alt146=1;
            }
            else if ( (LA146_0==GT) ) {
                int LA146_2 = input.LA(2);

                if ( (LA146_2==GT) ) {
                    int LA146_3 = input.LA(3);

                    if ( (LA146_3==GT) ) {
                        alt146=2;
                    }
                    else if ( ((LA146_3>=IDENTIFIER && LA146_3<=NULL)||LA146_3==BOOLEAN||LA146_3==BYTE||LA146_3==CHAR||LA146_3==DOUBLE||LA146_3==FLOAT||LA146_3==INT||LA146_3==LONG||LA146_3==NEW||LA146_3==SHORT||LA146_3==SUPER||LA146_3==THIS||LA146_3==VOID||LA146_3==LPAREN||(LA146_3>=BANG && LA146_3<=TILDE)||(LA146_3>=PLUSPLUS && LA146_3<=SUB)) ) {
                        alt146=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // COMTOR.g:902:10: '<' '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal434=(Token)match(input,LT,FOLLOW_LT_in_shiftOp7979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal434_tree = (CommonTree)adaptor.create(char_literal434);
                    adaptor.addChild(root_0, char_literal434_tree);
                    }
                    char_literal435=(Token)match(input,LT,FOLLOW_LT_in_shiftOp7981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal435_tree = (CommonTree)adaptor.create(char_literal435);
                    adaptor.addChild(root_0, char_literal435_tree);
                    }

                    }
                    break;
                case 2 :
                    // COMTOR.g:903:10: '>' '>' '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal436=(Token)match(input,GT,FOLLOW_GT_in_shiftOp7992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal436_tree = (CommonTree)adaptor.create(char_literal436);
                    adaptor.addChild(root_0, char_literal436_tree);
                    }
                    char_literal437=(Token)match(input,GT,FOLLOW_GT_in_shiftOp7994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal437_tree = (CommonTree)adaptor.create(char_literal437);
                    adaptor.addChild(root_0, char_literal437_tree);
                    }
                    char_literal438=(Token)match(input,GT,FOLLOW_GT_in_shiftOp7996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal438_tree = (CommonTree)adaptor.create(char_literal438);
                    adaptor.addChild(root_0, char_literal438_tree);
                    }

                    }
                    break;
                case 3 :
                    // COMTOR.g:904:10: '>' '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal439=(Token)match(input,GT,FOLLOW_GT_in_shiftOp8007); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal439_tree = (CommonTree)adaptor.create(char_literal439);
                    adaptor.addChild(root_0, char_literal439_tree);
                    }
                    char_literal440=(Token)match(input,GT,FOLLOW_GT_in_shiftOp8009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal440_tree = (CommonTree)adaptor.create(char_literal440);
                    adaptor.addChild(root_0, char_literal440_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // COMTOR.g:908:1: additiveExpression : multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* ;
    public final COMTORParser.additiveExpression_return additiveExpression() throws RecognitionException {
        COMTORParser.additiveExpression_return retval = new COMTORParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set442=null;
        COMTORParser.multiplicativeExpression_return multiplicativeExpression441 = null;

        COMTORParser.multiplicativeExpression_return multiplicativeExpression443 = null;


        CommonTree set442_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // COMTOR.g:909:5: ( multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* )
            // COMTOR.g:909:9: multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8030);
            multiplicativeExpression441=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression441.getTree());
            // COMTOR.g:910:9: ( ( '+' | '-' ) multiplicativeExpression )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( ((LA147_0>=PLUS && LA147_0<=SUB)) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // COMTOR.g:911:13: ( '+' | '-' ) multiplicativeExpression
            	    {
            	    set442=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=SUB) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set442));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8107);
            	    multiplicativeExpression443=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpression443.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // COMTOR.g:918:1: multiplicativeExpression : unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* ;
    public final COMTORParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        COMTORParser.multiplicativeExpression_return retval = new COMTORParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set445=null;
        COMTORParser.unaryExpression_return unaryExpression444 = null;

        COMTORParser.unaryExpression_return unaryExpression446 = null;


        CommonTree set445_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // COMTOR.g:919:5: ( unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* )
            // COMTOR.g:920:9: unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8145);
            unaryExpression444=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression444.getTree());
            // COMTOR.g:921:9: ( ( '*' | '/' | '%' ) unaryExpression )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( ((LA148_0>=STAR && LA148_0<=SLASH)||LA148_0==PERCENT) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // COMTOR.g:922:13: ( '*' | '/' | '%' ) unaryExpression
            	    {
            	    set445=(Token)input.LT(1);
            	    if ( (input.LA(1)>=STAR && input.LA(1)<=SLASH)||input.LA(1)==PERCENT ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set445));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8240);
            	    unaryExpression446=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression446.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // COMTOR.g:930:1: unaryExpression : ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus );
    public final COMTORParser.unaryExpression_return unaryExpression() throws RecognitionException {
        COMTORParser.unaryExpression_return retval = new COMTORParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal447=null;
        Token char_literal449=null;
        Token string_literal451=null;
        Token string_literal453=null;
        COMTORParser.unaryExpression_return unaryExpression448 = null;

        COMTORParser.unaryExpression_return unaryExpression450 = null;

        COMTORParser.unaryExpression_return unaryExpression452 = null;

        COMTORParser.unaryExpression_return unaryExpression454 = null;

        COMTORParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus455 = null;


        CommonTree char_literal447_tree=null;
        CommonTree char_literal449_tree=null;
        CommonTree string_literal451_tree=null;
        CommonTree string_literal453_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // COMTOR.g:935:5: ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus )
            int alt149=5;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt149=1;
                }
                break;
            case SUB:
                {
                alt149=2;
                }
                break;
            case PLUSPLUS:
                {
                alt149=3;
                }
                break;
            case SUBSUB:
                {
                alt149=4;
                }
                break;
            case IDENTIFIER:
            case INTLITERAL:
            case LONGLITERAL:
            case FLOATLITERAL:
            case DOUBLELITERAL:
            case CHARLITERAL:
            case UNICODECHARLITERAL:
            case STRINGLITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case SHORT:
            case SUPER:
            case THIS:
            case VOID:
            case LPAREN:
            case BANG:
            case TILDE:
                {
                alt149=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // COMTOR.g:935:9: '+' unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal447=(Token)match(input,PLUS,FOLLOW_PLUS_in_unaryExpression8273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal447_tree = (CommonTree)adaptor.create(char_literal447);
                    adaptor.addChild(root_0, char_literal447_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8276);
                    unaryExpression448=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression448.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:936:9: '-' unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal449=(Token)match(input,SUB,FOLLOW_SUB_in_unaryExpression8286); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal449_tree = (CommonTree)adaptor.create(char_literal449);
                    adaptor.addChild(root_0, char_literal449_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8288);
                    unaryExpression450=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression450.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:937:9: '++' unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal451=(Token)match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_unaryExpression8298); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal451_tree = (CommonTree)adaptor.create(string_literal451);
                    adaptor.addChild(root_0, string_literal451_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8300);
                    unaryExpression452=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression452.getTree());

                    }
                    break;
                case 4 :
                    // COMTOR.g:938:9: '--' unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal453=(Token)match(input,SUBSUB,FOLLOW_SUBSUB_in_unaryExpression8310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal453_tree = (CommonTree)adaptor.create(string_literal453);
                    adaptor.addChild(root_0, string_literal453_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8312);
                    unaryExpression454=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression454.getTree());

                    }
                    break;
                case 5 :
                    // COMTOR.g:939:9: unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression8322);
                    unaryExpressionNotPlusMinus455=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpressionNotPlusMinus455.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // COMTOR.g:942:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );
    public final COMTORParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        COMTORParser.unaryExpressionNotPlusMinus_return retval = new COMTORParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal456=null;
        Token char_literal458=null;
        Token set463=null;
        COMTORParser.unaryExpression_return unaryExpression457 = null;

        COMTORParser.unaryExpression_return unaryExpression459 = null;

        COMTORParser.castExpression_return castExpression460 = null;

        COMTORParser.primary_return primary461 = null;

        COMTORParser.selector_return selector462 = null;


        CommonTree char_literal456_tree=null;
        CommonTree char_literal458_tree=null;
        CommonTree set463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // COMTOR.g:943:5: ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? )
            int alt152=4;
            alt152 = dfa152.predict(input);
            switch (alt152) {
                case 1 :
                    // COMTOR.g:943:9: '~' unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal456=(Token)match(input,TILDE,FOLLOW_TILDE_in_unaryExpressionNotPlusMinus8342); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal456_tree = (CommonTree)adaptor.create(char_literal456);
                    adaptor.addChild(root_0, char_literal456_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8344);
                    unaryExpression457=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression457.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:944:9: '!' unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal458=(Token)match(input,BANG,FOLLOW_BANG_in_unaryExpressionNotPlusMinus8354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal458_tree = (CommonTree)adaptor.create(char_literal458);
                    adaptor.addChild(root_0, char_literal458_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8356);
                    unaryExpression459=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression459.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:945:9: castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus8366);
                    castExpression460=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression460.getTree());

                    }
                    break;
                case 4 :
                    // COMTOR.g:946:9: primary ( selector )* ( '++' | '--' )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus8376);
                    primary461=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primary461.getTree());
                    // COMTOR.g:947:9: ( selector )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==LBRACKET||LA150_0==DOT) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // COMTOR.g:947:10: selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus8387);
                    	    selector462=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector462.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);

                    // COMTOR.g:949:9: ( '++' | '--' )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( ((LA151_0>=PLUSPLUS && LA151_0<=SUBSUB)) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // COMTOR.g:
                            {
                            set463=(Token)input.LT(1);
                            if ( (input.LA(1)>=PLUSPLUS && input.LA(1)<=SUBSUB) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set463));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // COMTOR.g:954:1: castExpression : ( '(' primitiveType ')' unaryExpression -> unaryExpression ^( CAST primitiveType ) | '(' type ')' unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus ^( CAST type ) );
    public final COMTORParser.castExpression_return castExpression() throws RecognitionException {
        COMTORParser.castExpression_return retval = new COMTORParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal464=null;
        Token char_literal466=null;
        Token char_literal468=null;
        Token char_literal470=null;
        COMTORParser.primitiveType_return primitiveType465 = null;

        COMTORParser.unaryExpression_return unaryExpression467 = null;

        COMTORParser.type_return type469 = null;

        COMTORParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus471 = null;


        CommonTree char_literal464_tree=null;
        CommonTree char_literal466_tree=null;
        CommonTree char_literal468_tree=null;
        CommonTree char_literal470_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // COMTOR.g:955:5: ( '(' primitiveType ')' unaryExpression -> unaryExpression ^( CAST primitiveType ) | '(' type ')' unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus ^( CAST type ) )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LPAREN) ) {
                int LA153_1 = input.LA(2);

                if ( (synpred227_COMTOR()) ) {
                    alt153=1;
                }
                else if ( (true) ) {
                    alt153=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // COMTOR.g:955:9: '(' primitiveType ')' unaryExpression
                    {
                    char_literal464=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_castExpression8457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal464);

                    pushFollow(FOLLOW_primitiveType_in_castExpression8459);
                    primitiveType465=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType465.getTree());
                    char_literal466=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_castExpression8461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal466);

                    pushFollow(FOLLOW_unaryExpression_in_castExpression8463);
                    unaryExpression467=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression467.getTree());


                    // AST REWRITE
                    // elements: unaryExpression, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 956:6: -> unaryExpression ^( CAST primitiveType )
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());
                        // COMTOR.g:956:25: ^( CAST primitiveType )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CAST, "CAST"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:957:9: '(' type ')' unaryExpressionNotPlusMinus
                    {
                    char_literal468=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_castExpression8488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal468);

                    pushFollow(FOLLOW_type_in_castExpression8490);
                    type469=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type469.getTree());
                    char_literal470=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_castExpression8492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal470);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression8494);
                    unaryExpressionNotPlusMinus471=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus471.getTree());


                    // AST REWRITE
                    // elements: type, unaryExpressionNotPlusMinus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 958:6: -> unaryExpressionNotPlusMinus ^( CAST type )
                    {
                        adaptor.addChild(root_0, stream_unaryExpressionNotPlusMinus.nextTree());
                        // COMTOR.g:958:37: ^( CAST type )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CAST, "CAST"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // COMTOR.g:961:1: primary : ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType (b+= '[' b+= ']' )* '.' 'class' -> primitiveType '.' 'class' ( ^( ARRAY ( $b)* ) )? | 'void' '.' 'class' );
    public final COMTORParser.primary_return primary() throws RecognitionException {
        COMTORParser.primary_return retval = new COMTORParser.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal473=null;
        Token char_literal474=null;
        Token IDENTIFIER475=null;
        Token IDENTIFIER477=null;
        Token char_literal478=null;
        Token IDENTIFIER479=null;
        Token string_literal481=null;
        Token char_literal486=null;
        Token string_literal487=null;
        Token string_literal488=null;
        Token char_literal489=null;
        Token string_literal490=null;
        Token b=null;
        List list_b=null;
        COMTORParser.parExpression_return parExpression472 = null;

        COMTORParser.identifierSuffix_return identifierSuffix476 = null;

        COMTORParser.identifierSuffix_return identifierSuffix480 = null;

        COMTORParser.superSuffix_return superSuffix482 = null;

        COMTORParser.literal_return literal483 = null;

        COMTORParser.creator_return creator484 = null;

        COMTORParser.primitiveType_return primitiveType485 = null;


        CommonTree string_literal473_tree=null;
        CommonTree char_literal474_tree=null;
        CommonTree IDENTIFIER475_tree=null;
        CommonTree IDENTIFIER477_tree=null;
        CommonTree char_literal478_tree=null;
        CommonTree IDENTIFIER479_tree=null;
        CommonTree string_literal481_tree=null;
        CommonTree char_literal486_tree=null;
        CommonTree string_literal487_tree=null;
        CommonTree string_literal488_tree=null;
        CommonTree char_literal489_tree=null;
        CommonTree string_literal490_tree=null;
        CommonTree b_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // COMTOR.g:965:5: ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType (b+= '[' b+= ']' )* '.' 'class' -> primitiveType '.' 'class' ( ^( ARRAY ( $b)* ) )? | 'void' '.' 'class' )
            int alt159=8;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt159=1;
                }
                break;
            case THIS:
                {
                alt159=2;
                }
                break;
            case IDENTIFIER:
                {
                alt159=3;
                }
                break;
            case SUPER:
                {
                alt159=4;
                }
                break;
            case INTLITERAL:
            case LONGLITERAL:
            case FLOATLITERAL:
            case DOUBLELITERAL:
            case CHARLITERAL:
            case UNICODECHARLITERAL:
            case STRINGLITERAL:
            case TRUE:
            case FALSE:
            case NULL:
                {
                alt159=5;
                }
                break;
            case NEW:
                {
                alt159=6;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                alt159=7;
                }
                break;
            case VOID:
                {
                alt159=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // COMTOR.g:965:9: parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary8531);
                    parExpression472=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression472.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:966:9: 'this' ( '.' IDENTIFIER )* ( identifierSuffix )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal473=(Token)match(input,THIS,FOLLOW_THIS_in_primary8553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal473_tree = (CommonTree)adaptor.create(string_literal473);
                    adaptor.addChild(root_0, string_literal473_tree);
                    }
                    // COMTOR.g:967:9: ( '.' IDENTIFIER )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==DOT) ) {
                            int LA154_2 = input.LA(2);

                            if ( (LA154_2==IDENTIFIER) ) {
                                int LA154_3 = input.LA(3);

                                if ( (synpred229_COMTOR()) ) {
                                    alt154=1;
                                }


                            }


                        }


                        switch (alt154) {
                    	case 1 :
                    	    // COMTOR.g:967:10: '.' IDENTIFIER
                    	    {
                    	    char_literal474=(Token)match(input,DOT,FOLLOW_DOT_in_primary8564); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal474_tree = (CommonTree)adaptor.create(char_literal474);
                    	    adaptor.addChild(root_0, char_literal474_tree);
                    	    }
                    	    IDENTIFIER475=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary8566); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    IDENTIFIER475_tree = (CommonTree)adaptor.create(IDENTIFIER475);
                    	    adaptor.addChild(root_0, IDENTIFIER475_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);

                    // COMTOR.g:969:9: ( identifierSuffix )?
                    int alt155=2;
                    alt155 = dfa155.predict(input);
                    switch (alt155) {
                        case 1 :
                            // COMTOR.g:969:10: identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary8588);
                            identifierSuffix476=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierSuffix476.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // COMTOR.g:971:9: IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENTIFIER477=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary8609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER477_tree = (CommonTree)adaptor.create(IDENTIFIER477);
                    adaptor.addChild(root_0, IDENTIFIER477_tree);
                    }
                    // COMTOR.g:972:9: ( '.' IDENTIFIER )*
                    loop156:
                    do {
                        int alt156=2;
                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==DOT) ) {
                            int LA156_2 = input.LA(2);

                            if ( (LA156_2==IDENTIFIER) ) {
                                int LA156_3 = input.LA(3);

                                if ( (synpred232_COMTOR()) ) {
                                    alt156=1;
                                }


                            }


                        }


                        switch (alt156) {
                    	case 1 :
                    	    // COMTOR.g:972:10: '.' IDENTIFIER
                    	    {
                    	    char_literal478=(Token)match(input,DOT,FOLLOW_DOT_in_primary8620); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal478_tree = (CommonTree)adaptor.create(char_literal478);
                    	    adaptor.addChild(root_0, char_literal478_tree);
                    	    }
                    	    IDENTIFIER479=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_primary8622); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    IDENTIFIER479_tree = (CommonTree)adaptor.create(IDENTIFIER479);
                    	    adaptor.addChild(root_0, IDENTIFIER479_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);

                    // COMTOR.g:974:9: ( identifierSuffix )?
                    int alt157=2;
                    alt157 = dfa157.predict(input);
                    switch (alt157) {
                        case 1 :
                            // COMTOR.g:974:10: identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary8644);
                            identifierSuffix480=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierSuffix480.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // COMTOR.g:976:9: 'super' superSuffix
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal481=(Token)match(input,SUPER,FOLLOW_SUPER_in_primary8665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal481_tree = (CommonTree)adaptor.create(string_literal481);
                    adaptor.addChild(root_0, string_literal481_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_primary8675);
                    superSuffix482=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix482.getTree());

                    }
                    break;
                case 5 :
                    // COMTOR.g:978:9: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary8685);
                    literal483=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal483.getTree());

                    }
                    break;
                case 6 :
                    // COMTOR.g:979:9: creator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_creator_in_primary8695);
                    creator484=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, creator484.getTree());

                    }
                    break;
                case 7 :
                    // COMTOR.g:980:9: primitiveType (b+= '[' b+= ']' )* '.' 'class'
                    {
                    pushFollow(FOLLOW_primitiveType_in_primary8705);
                    primitiveType485=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType485.getTree());
                    // COMTOR.g:981:9: (b+= '[' b+= ']' )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==LBRACKET) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // COMTOR.g:981:10: b+= '[' b+= ']'
                    	    {
                    	    b=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_primary8718); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LBRACKET.add(b);

                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);

                    	    b=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_primary8722); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_RBRACKET.add(b);

                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);


                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);

                    char_literal486=(Token)match(input,DOT,FOLLOW_DOT_in_primary8743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal486);

                    string_literal487=(Token)match(input,CLASS,FOLLOW_CLASS_in_primary8745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLASS.add(string_literal487);



                    // AST REWRITE
                    // elements: b, DOT, CLASS, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: b
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b", list_b);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 984:9: -> primitiveType '.' 'class' ( ^( ARRAY ( $b)* ) )?
                    {
                        adaptor.addChild(root_0, stream_primitiveType.nextTree());
                        adaptor.addChild(root_0, stream_DOT.nextNode());
                        adaptor.addChild(root_0, stream_CLASS.nextNode());
                        // COMTOR.g:984:38: ( ^( ARRAY ( $b)* ) )?
                        if ( stream_b.hasNext() ) {
                            // COMTOR.g:984:38: ^( ARRAY ( $b)* )
                            {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);

                            // COMTOR.g:984:46: ( $b)*
                            while ( stream_b.hasNext() ) {
                                adaptor.addChild(root_1, stream_b.nextNode());

                            }
                            stream_b.reset();

                            adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_b.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // COMTOR.g:985:9: 'void' '.' 'class'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal488=(Token)match(input,VOID,FOLLOW_VOID_in_primary8780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal488_tree = (CommonTree)adaptor.create(string_literal488);
                    adaptor.addChild(root_0, string_literal488_tree);
                    }
                    char_literal489=(Token)match(input,DOT,FOLLOW_DOT_in_primary8782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal489_tree = (CommonTree)adaptor.create(char_literal489);
                    adaptor.addChild(root_0, char_literal489_tree);
                    }
                    string_literal490=(Token)match(input,CLASS,FOLLOW_CLASS_in_primary8784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal490_tree = (CommonTree)adaptor.create(string_literal490);
                    adaptor.addChild(root_0, string_literal490_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class superSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // COMTOR.g:989:1: superSuffix : ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? -> IDENTIFIER ( typeArguments )? ( arguments )? );
    public final COMTORParser.superSuffix_return superSuffix() throws RecognitionException {
        COMTORParser.superSuffix_return retval = new COMTORParser.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal492=null;
        Token IDENTIFIER494=null;
        COMTORParser.arguments_return arguments491 = null;

        COMTORParser.typeArguments_return typeArguments493 = null;

        COMTORParser.arguments_return arguments495 = null;


        CommonTree char_literal492_tree=null;
        CommonTree IDENTIFIER494_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // COMTOR.g:990:5: ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? -> IDENTIFIER ( typeArguments )? ( arguments )? )
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==LPAREN) ) {
                alt162=1;
            }
            else if ( (LA162_0==DOT) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // COMTOR.g:990:9: arguments
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_superSuffix8810);
                    arguments491=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments491.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:991:9: '.' ( typeArguments )? IDENTIFIER ( arguments )?
                    {
                    char_literal492=(Token)match(input,DOT,FOLLOW_DOT_in_superSuffix8820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(char_literal492);

                    // COMTOR.g:991:13: ( typeArguments )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==LT) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // COMTOR.g:991:14: typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_superSuffix8823);
                            typeArguments493=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typeArguments.add(typeArguments493.getTree());

                            }
                            break;

                    }

                    IDENTIFIER494=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_superSuffix8844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER494);

                    // COMTOR.g:994:9: ( arguments )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==LPAREN) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // COMTOR.g:994:10: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix8855);
                            arguments495=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments495.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: typeArguments, arguments, IDENTIFIER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 996:9: -> IDENTIFIER ( typeArguments )? ( arguments )?
                    {
                        adaptor.addChild(root_0, stream_IDENTIFIER.nextNode());
                        // COMTOR.g:996:23: ( typeArguments )?
                        if ( stream_typeArguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_typeArguments.nextTree());

                        }
                        stream_typeArguments.reset();
                        // COMTOR.g:996:38: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffix"
    // COMTOR.g:1000:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator );
    public final COMTORParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        COMTORParser.identifierSuffix_return retval = new COMTORParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal496=null;
        Token char_literal497=null;
        Token char_literal498=null;
        Token string_literal499=null;
        Token char_literal500=null;
        Token char_literal502=null;
        Token char_literal504=null;
        Token string_literal505=null;
        Token char_literal506=null;
        Token IDENTIFIER508=null;
        Token char_literal510=null;
        Token string_literal511=null;
        Token char_literal512=null;
        Token string_literal513=null;
        COMTORParser.expression_return expression501 = null;

        COMTORParser.arguments_return arguments503 = null;

        COMTORParser.nonWildcardTypeArguments_return nonWildcardTypeArguments507 = null;

        COMTORParser.arguments_return arguments509 = null;

        COMTORParser.arguments_return arguments514 = null;

        COMTORParser.innerCreator_return innerCreator515 = null;


        CommonTree char_literal496_tree=null;
        CommonTree char_literal497_tree=null;
        CommonTree char_literal498_tree=null;
        CommonTree string_literal499_tree=null;
        CommonTree char_literal500_tree=null;
        CommonTree char_literal502_tree=null;
        CommonTree char_literal504_tree=null;
        CommonTree string_literal505_tree=null;
        CommonTree char_literal506_tree=null;
        CommonTree IDENTIFIER508_tree=null;
        CommonTree char_literal510_tree=null;
        CommonTree string_literal511_tree=null;
        CommonTree char_literal512_tree=null;
        CommonTree string_literal513_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // COMTOR.g:1001:5: ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator )
            int alt165=8;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // COMTOR.g:1001:9: ( '[' ']' )+ '.' 'class'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // COMTOR.g:1001:9: ( '[' ']' )+
                    int cnt163=0;
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==LBRACKET) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // COMTOR.g:1001:10: '[' ']'
                    	    {
                    	    char_literal496=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_identifierSuffix8906); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal496_tree = (CommonTree)adaptor.create(char_literal496);
                    	    adaptor.addChild(root_0, char_literal496_tree);
                    	    }
                    	    char_literal497=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_identifierSuffix8908); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal497_tree = (CommonTree)adaptor.create(char_literal497);
                    	    adaptor.addChild(root_0, char_literal497_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt163 >= 1 ) break loop163;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(163, input);
                                throw eee;
                        }
                        cnt163++;
                    } while (true);

                    char_literal498=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix8929); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal498_tree = (CommonTree)adaptor.create(char_literal498);
                    adaptor.addChild(root_0, char_literal498_tree);
                    }
                    string_literal499=(Token)match(input,CLASS,FOLLOW_CLASS_in_identifierSuffix8931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal499_tree = (CommonTree)adaptor.create(string_literal499);
                    adaptor.addChild(root_0, string_literal499_tree);
                    }

                    }
                    break;
                case 2 :
                    // COMTOR.g:1004:9: ( '[' expression ']' )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // COMTOR.g:1004:9: ( '[' expression ']' )+
                    int cnt164=0;
                    loop164:
                    do {
                        int alt164=2;
                        alt164 = dfa164.predict(input);
                        switch (alt164) {
                    	case 1 :
                    	    // COMTOR.g:1004:10: '[' expression ']'
                    	    {
                    	    char_literal500=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_identifierSuffix8942); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal500_tree = (CommonTree)adaptor.create(char_literal500);
                    	    adaptor.addChild(root_0, char_literal500_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix8944);
                    	    expression501=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression501.getTree());
                    	    char_literal502=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_identifierSuffix8946); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal502_tree = (CommonTree)adaptor.create(char_literal502);
                    	    adaptor.addChild(root_0, char_literal502_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt164 >= 1 ) break loop164;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(164, input);
                                throw eee;
                        }
                        cnt164++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // COMTOR.g:1006:9: arguments
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arguments_in_identifierSuffix8967);
                    arguments503=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments503.getTree());

                    }
                    break;
                case 4 :
                    // COMTOR.g:1007:9: '.' 'class'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal504=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix8977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal504_tree = (CommonTree)adaptor.create(char_literal504);
                    adaptor.addChild(root_0, char_literal504_tree);
                    }
                    string_literal505=(Token)match(input,CLASS,FOLLOW_CLASS_in_identifierSuffix8979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal505_tree = (CommonTree)adaptor.create(string_literal505);
                    adaptor.addChild(root_0, string_literal505_tree);
                    }

                    }
                    break;
                case 5 :
                    // COMTOR.g:1008:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal506=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix8989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal506_tree = (CommonTree)adaptor.create(char_literal506);
                    adaptor.addChild(root_0, char_literal506_tree);
                    }
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_identifierSuffix8991);
                    nonWildcardTypeArguments507=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments507.getTree());
                    IDENTIFIER508=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_identifierSuffix8993); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER508_tree = (CommonTree)adaptor.create(IDENTIFIER508);
                    adaptor.addChild(root_0, IDENTIFIER508_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_identifierSuffix8995);
                    arguments509=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments509.getTree());

                    }
                    break;
                case 6 :
                    // COMTOR.g:1009:9: '.' 'this'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal510=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix9005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal510_tree = (CommonTree)adaptor.create(char_literal510);
                    adaptor.addChild(root_0, char_literal510_tree);
                    }
                    string_literal511=(Token)match(input,THIS,FOLLOW_THIS_in_identifierSuffix9007); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal511_tree = (CommonTree)adaptor.create(string_literal511);
                    adaptor.addChild(root_0, string_literal511_tree);
                    }

                    }
                    break;
                case 7 :
                    // COMTOR.g:1010:9: '.' 'super' arguments
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal512=(Token)match(input,DOT,FOLLOW_DOT_in_identifierSuffix9017); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal512_tree = (CommonTree)adaptor.create(char_literal512);
                    adaptor.addChild(root_0, char_literal512_tree);
                    }
                    string_literal513=(Token)match(input,SUPER,FOLLOW_SUPER_in_identifierSuffix9019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal513_tree = (CommonTree)adaptor.create(string_literal513);
                    adaptor.addChild(root_0, string_literal513_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_identifierSuffix9021);
                    arguments514=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments514.getTree());

                    }
                    break;
                case 8 :
                    // COMTOR.g:1011:9: innerCreator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_innerCreator_in_identifierSuffix9031);
                    innerCreator515=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator515.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // COMTOR.g:1015:1: selector : ( '.' IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' );
    public final COMTORParser.selector_return selector() throws RecognitionException {
        COMTORParser.selector_return retval = new COMTORParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal516=null;
        Token IDENTIFIER517=null;
        Token char_literal519=null;
        Token string_literal520=null;
        Token char_literal521=null;
        Token string_literal522=null;
        Token char_literal525=null;
        Token char_literal527=null;
        COMTORParser.arguments_return arguments518 = null;

        COMTORParser.superSuffix_return superSuffix523 = null;

        COMTORParser.innerCreator_return innerCreator524 = null;

        COMTORParser.expression_return expression526 = null;


        CommonTree char_literal516_tree=null;
        CommonTree IDENTIFIER517_tree=null;
        CommonTree char_literal519_tree=null;
        CommonTree string_literal520_tree=null;
        CommonTree char_literal521_tree=null;
        CommonTree string_literal522_tree=null;
        CommonTree char_literal525_tree=null;
        CommonTree char_literal527_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // COMTOR.g:1016:5: ( '.' IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' )
            int alt167=5;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==DOT) ) {
                switch ( input.LA(2) ) {
                case IDENTIFIER:
                    {
                    alt167=1;
                    }
                    break;
                case THIS:
                    {
                    alt167=2;
                    }
                    break;
                case SUPER:
                    {
                    alt167=3;
                    }
                    break;
                case NEW:
                    {
                    alt167=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 167, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA167_0==LBRACKET) ) {
                alt167=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // COMTOR.g:1016:9: '.' IDENTIFIER ( arguments )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal516=(Token)match(input,DOT,FOLLOW_DOT_in_selector9053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal516_tree = (CommonTree)adaptor.create(char_literal516);
                    adaptor.addChild(root_0, char_literal516_tree);
                    }
                    IDENTIFIER517=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_selector9055); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENTIFIER517_tree = (CommonTree)adaptor.create(IDENTIFIER517);
                    adaptor.addChild(root_0, IDENTIFIER517_tree);
                    }
                    // COMTOR.g:1017:9: ( arguments )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==LPAREN) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // COMTOR.g:1017:10: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector9066);
                            arguments518=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments518.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // COMTOR.g:1019:9: '.' 'this'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal519=(Token)match(input,DOT,FOLLOW_DOT_in_selector9087); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal519_tree = (CommonTree)adaptor.create(char_literal519);
                    adaptor.addChild(root_0, char_literal519_tree);
                    }
                    string_literal520=(Token)match(input,THIS,FOLLOW_THIS_in_selector9089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal520_tree = (CommonTree)adaptor.create(string_literal520);
                    adaptor.addChild(root_0, string_literal520_tree);
                    }

                    }
                    break;
                case 3 :
                    // COMTOR.g:1020:9: '.' 'super' superSuffix
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal521=(Token)match(input,DOT,FOLLOW_DOT_in_selector9099); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal521_tree = (CommonTree)adaptor.create(char_literal521);
                    adaptor.addChild(root_0, char_literal521_tree);
                    }
                    string_literal522=(Token)match(input,SUPER,FOLLOW_SUPER_in_selector9101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal522_tree = (CommonTree)adaptor.create(string_literal522);
                    adaptor.addChild(root_0, string_literal522_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_selector9111);
                    superSuffix523=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, superSuffix523.getTree());

                    }
                    break;
                case 4 :
                    // COMTOR.g:1022:9: innerCreator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_innerCreator_in_selector9121);
                    innerCreator524=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, innerCreator524.getTree());

                    }
                    break;
                case 5 :
                    // COMTOR.g:1023:9: '[' expression ']'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal525=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_selector9131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal525_tree = (CommonTree)adaptor.create(char_literal525);
                    adaptor.addChild(root_0, char_literal525_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector9133);
                    expression526=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression526.getTree());
                    char_literal527=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_selector9135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal527_tree = (CommonTree)adaptor.create(char_literal527);
                    adaptor.addChild(root_0, char_literal527_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class creator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // COMTOR.g:1026:1: creator : ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator );
    public final COMTORParser.creator_return creator() throws RecognitionException {
        COMTORParser.creator_return retval = new COMTORParser.creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal528=null;
        Token string_literal532=null;
        COMTORParser.nonWildcardTypeArguments_return nonWildcardTypeArguments529 = null;

        COMTORParser.classOrInterfaceType_return classOrInterfaceType530 = null;

        COMTORParser.classCreatorRest_return classCreatorRest531 = null;

        COMTORParser.classOrInterfaceType_return classOrInterfaceType533 = null;

        COMTORParser.classCreatorRest_return classCreatorRest534 = null;

        COMTORParser.arrayCreator_return arrayCreator535 = null;


        CommonTree string_literal528_tree=null;
        CommonTree string_literal532_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // COMTOR.g:1027:5: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator )
            int alt168=3;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==NEW) ) {
                int LA168_1 = input.LA(2);

                if ( (synpred257_COMTOR()) ) {
                    alt168=1;
                }
                else if ( (synpred258_COMTOR()) ) {
                    alt168=2;
                }
                else if ( (true) ) {
                    alt168=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // COMTOR.g:1027:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal528=(Token)match(input,NEW,FOLLOW_NEW_in_creator9155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal528_tree = (CommonTree)adaptor.create(string_literal528);
                    adaptor.addChild(root_0, string_literal528_tree);
                    }
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator9157);
                    nonWildcardTypeArguments529=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments529.getTree());
                    pushFollow(FOLLOW_classOrInterfaceType_in_creator9159);
                    classOrInterfaceType530=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceType530.getTree());
                    pushFollow(FOLLOW_classCreatorRest_in_creator9161);
                    classCreatorRest531=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest531.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:1028:9: 'new' classOrInterfaceType classCreatorRest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal532=(Token)match(input,NEW,FOLLOW_NEW_in_creator9171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal532_tree = (CommonTree)adaptor.create(string_literal532);
                    adaptor.addChild(root_0, string_literal532_tree);
                    }
                    pushFollow(FOLLOW_classOrInterfaceType_in_creator9173);
                    classOrInterfaceType533=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceType533.getTree());
                    pushFollow(FOLLOW_classCreatorRest_in_creator9175);
                    classCreatorRest534=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest534.getTree());

                    }
                    break;
                case 3 :
                    // COMTOR.g:1029:9: arrayCreator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayCreator_in_creator9185);
                    arrayCreator535=arrayCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayCreator535.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class arrayCreator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayCreator"
    // COMTOR.g:1032:1: arrayCreator : ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* );
    public final COMTORParser.arrayCreator_return arrayCreator() throws RecognitionException {
        COMTORParser.arrayCreator_return retval = new COMTORParser.arrayCreator_return();
        retval.start = input.LT(1);
        int arrayCreator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal536=null;
        Token char_literal538=null;
        Token char_literal539=null;
        Token char_literal540=null;
        Token char_literal541=null;
        Token string_literal543=null;
        Token char_literal545=null;
        Token char_literal547=null;
        Token char_literal548=null;
        Token char_literal550=null;
        Token char_literal551=null;
        Token char_literal552=null;
        COMTORParser.createdName_return createdName537 = null;

        COMTORParser.arrayInitializer_return arrayInitializer542 = null;

        COMTORParser.createdName_return createdName544 = null;

        COMTORParser.expression_return expression546 = null;

        COMTORParser.expression_return expression549 = null;


        CommonTree string_literal536_tree=null;
        CommonTree char_literal538_tree=null;
        CommonTree char_literal539_tree=null;
        CommonTree char_literal540_tree=null;
        CommonTree char_literal541_tree=null;
        CommonTree string_literal543_tree=null;
        CommonTree char_literal545_tree=null;
        CommonTree char_literal547_tree=null;
        CommonTree char_literal548_tree=null;
        CommonTree char_literal550_tree=null;
        CommonTree char_literal551_tree=null;
        CommonTree char_literal552_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // COMTOR.g:1033:5: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==NEW) ) {
                int LA172_1 = input.LA(2);

                if ( (synpred260_COMTOR()) ) {
                    alt172=1;
                }
                else if ( (true) ) {
                    alt172=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 172, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    // COMTOR.g:1033:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal536=(Token)match(input,NEW,FOLLOW_NEW_in_arrayCreator9205); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal536_tree = (CommonTree)adaptor.create(string_literal536);
                    adaptor.addChild(root_0, string_literal536_tree);
                    }
                    pushFollow(FOLLOW_createdName_in_arrayCreator9207);
                    createdName537=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName537.getTree());
                    char_literal538=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator9217); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal538_tree = (CommonTree)adaptor.create(char_literal538);
                    adaptor.addChild(root_0, char_literal538_tree);
                    }
                    char_literal539=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator9219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal539_tree = (CommonTree)adaptor.create(char_literal539);
                    adaptor.addChild(root_0, char_literal539_tree);
                    }
                    // COMTOR.g:1035:9: ( '[' ']' )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==LBRACKET) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // COMTOR.g:1035:10: '[' ']'
                    	    {
                    	    char_literal540=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator9230); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal540_tree = (CommonTree)adaptor.create(char_literal540);
                    	    adaptor.addChild(root_0, char_literal540_tree);
                    	    }
                    	    char_literal541=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator9232); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal541_tree = (CommonTree)adaptor.create(char_literal541);
                    	    adaptor.addChild(root_0, char_literal541_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreator9253);
                    arrayInitializer542=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer542.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:1039:9: 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal543=(Token)match(input,NEW,FOLLOW_NEW_in_arrayCreator9264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal543_tree = (CommonTree)adaptor.create(string_literal543);
                    adaptor.addChild(root_0, string_literal543_tree);
                    }
                    pushFollow(FOLLOW_createdName_in_arrayCreator9266);
                    createdName544=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createdName544.getTree());
                    char_literal545=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator9276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal545_tree = (CommonTree)adaptor.create(char_literal545);
                    adaptor.addChild(root_0, char_literal545_tree);
                    }
                    pushFollow(FOLLOW_expression_in_arrayCreator9278);
                    expression546=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression546.getTree());
                    char_literal547=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator9288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal547_tree = (CommonTree)adaptor.create(char_literal547);
                    adaptor.addChild(root_0, char_literal547_tree);
                    }
                    // COMTOR.g:1042:9: ( '[' expression ']' )*
                    loop170:
                    do {
                        int alt170=2;
                        alt170 = dfa170.predict(input);
                        switch (alt170) {
                    	case 1 :
                    	    // COMTOR.g:1042:13: '[' expression ']'
                    	    {
                    	    char_literal548=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator9302); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal548_tree = (CommonTree)adaptor.create(char_literal548);
                    	    adaptor.addChild(root_0, char_literal548_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_arrayCreator9304);
                    	    expression549=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression549.getTree());
                    	    char_literal550=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator9318); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal550_tree = (CommonTree)adaptor.create(char_literal550);
                    	    adaptor.addChild(root_0, char_literal550_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);

                    // COMTOR.g:1045:9: ( '[' ']' )*
                    loop171:
                    do {
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==LBRACKET) ) {
                            int LA171_2 = input.LA(2);

                            if ( (LA171_2==RBRACKET) ) {
                                alt171=1;
                            }


                        }


                        switch (alt171) {
                    	case 1 :
                    	    // COMTOR.g:1045:10: '[' ']'
                    	    {
                    	    char_literal551=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_arrayCreator9340); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal551_tree = (CommonTree)adaptor.create(char_literal551);
                    	    adaptor.addChild(root_0, char_literal551_tree);
                    	    }
                    	    char_literal552=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_arrayCreator9342); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal552_tree = (CommonTree)adaptor.create(char_literal552);
                    	    adaptor.addChild(root_0, char_literal552_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, arrayCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayCreator"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // COMTOR.g:1049:1: variableInitializer : ( arrayInitializer | expression );
    public final COMTORParser.variableInitializer_return variableInitializer() throws RecognitionException {
        COMTORParser.variableInitializer_return retval = new COMTORParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.arrayInitializer_return arrayInitializer553 = null;

        COMTORParser.expression_return expression554 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // COMTOR.g:1050:5: ( arrayInitializer | expression )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==LBRACE) ) {
                alt173=1;
            }
            else if ( ((LA173_0>=IDENTIFIER && LA173_0<=NULL)||LA173_0==BOOLEAN||LA173_0==BYTE||LA173_0==CHAR||LA173_0==DOUBLE||LA173_0==FLOAT||LA173_0==INT||LA173_0==LONG||LA173_0==NEW||LA173_0==SHORT||LA173_0==SUPER||LA173_0==THIS||LA173_0==VOID||LA173_0==LPAREN||(LA173_0>=BANG && LA173_0<=TILDE)||(LA173_0>=PLUSPLUS && LA173_0<=SUB)) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // COMTOR.g:1050:9: arrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer9373);
                    arrayInitializer553=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer553.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:1051:9: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer9383);
                    expression554=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression554.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // COMTOR.g:1054:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' -> ( variableInitializer )* ;
    public final COMTORParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        COMTORParser.arrayInitializer_return retval = new COMTORParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal555=null;
        Token char_literal557=null;
        Token char_literal559=null;
        Token char_literal560=null;
        COMTORParser.variableInitializer_return variableInitializer556 = null;

        COMTORParser.variableInitializer_return variableInitializer558 = null;


        CommonTree char_literal555_tree=null;
        CommonTree char_literal557_tree=null;
        CommonTree char_literal559_tree=null;
        CommonTree char_literal560_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // COMTOR.g:1055:5: ( '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' -> ( variableInitializer )* )
            // COMTOR.g:1055:9: '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}'
            {
            char_literal555=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_arrayInitializer9403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(char_literal555);

            // COMTOR.g:1056:13: ( variableInitializer ( ',' variableInitializer )* )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( ((LA175_0>=IDENTIFIER && LA175_0<=NULL)||LA175_0==BOOLEAN||LA175_0==BYTE||LA175_0==CHAR||LA175_0==DOUBLE||LA175_0==FLOAT||LA175_0==INT||LA175_0==LONG||LA175_0==NEW||LA175_0==SHORT||LA175_0==SUPER||LA175_0==THIS||LA175_0==VOID||LA175_0==LPAREN||LA175_0==LBRACE||(LA175_0>=BANG && LA175_0<=TILDE)||(LA175_0>=PLUSPLUS && LA175_0<=SUB)) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // COMTOR.g:1056:14: variableInitializer ( ',' variableInitializer )*
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer9419);
                    variableInitializer556=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer556.getTree());
                    // COMTOR.g:1057:17: ( ',' variableInitializer )*
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==COMMA) ) {
                            int LA174_1 = input.LA(2);

                            if ( ((LA174_1>=IDENTIFIER && LA174_1<=NULL)||LA174_1==BOOLEAN||LA174_1==BYTE||LA174_1==CHAR||LA174_1==DOUBLE||LA174_1==FLOAT||LA174_1==INT||LA174_1==LONG||LA174_1==NEW||LA174_1==SHORT||LA174_1==SUPER||LA174_1==THIS||LA174_1==VOID||LA174_1==LPAREN||LA174_1==LBRACE||(LA174_1>=BANG && LA174_1<=TILDE)||(LA174_1>=PLUSPLUS && LA174_1<=SUB)) ) {
                                alt174=1;
                            }


                        }


                        switch (alt174) {
                    	case 1 :
                    	    // COMTOR.g:1057:18: ',' variableInitializer
                    	    {
                    	    char_literal557=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer9438); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal557);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer9440);
                    	    variableInitializer558=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer558.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop174;
                        }
                    } while (true);


                    }
                    break;

            }

            // COMTOR.g:1060:13: ( ',' )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==COMMA) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // COMTOR.g:1060:14: ','
                    {
                    char_literal559=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayInitializer9490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal559);


                    }
                    break;

            }

            char_literal560=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_arrayInitializer9503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(char_literal560);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1062:10: -> ( variableInitializer )*
            {
                // COMTOR.g:1062:13: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class createdName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // COMTOR.g:1066:1: createdName : ( classOrInterfaceType | primitiveType );
    public final COMTORParser.createdName_return createdName() throws RecognitionException {
        COMTORParser.createdName_return retval = new COMTORParser.createdName_return();
        retval.start = input.LT(1);
        int createdName_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.classOrInterfaceType_return classOrInterfaceType561 = null;

        COMTORParser.primitiveType_return primitiveType562 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // COMTOR.g:1067:5: ( classOrInterfaceType | primitiveType )
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==IDENTIFIER) ) {
                alt177=1;
            }
            else if ( (LA177_0==BOOLEAN||LA177_0==BYTE||LA177_0==CHAR||LA177_0==DOUBLE||LA177_0==FLOAT||LA177_0==INT||LA177_0==LONG||LA177_0==SHORT) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    // COMTOR.g:1067:9: classOrInterfaceType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_createdName9551);
                    classOrInterfaceType561=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceType561.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:1068:9: primitiveType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName9561);
                    primitiveType562=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType562.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, createdName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // COMTOR.g:1071:1: innerCreator : '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest ;
    public final COMTORParser.innerCreator_return innerCreator() throws RecognitionException {
        COMTORParser.innerCreator_return retval = new COMTORParser.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal563=null;
        Token string_literal564=null;
        Token IDENTIFIER566=null;
        COMTORParser.nonWildcardTypeArguments_return nonWildcardTypeArguments565 = null;

        COMTORParser.typeArguments_return typeArguments567 = null;

        COMTORParser.classCreatorRest_return classCreatorRest568 = null;


        CommonTree char_literal563_tree=null;
        CommonTree string_literal564_tree=null;
        CommonTree IDENTIFIER566_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // COMTOR.g:1072:5: ( '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest )
            // COMTOR.g:1072:9: '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal563=(Token)match(input,DOT,FOLLOW_DOT_in_innerCreator9582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal563_tree = (CommonTree)adaptor.create(char_literal563);
            adaptor.addChild(root_0, char_literal563_tree);
            }
            string_literal564=(Token)match(input,NEW,FOLLOW_NEW_in_innerCreator9584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal564_tree = (CommonTree)adaptor.create(string_literal564);
            adaptor.addChild(root_0, string_literal564_tree);
            }
            // COMTOR.g:1073:9: ( nonWildcardTypeArguments )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==LT) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // COMTOR.g:1073:10: nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_innerCreator9595);
                    nonWildcardTypeArguments565=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments565.getTree());

                    }
                    break;

            }

            IDENTIFIER566=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_innerCreator9616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER566_tree = (CommonTree)adaptor.create(IDENTIFIER566);
            adaptor.addChild(root_0, IDENTIFIER566_tree);
            }
            // COMTOR.g:1076:9: ( typeArguments )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==LT) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // COMTOR.g:1076:10: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_innerCreator9627);
                    typeArguments567=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeArguments567.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classCreatorRest_in_innerCreator9648);
            classCreatorRest568=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classCreatorRest568.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // COMTOR.g:1082:1: classCreatorRest : arguments ( classBody )? ;
    public final COMTORParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        COMTORParser.classCreatorRest_return retval = new COMTORParser.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        CommonTree root_0 = null;

        COMTORParser.arguments_return arguments569 = null;

        COMTORParser.classBody_return classBody570 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // COMTOR.g:1083:5: ( arguments ( classBody )? )
            // COMTOR.g:1083:9: arguments ( classBody )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest9669);
            arguments569=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments569.getTree());
            // COMTOR.g:1084:9: ( classBody )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==LBRACE) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // COMTOR.g:1084:10: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest9680);
                    classBody570=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBody570.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // COMTOR.g:1089:1: nonWildcardTypeArguments : '<' typeList '>' ;
    public final COMTORParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        COMTORParser.nonWildcardTypeArguments_return retval = new COMTORParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal571=null;
        Token char_literal573=null;
        COMTORParser.typeList_return typeList572 = null;


        CommonTree char_literal571_tree=null;
        CommonTree char_literal573_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // COMTOR.g:1090:5: ( '<' typeList '>' )
            // COMTOR.g:1090:9: '<' typeList '>'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal571=(Token)match(input,LT,FOLLOW_LT_in_nonWildcardTypeArguments9712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal571_tree = (CommonTree)adaptor.create(char_literal571);
            adaptor.addChild(root_0, char_literal571_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments9714);
            typeList572=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeList572.getTree());
            char_literal573=(Token)match(input,GT,FOLLOW_GT_in_nonWildcardTypeArguments9724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal573_tree = (CommonTree)adaptor.create(char_literal573);
            adaptor.addChild(root_0, char_literal573_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // COMTOR.g:1094:1: arguments : '(' ( expressionList )? ')' ;
    public final COMTORParser.arguments_return arguments() throws RecognitionException {
        COMTORParser.arguments_return retval = new COMTORParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal574=null;
        Token char_literal576=null;
        COMTORParser.expressionList_return expressionList575 = null;


        CommonTree char_literal574_tree=null;
        CommonTree char_literal576_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // COMTOR.g:1095:5: ( '(' ( expressionList )? ')' )
            // COMTOR.g:1095:9: '(' ( expressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal574=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_arguments9744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal574_tree = (CommonTree)adaptor.create(char_literal574);
            adaptor.addChild(root_0, char_literal574_tree);
            }
            // COMTOR.g:1095:13: ( expressionList )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( ((LA181_0>=IDENTIFIER && LA181_0<=NULL)||LA181_0==BOOLEAN||LA181_0==BYTE||LA181_0==CHAR||LA181_0==DOUBLE||LA181_0==FLOAT||LA181_0==INT||LA181_0==LONG||LA181_0==NEW||LA181_0==SHORT||LA181_0==SUPER||LA181_0==THIS||LA181_0==VOID||LA181_0==LPAREN||(LA181_0>=BANG && LA181_0<=TILDE)||(LA181_0>=PLUSPLUS && LA181_0<=SUB)) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // COMTOR.g:1095:14: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments9747);
                    expressionList575=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList575.getTree());

                    }
                    break;

            }

            char_literal576=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arguments9760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal576_tree = (CommonTree)adaptor.create(char_literal576);
            adaptor.addChild(root_0, char_literal576_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // COMTOR.g:1099:1: literal : ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | UNICODECHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL );
    public final COMTORParser.literal_return literal() throws RecognitionException {
        COMTORParser.literal_return retval = new COMTORParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set577=null;

        CommonTree set577_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // COMTOR.g:1100:5: ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | UNICODECHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL )
            // COMTOR.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set577=(Token)input.LT(1);
            if ( (input.LA(1)>=INTLITERAL && input.LA(1)<=NULL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set577));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class classHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classHeader"
    // COMTOR.g:1112:1: classHeader : modifiers 'class' IDENTIFIER ;
    public final COMTORParser.classHeader_return classHeader() throws RecognitionException {
        COMTORParser.classHeader_return retval = new COMTORParser.classHeader_return();
        retval.start = input.LT(1);
        int classHeader_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal579=null;
        Token IDENTIFIER580=null;
        COMTORParser.modifiers_return modifiers578 = null;


        CommonTree string_literal579_tree=null;
        CommonTree IDENTIFIER580_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // COMTOR.g:1117:5: ( modifiers 'class' IDENTIFIER )
            // COMTOR.g:1117:9: modifiers 'class' IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_classHeader9892);
            modifiers578=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers578.getTree());
            string_literal579=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHeader9894); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal579_tree = (CommonTree)adaptor.create(string_literal579);
            adaptor.addChild(root_0, string_literal579_tree);
            }
            IDENTIFIER580=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_classHeader9896); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER580_tree = (CommonTree)adaptor.create(IDENTIFIER580);
            adaptor.addChild(root_0, IDENTIFIER580_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, classHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classHeader"

    public static class enumHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumHeader"
    // COMTOR.g:1120:1: enumHeader : modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER ;
    public final COMTORParser.enumHeader_return enumHeader() throws RecognitionException {
        COMTORParser.enumHeader_return retval = new COMTORParser.enumHeader_return();
        retval.start = input.LT(1);
        int enumHeader_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set582=null;
        Token IDENTIFIER583=null;
        COMTORParser.modifiers_return modifiers581 = null;


        CommonTree set582_tree=null;
        CommonTree IDENTIFIER583_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // COMTOR.g:1121:5: ( modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER )
            // COMTOR.g:1121:9: modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_enumHeader9916);
            modifiers581=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers581.getTree());
            set582=(Token)input.LT(1);
            if ( input.LA(1)==IDENTIFIER||input.LA(1)==ENUM ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set582));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            IDENTIFIER583=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_enumHeader9924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER583_tree = (CommonTree)adaptor.create(IDENTIFIER583);
            adaptor.addChild(root_0, IDENTIFIER583_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, enumHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumHeader"

    public static class interfaceHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceHeader"
    // COMTOR.g:1124:1: interfaceHeader : modifiers 'interface' IDENTIFIER ;
    public final COMTORParser.interfaceHeader_return interfaceHeader() throws RecognitionException {
        COMTORParser.interfaceHeader_return retval = new COMTORParser.interfaceHeader_return();
        retval.start = input.LT(1);
        int interfaceHeader_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal585=null;
        Token IDENTIFIER586=null;
        COMTORParser.modifiers_return modifiers584 = null;


        CommonTree string_literal585_tree=null;
        CommonTree IDENTIFIER586_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // COMTOR.g:1125:5: ( modifiers 'interface' IDENTIFIER )
            // COMTOR.g:1125:9: modifiers 'interface' IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_interfaceHeader9944);
            modifiers584=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers584.getTree());
            string_literal585=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceHeader9946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal585_tree = (CommonTree)adaptor.create(string_literal585);
            adaptor.addChild(root_0, string_literal585_tree);
            }
            IDENTIFIER586=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_interfaceHeader9948); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER586_tree = (CommonTree)adaptor.create(IDENTIFIER586);
            adaptor.addChild(root_0, IDENTIFIER586_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, interfaceHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceHeader"

    public static class annotationHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationHeader"
    // COMTOR.g:1128:1: annotationHeader : modifiers '@' 'interface' IDENTIFIER ;
    public final COMTORParser.annotationHeader_return annotationHeader() throws RecognitionException {
        COMTORParser.annotationHeader_return retval = new COMTORParser.annotationHeader_return();
        retval.start = input.LT(1);
        int annotationHeader_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal588=null;
        Token string_literal589=null;
        Token IDENTIFIER590=null;
        COMTORParser.modifiers_return modifiers587 = null;


        CommonTree char_literal588_tree=null;
        CommonTree string_literal589_tree=null;
        CommonTree IDENTIFIER590_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // COMTOR.g:1129:5: ( modifiers '@' 'interface' IDENTIFIER )
            // COMTOR.g:1129:9: modifiers '@' 'interface' IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_annotationHeader9968);
            modifiers587=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers587.getTree());
            char_literal588=(Token)match(input,MONKEYS_AT,FOLLOW_MONKEYS_AT_in_annotationHeader9970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal588_tree = (CommonTree)adaptor.create(char_literal588);
            adaptor.addChild(root_0, char_literal588_tree);
            }
            string_literal589=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_annotationHeader9972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal589_tree = (CommonTree)adaptor.create(string_literal589);
            adaptor.addChild(root_0, string_literal589_tree);
            }
            IDENTIFIER590=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_annotationHeader9974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER590_tree = (CommonTree)adaptor.create(IDENTIFIER590);
            adaptor.addChild(root_0, IDENTIFIER590_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, annotationHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationHeader"

    public static class typeHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeHeader"
    // COMTOR.g:1132:1: typeHeader : modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER ;
    public final COMTORParser.typeHeader_return typeHeader() throws RecognitionException {
        COMTORParser.typeHeader_return retval = new COMTORParser.typeHeader_return();
        retval.start = input.LT(1);
        int typeHeader_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal592=null;
        Token string_literal593=null;
        Token char_literal594=null;
        Token string_literal595=null;
        Token IDENTIFIER596=null;
        COMTORParser.modifiers_return modifiers591 = null;


        CommonTree string_literal592_tree=null;
        CommonTree string_literal593_tree=null;
        CommonTree char_literal594_tree=null;
        CommonTree string_literal595_tree=null;
        CommonTree IDENTIFIER596_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // COMTOR.g:1133:5: ( modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER )
            // COMTOR.g:1133:9: modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_typeHeader9994);
            modifiers591=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers591.getTree());
            // COMTOR.g:1133:19: ( 'class' | 'enum' | ( ( '@' )? 'interface' ) )
            int alt183=3;
            switch ( input.LA(1) ) {
            case CLASS:
                {
                alt183=1;
                }
                break;
            case ENUM:
                {
                alt183=2;
                }
                break;
            case INTERFACE:
            case MONKEYS_AT:
                {
                alt183=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }

            switch (alt183) {
                case 1 :
                    // COMTOR.g:1133:20: 'class'
                    {
                    string_literal592=(Token)match(input,CLASS,FOLLOW_CLASS_in_typeHeader9997); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal592_tree = (CommonTree)adaptor.create(string_literal592);
                    adaptor.addChild(root_0, string_literal592_tree);
                    }

                    }
                    break;
                case 2 :
                    // COMTOR.g:1133:28: 'enum'
                    {
                    string_literal593=(Token)match(input,ENUM,FOLLOW_ENUM_in_typeHeader9999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal593_tree = (CommonTree)adaptor.create(string_literal593);
                    adaptor.addChild(root_0, string_literal593_tree);
                    }

                    }
                    break;
                case 3 :
                    // COMTOR.g:1133:35: ( ( '@' )? 'interface' )
                    {
                    // COMTOR.g:1133:35: ( ( '@' )? 'interface' )
                    // COMTOR.g:1133:36: ( '@' )? 'interface'
                    {
                    // COMTOR.g:1133:36: ( '@' )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==MONKEYS_AT) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // COMTOR.g:0:0: '@'
                            {
                            char_literal594=(Token)match(input,MONKEYS_AT,FOLLOW_MONKEYS_AT_in_typeHeader10002); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal594_tree = (CommonTree)adaptor.create(char_literal594);
                            adaptor.addChild(root_0, char_literal594_tree);
                            }

                            }
                            break;

                    }

                    string_literal595=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_typeHeader10006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal595_tree = (CommonTree)adaptor.create(string_literal595);
                    adaptor.addChild(root_0, string_literal595_tree);
                    }

                    }


                    }
                    break;

            }

            IDENTIFIER596=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_typeHeader10010); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER596_tree = (CommonTree)adaptor.create(IDENTIFIER596);
            adaptor.addChild(root_0, IDENTIFIER596_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, typeHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeHeader"

    public static class methodHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodHeader"
    // COMTOR.g:1136:1: methodHeader : modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' ;
    public final COMTORParser.methodHeader_return methodHeader() throws RecognitionException {
        COMTORParser.methodHeader_return retval = new COMTORParser.methodHeader_return();
        retval.start = input.LT(1);
        int methodHeader_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal600=null;
        Token IDENTIFIER601=null;
        Token char_literal602=null;
        COMTORParser.modifiers_return modifiers597 = null;

        COMTORParser.typeParameters_return typeParameters598 = null;

        COMTORParser.type_return type599 = null;


        CommonTree string_literal600_tree=null;
        CommonTree IDENTIFIER601_tree=null;
        CommonTree char_literal602_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // COMTOR.g:1137:5: ( modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' )
            // COMTOR.g:1137:9: modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '('
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_methodHeader10030);
            modifiers597=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers597.getTree());
            // COMTOR.g:1137:19: ( typeParameters )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==LT) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // COMTOR.g:0:0: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_methodHeader10032);
                    typeParameters598=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters598.getTree());

                    }
                    break;

            }

            // COMTOR.g:1137:35: ( type | 'void' )?
            int alt185=3;
            switch ( input.LA(1) ) {
                case IDENTIFIER:
                    {
                    int LA185_1 = input.LA(2);

                    if ( (LA185_1==IDENTIFIER||LA185_1==LBRACKET||LA185_1==DOT||LA185_1==LT) ) {
                        alt185=1;
                    }
                    }
                    break;
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    {
                    alt185=1;
                    }
                    break;
                case VOID:
                    {
                    alt185=2;
                    }
                    break;
            }

            switch (alt185) {
                case 1 :
                    // COMTOR.g:1137:36: type
                    {
                    pushFollow(FOLLOW_type_in_methodHeader10036);
                    type599=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type599.getTree());

                    }
                    break;
                case 2 :
                    // COMTOR.g:1137:41: 'void'
                    {
                    string_literal600=(Token)match(input,VOID,FOLLOW_VOID_in_methodHeader10038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal600_tree = (CommonTree)adaptor.create(string_literal600);
                    adaptor.addChild(root_0, string_literal600_tree);
                    }

                    }
                    break;

            }

            IDENTIFIER601=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_methodHeader10042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER601_tree = (CommonTree)adaptor.create(IDENTIFIER601);
            adaptor.addChild(root_0, IDENTIFIER601_tree);
            }
            char_literal602=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodHeader10044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal602_tree = (CommonTree)adaptor.create(char_literal602);
            adaptor.addChild(root_0, char_literal602_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, methodHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodHeader"

    public static class fieldHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldHeader"
    // COMTOR.g:1140:1: fieldHeader : modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
    public final COMTORParser.fieldHeader_return fieldHeader() throws RecognitionException {
        COMTORParser.fieldHeader_return retval = new COMTORParser.fieldHeader_return();
        retval.start = input.LT(1);
        int fieldHeader_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER605=null;
        Token char_literal606=null;
        Token char_literal607=null;
        Token set608=null;
        COMTORParser.modifiers_return modifiers603 = null;

        COMTORParser.type_return type604 = null;


        CommonTree IDENTIFIER605_tree=null;
        CommonTree char_literal606_tree=null;
        CommonTree char_literal607_tree=null;
        CommonTree set608_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // COMTOR.g:1141:5: ( modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
            // COMTOR.g:1141:9: modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_fieldHeader10064);
            modifiers603=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, modifiers603.getTree());
            pushFollow(FOLLOW_type_in_fieldHeader10066);
            type604=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type604.getTree());
            IDENTIFIER605=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_fieldHeader10068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER605_tree = (CommonTree)adaptor.create(IDENTIFIER605);
            adaptor.addChild(root_0, IDENTIFIER605_tree);
            }
            // COMTOR.g:1141:35: ( '[' ']' )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==LBRACKET) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // COMTOR.g:1141:36: '[' ']'
            	    {
            	    char_literal606=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_fieldHeader10071); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal606_tree = (CommonTree)adaptor.create(char_literal606);
            	    adaptor.addChild(root_0, char_literal606_tree);
            	    }
            	    char_literal607=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_fieldHeader10072); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal607_tree = (CommonTree)adaptor.create(char_literal607);
            	    adaptor.addChild(root_0, char_literal607_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);

            set608=(Token)input.LT(1);
            if ( (input.LA(1)>=SEMI && input.LA(1)<=COMMA)||input.LA(1)==EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set608));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, fieldHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldHeader"

    public static class localVariableHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableHeader"
    // COMTOR.g:1144:1: localVariableHeader : variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
    public final COMTORParser.localVariableHeader_return localVariableHeader() throws RecognitionException {
        COMTORParser.localVariableHeader_return retval = new COMTORParser.localVariableHeader_return();
        retval.start = input.LT(1);
        int localVariableHeader_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENTIFIER611=null;
        Token char_literal612=null;
        Token char_literal613=null;
        Token set614=null;
        COMTORParser.variableModifiers_return variableModifiers609 = null;

        COMTORParser.type_return type610 = null;


        CommonTree IDENTIFIER611_tree=null;
        CommonTree char_literal612_tree=null;
        CommonTree char_literal613_tree=null;
        CommonTree set614_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // COMTOR.g:1145:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
            // COMTOR.g:1145:9: variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_localVariableHeader10102);
            variableModifiers609=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifiers609.getTree());
            pushFollow(FOLLOW_type_in_localVariableHeader10104);
            type610=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type610.getTree());
            IDENTIFIER611=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_localVariableHeader10106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENTIFIER611_tree = (CommonTree)adaptor.create(IDENTIFIER611);
            adaptor.addChild(root_0, IDENTIFIER611_tree);
            }
            // COMTOR.g:1145:43: ( '[' ']' )*
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==LBRACKET) ) {
                    alt187=1;
                }


                switch (alt187) {
            	case 1 :
            	    // COMTOR.g:1145:44: '[' ']'
            	    {
            	    char_literal612=(Token)match(input,LBRACKET,FOLLOW_LBRACKET_in_localVariableHeader10109); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal612_tree = (CommonTree)adaptor.create(char_literal612);
            	    adaptor.addChild(root_0, char_literal612_tree);
            	    }
            	    char_literal613=(Token)match(input,RBRACKET,FOLLOW_RBRACKET_in_localVariableHeader10110); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal613_tree = (CommonTree)adaptor.create(char_literal613);
            	    adaptor.addChild(root_0, char_literal613_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);

            set614=(Token)input.LT(1);
            if ( (input.LA(1)>=SEMI && input.LA(1)<=COMMA)||input.LA(1)==EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set614));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, localVariableHeader_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableHeader"

    public static class comments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comments"
    // COMTOR.g:1148:1: comments : ( COMMENT -> ^( COMMENT_STATEMENT COMMENT ) | LINE_COMMENT -> ^( COMMENT_STATEMENT LINE_COMMENT ) );
    public final COMTORParser.comments_return comments() throws RecognitionException {
        COMTORParser.comments_return retval = new COMTORParser.comments_return();
        retval.start = input.LT(1);
        int comments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMENT615=null;
        Token LINE_COMMENT616=null;

        CommonTree COMMENT615_tree=null;
        CommonTree LINE_COMMENT616_tree=null;
        RewriteRuleTokenStream stream_LINE_COMMENT=new RewriteRuleTokenStream(adaptor,"token LINE_COMMENT");
        RewriteRuleTokenStream stream_COMMENT=new RewriteRuleTokenStream(adaptor,"token COMMENT");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // COMTOR.g:1149:5: ( COMMENT -> ^( COMMENT_STATEMENT COMMENT ) | LINE_COMMENT -> ^( COMMENT_STATEMENT LINE_COMMENT ) )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==COMMENT) ) {
                alt188=1;
            }
            else if ( (LA188_0==LINE_COMMENT) ) {
                alt188=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }
            switch (alt188) {
                case 1 :
                    // COMTOR.g:1149:9: COMMENT
                    {
                    COMMENT615=(Token)match(input,COMMENT,FOLLOW_COMMENT_in_comments10139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMENT.add(COMMENT615);



                    // AST REWRITE
                    // elements: COMMENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1149:17: -> ^( COMMENT_STATEMENT COMMENT )
                    {
                        // COMTOR.g:1149:20: ^( COMMENT_STATEMENT COMMENT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMENT_STATEMENT, "COMMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_COMMENT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // COMTOR.g:1150:9: LINE_COMMENT
                    {
                    LINE_COMMENT616=(Token)match(input,LINE_COMMENT,FOLLOW_LINE_COMMENT_in_comments10157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LINE_COMMENT.add(LINE_COMMENT616);



                    // AST REWRITE
                    // elements: LINE_COMMENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1150:22: -> ^( COMMENT_STATEMENT LINE_COMMENT )
                    {
                        // COMTOR.g:1150:25: ^( COMMENT_STATEMENT LINE_COMMENT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMENT_STATEMENT, "COMMENT_STATEMENT"), root_1);

                        adaptor.addChild(root_1, stream_LINE_COMMENT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, comments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comments"

    // $ANTLR start synpred1_COMTOR
    public final void synpred1_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:75:6: ( annotations )
        // COMTOR.g:75:6: annotations
        {
        pushFollow(FOLLOW_annotations_in_synpred1_COMTOR197);
        annotations();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_COMTOR

    // $ANTLR start synpred3_COMTOR
    public final void synpred3_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:75:6: ( ( annotations )? importDeclarations ( typeDeclaration )* )
        // COMTOR.g:75:6: ( annotations )? importDeclarations ( typeDeclaration )*
        {
        // COMTOR.g:75:6: ( annotations )?
        int alt189=2;
        int LA189_0 = input.LA(1);

        if ( (LA189_0==MONKEYS_AT) ) {
            int LA189_1 = input.LA(2);

            if ( (LA189_1==IDENTIFIER) ) {
                int LA189_3 = input.LA(3);

                if ( (synpred1_COMTOR()) ) {
                    alt189=1;
                }
            }
        }
        switch (alt189) {
            case 1 :
                // COMTOR.g:0:0: annotations
                {
                pushFollow(FOLLOW_annotations_in_synpred3_COMTOR197);
                annotations();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_importDeclarations_in_synpred3_COMTOR208);
        importDeclarations();

        state._fsp--;
        if (state.failed) return ;
        // COMTOR.g:77:9: ( typeDeclaration )*
        loop190:
        do {
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==ABSTRACT||LA190_0==CLASS||LA190_0==ENUM||LA190_0==FINAL||LA190_0==INTERFACE||LA190_0==NATIVE||(LA190_0>=PRIVATE && LA190_0<=PUBLIC)||(LA190_0>=STATIC && LA190_0<=STRICTFP)||LA190_0==SYNCHRONIZED||LA190_0==TRANSIENT||LA190_0==VOLATILE||LA190_0==SEMI||LA190_0==MONKEYS_AT) ) {
                alt190=1;
            }


            switch (alt190) {
        	case 1 :
        	    // COMTOR.g:77:10: typeDeclaration
        	    {
        	    pushFollow(FOLLOW_typeDeclaration_in_synpred3_COMTOR219);
        	    typeDeclaration();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop190;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred3_COMTOR

    // $ANTLR start synpred14_COMTOR
    public final void synpred14_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:130:9: ( classDeclaration )
        // COMTOR.g:130:9: classDeclaration
        {
        pushFollow(FOLLOW_classDeclaration_in_synpred14_COMTOR702);
        classDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_COMTOR

    // $ANTLR start synpred30_COMTOR
    public final void synpred30_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:170:9: ( normalClassDeclaration )
        // COMTOR.g:170:9: normalClassDeclaration
        {
        pushFollow(FOLLOW_normalClassDeclaration_in_synpred30_COMTOR1039);
        normalClassDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_COMTOR

    // $ANTLR start synpred47_COMTOR
    public final void synpred47_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:251:9: ( normalInterfaceDeclaration )
        // COMTOR.g:251:9: normalInterfaceDeclaration
        {
        pushFollow(FOLLOW_normalInterfaceDeclaration_in_synpred47_COMTOR1748);
        normalInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_COMTOR

    // $ANTLR start synpred57_COMTOR
    public final void synpred57_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:297:10: ( fieldDeclaration )
        // COMTOR.g:297:10: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred57_COMTOR2167);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_COMTOR

    // $ANTLR start synpred58_COMTOR
    public final void synpred58_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:298:10: ( methodDeclaration )
        // COMTOR.g:298:10: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred58_COMTOR2178);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_COMTOR

    // $ANTLR start synpred59_COMTOR
    public final void synpred59_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:299:10: ( classDeclaration )
        // COMTOR.g:299:10: classDeclaration
        {
        pushFollow(FOLLOW_classDeclaration_in_synpred59_COMTOR2189);
        classDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_COMTOR

    // $ANTLR start synpred63_COMTOR
    public final void synpred63_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:320:10: ( explicitConstructorInvocation )
        // COMTOR.g:320:10: explicitConstructorInvocation
        {
        pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred63_COMTOR2332);
        explicitConstructorInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_COMTOR

    // $ANTLR start synpred65_COMTOR
    public final void synpred65_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:312:10: ( ( modifiers )? ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' )
        // COMTOR.g:312:10: ( modifiers )? ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
        {
        // COMTOR.g:312:10: ( modifiers )?
        int alt193=2;
        int LA193_0 = input.LA(1);

        if ( (LA193_0==ABSTRACT||LA193_0==FINAL||LA193_0==NATIVE||(LA193_0>=PRIVATE && LA193_0<=PUBLIC)||(LA193_0>=STATIC && LA193_0<=STRICTFP)||LA193_0==SYNCHRONIZED||LA193_0==TRANSIENT||LA193_0==VOLATILE||LA193_0==MONKEYS_AT) ) {
            alt193=1;
        }
        switch (alt193) {
            case 1 :
                // COMTOR.g:0:0: modifiers
                {
                pushFollow(FOLLOW_modifiers_in_synpred65_COMTOR2243);
                modifiers();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // COMTOR.g:313:9: ( typeParameters )?
        int alt194=2;
        int LA194_0 = input.LA(1);

        if ( (LA194_0==LT) ) {
            alt194=1;
        }
        switch (alt194) {
            case 1 :
                // COMTOR.g:313:10: typeParameters
                {
                pushFollow(FOLLOW_typeParameters_in_synpred65_COMTOR2255);
                typeParameters();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred65_COMTOR2276); if (state.failed) return ;
        pushFollow(FOLLOW_formalParameters_in_synpred65_COMTOR2286);
        formalParameters();

        state._fsp--;
        if (state.failed) return ;
        // COMTOR.g:317:9: ( 'throws' qualifiedNameList )?
        int alt195=2;
        int LA195_0 = input.LA(1);

        if ( (LA195_0==THROWS) ) {
            alt195=1;
        }
        switch (alt195) {
            case 1 :
                // COMTOR.g:317:10: 'throws' qualifiedNameList
                {
                match(input,THROWS,FOLLOW_THROWS_in_synpred65_COMTOR2297); if (state.failed) return ;
                pushFollow(FOLLOW_qualifiedNameList_in_synpred65_COMTOR2299);
                qualifiedNameList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,LBRACE,FOLLOW_LBRACE_in_synpred65_COMTOR2320); if (state.failed) return ;
        // COMTOR.g:320:9: ( explicitConstructorInvocation )?
        int alt196=2;
        alt196 = dfa196.predict(input);
        switch (alt196) {
            case 1 :
                // COMTOR.g:320:10: explicitConstructorInvocation
                {
                pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred65_COMTOR2332);
                explicitConstructorInvocation();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // COMTOR.g:322:9: ( blockStatement )*
        loop197:
        do {
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==EOF||(LA197_0>=IDENTIFIER && LA197_0<=NULL)||(LA197_0>=ABSTRACT && LA197_0<=BYTE)||(LA197_0>=CHAR && LA197_0<=CLASS)||LA197_0==CONTINUE||(LA197_0>=DO && LA197_0<=DOUBLE)||LA197_0==ENUM||LA197_0==FINAL||(LA197_0>=FLOAT && LA197_0<=FOR)||LA197_0==IF||(LA197_0>=INT && LA197_0<=THROW)||(LA197_0>=TRANSIENT && LA197_0<=LPAREN)||LA197_0==LBRACE||LA197_0==SEMI||(LA197_0>=BANG && LA197_0<=TILDE)||(LA197_0>=PLUSPLUS && LA197_0<=SUB)||LA197_0==MONKEYS_AT) ) {
                alt197=1;
            }


            switch (alt197) {
        	case 1 :
        	    // COMTOR.g:322:10: blockStatement
        	    {
        	    pushFollow(FOLLOW_blockStatement_in_synpred65_COMTOR2354);
        	    blockStatement();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop197;
            }
        } while (true);

        match(input,RBRACE,FOLLOW_RBRACE_in_synpred65_COMTOR2375); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_COMTOR

    // $ANTLR start synpred71_COMTOR
    public final void synpred71_COMTOR_fragment() throws RecognitionException {   
        Token v=null;
        COMTORParser.type_return t = null;


        // COMTOR.g:328:6: ( ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) )
        // COMTOR.g:328:6: ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' )
        {
        // COMTOR.g:328:6: ( typeParameters )?
        int alt198=2;
        int LA198_0 = input.LA(1);

        if ( (LA198_0==LT) ) {
            alt198=1;
        }
        switch (alt198) {
            case 1 :
                // COMTOR.g:328:7: typeParameters
                {
                pushFollow(FOLLOW_typeParameters_in_synpred71_COMTOR2453);
                typeParameters();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // COMTOR.g:329:6: (t= type | v= 'void' )
        int alt199=2;
        int LA199_0 = input.LA(1);

        if ( (LA199_0==IDENTIFIER||LA199_0==BOOLEAN||LA199_0==BYTE||LA199_0==CHAR||LA199_0==DOUBLE||LA199_0==FLOAT||LA199_0==INT||LA199_0==LONG||LA199_0==SHORT) ) {
            alt199=1;
        }
        else if ( (LA199_0==VOID) ) {
            alt199=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 199, 0, input);

            throw nvae;
        }
        switch (alt199) {
            case 1 :
                // COMTOR.g:329:7: t= type
                {
                pushFollow(FOLLOW_type_in_synpred71_COMTOR2465);
                t=type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // COMTOR.g:330:10: v= 'void'
                {
                v=(Token)match(input,VOID,FOLLOW_VOID_in_synpred71_COMTOR2478); if (state.failed) return ;

                }
                break;

        }

        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred71_COMTOR2498); if (state.failed) return ;
        pushFollow(FOLLOW_formalParameters_in_synpred71_COMTOR2508);
        formalParameters();

        state._fsp--;
        if (state.failed) return ;
        // COMTOR.g:334:9: ( '[' ']' )*
        loop200:
        do {
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==LBRACKET) ) {
                alt200=1;
            }


            switch (alt200) {
        	case 1 :
        	    // COMTOR.g:334:10: '[' ']'
        	    {
        	    match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred71_COMTOR2519); if (state.failed) return ;
        	    match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred71_COMTOR2521); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop200;
            }
        } while (true);

        // COMTOR.g:336:9: ( 'throws' qualifiedNameList )?
        int alt201=2;
        int LA201_0 = input.LA(1);

        if ( (LA201_0==THROWS) ) {
            alt201=1;
        }
        switch (alt201) {
            case 1 :
                // COMTOR.g:336:10: 'throws' qualifiedNameList
                {
                match(input,THROWS,FOLLOW_THROWS_in_synpred71_COMTOR2543); if (state.failed) return ;
                pushFollow(FOLLOW_qualifiedNameList_in_synpred71_COMTOR2545);
                qualifiedNameList();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // COMTOR.g:338:9: ( block | ';' )
        int alt202=2;
        int LA202_0 = input.LA(1);

        if ( (LA202_0==LBRACE) ) {
            alt202=1;
        }
        else if ( (LA202_0==SEMI) ) {
            alt202=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 202, 0, input);

            throw nvae;
        }
        switch (alt202) {
            case 1 :
                // COMTOR.g:339:13: block
                {
                pushFollow(FOLLOW_block_in_synpred71_COMTOR2600);
                block();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // COMTOR.g:340:13: ';'
                {
                match(input,SEMI,FOLLOW_SEMI_in_synpred71_COMTOR2614); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred71_COMTOR

    // $ANTLR start synpred81_COMTOR
    public final void synpred81_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:388:9: ( interfaceFieldDeclaration )
        // COMTOR.g:388:9: interfaceFieldDeclaration
        {
        pushFollow(FOLLOW_interfaceFieldDeclaration_in_synpred81_COMTOR3217);
        interfaceFieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred81_COMTOR

    // $ANTLR start synpred82_COMTOR
    public final void synpred82_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:389:9: ( interfaceMethodDeclaration )
        // COMTOR.g:389:9: interfaceMethodDeclaration
        {
        pushFollow(FOLLOW_interfaceMethodDeclaration_in_synpred82_COMTOR3227);
        interfaceMethodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_COMTOR

    // $ANTLR start synpred83_COMTOR
    public final void synpred83_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:390:9: ( interfaceDeclaration )
        // COMTOR.g:390:9: interfaceDeclaration
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred83_COMTOR3237);
        interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred83_COMTOR

    // $ANTLR start synpred84_COMTOR
    public final void synpred84_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:391:9: ( classDeclaration )
        // COMTOR.g:391:9: classDeclaration
        {
        pushFollow(FOLLOW_classDeclaration_in_synpred84_COMTOR3247);
        classDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_COMTOR

    // $ANTLR start synpred111_COMTOR
    public final void synpred111_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:495:9: ( ellipsisParameterDecl )
        // COMTOR.g:495:9: ellipsisParameterDecl
        {
        pushFollow(FOLLOW_ellipsisParameterDecl_in_synpred111_COMTOR4221);
        ellipsisParameterDecl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_COMTOR

    // $ANTLR start synpred113_COMTOR
    public final void synpred113_COMTOR_fragment() throws RecognitionException {   
        List list_n=null;
        RuleReturnScope n = null;
        // COMTOR.g:496:9: (n+= normalParameterDecl ( ',' n+= normalParameterDecl )* )
        // COMTOR.g:496:9: n+= normalParameterDecl ( ',' n+= normalParameterDecl )*
        {
        pushFollow(FOLLOW_normalParameterDecl_in_synpred113_COMTOR4233);
        n=normalParameterDecl();

        state._fsp--;
        if (state.failed) return ;
        if (list_n==null) list_n=new ArrayList();
        list_n.add(n);

        // COMTOR.g:497:9: ( ',' n+= normalParameterDecl )*
        loop206:
        do {
            int alt206=2;
            int LA206_0 = input.LA(1);

            if ( (LA206_0==COMMA) ) {
                alt206=1;
            }


            switch (alt206) {
        	case 1 :
        	    // COMTOR.g:497:10: ',' n+= normalParameterDecl
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred113_COMTOR4244); if (state.failed) return ;
        	    pushFollow(FOLLOW_normalParameterDecl_in_synpred113_COMTOR4248);
        	    n=normalParameterDecl();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    if (list_n==null) list_n=new ArrayList();
        	    list_n.add(n);


        	    }
        	    break;

        	default :
        	    break loop206;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred113_COMTOR

    // $ANTLR start synpred114_COMTOR
    public final void synpred114_COMTOR_fragment() throws RecognitionException {   
        List list_n=null;
        RuleReturnScope n = null;
        // COMTOR.g:500:10: (n+= normalParameterDecl ',' )
        // COMTOR.g:500:10: n+= normalParameterDecl ','
        {
        pushFollow(FOLLOW_normalParameterDecl_in_synpred114_COMTOR4285);
        n=normalParameterDecl();

        state._fsp--;
        if (state.failed) return ;
        if (list_n==null) list_n=new ArrayList();
        list_n.add(n);

        match(input,COMMA,FOLLOW_COMMA_in_synpred114_COMTOR4295); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_COMTOR

    // $ANTLR start synpred119_COMTOR
    public final void synpred119_COMTOR_fragment() throws RecognitionException {   
        Token t=null;
        Token s=null;

        // COMTOR.g:529:9: ( ( nonWildcardTypeArguments )? (t= 'this' | s= 'super' ) arguments ';' )
        // COMTOR.g:529:9: ( nonWildcardTypeArguments )? (t= 'this' | s= 'super' ) arguments ';'
        {
        // COMTOR.g:529:9: ( nonWildcardTypeArguments )?
        int alt207=2;
        int LA207_0 = input.LA(1);

        if ( (LA207_0==LT) ) {
            alt207=1;
        }
        switch (alt207) {
            case 1 :
                // COMTOR.g:529:10: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred119_COMTOR4570);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // COMTOR.g:531:9: (t= 'this' | s= 'super' )
        int alt208=2;
        int LA208_0 = input.LA(1);

        if ( (LA208_0==THIS) ) {
            alt208=1;
        }
        else if ( (LA208_0==SUPER) ) {
            alt208=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 208, 0, input);

            throw nvae;
        }
        switch (alt208) {
            case 1 :
                // COMTOR.g:531:10: t= 'this'
                {
                t=(Token)match(input,THIS,FOLLOW_THIS_in_synpred119_COMTOR4599); if (state.failed) return ;

                }
                break;
            case 2 :
                // COMTOR.g:532:10: s= 'super'
                {
                s=(Token)match(input,SUPER,FOLLOW_SUPER_in_synpred119_COMTOR4612); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_arguments_in_synpred119_COMTOR4632);
        arguments();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred119_COMTOR4634); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_COMTOR

    // $ANTLR start synpred121_COMTOR
    public final void synpred121_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:546:10: ( annotation )
        // COMTOR.g:546:10: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred121_COMTOR4780);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_COMTOR

    // $ANTLR start synpred132_COMTOR
    public final void synpred132_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:618:9: ( annotationMethodDeclaration )
        // COMTOR.g:618:9: annotationMethodDeclaration
        {
        pushFollow(FOLLOW_annotationMethodDeclaration_in_synpred132_COMTOR5353);
        annotationMethodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_COMTOR

    // $ANTLR start synpred133_COMTOR
    public final void synpred133_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:619:9: ( interfaceFieldDeclaration )
        // COMTOR.g:619:9: interfaceFieldDeclaration
        {
        pushFollow(FOLLOW_interfaceFieldDeclaration_in_synpred133_COMTOR5363);
        interfaceFieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_COMTOR

    // $ANTLR start synpred134_COMTOR
    public final void synpred134_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:620:9: ( normalClassDeclaration )
        // COMTOR.g:620:9: normalClassDeclaration
        {
        pushFollow(FOLLOW_normalClassDeclaration_in_synpred134_COMTOR5373);
        normalClassDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_COMTOR

    // $ANTLR start synpred135_COMTOR
    public final void synpred135_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:621:9: ( normalInterfaceDeclaration )
        // COMTOR.g:621:9: normalInterfaceDeclaration
        {
        pushFollow(FOLLOW_normalInterfaceDeclaration_in_synpred135_COMTOR5383);
        normalInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred135_COMTOR

    // $ANTLR start synpred136_COMTOR
    public final void synpred136_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:622:9: ( enumDeclaration )
        // COMTOR.g:622:9: enumDeclaration
        {
        pushFollow(FOLLOW_enumDeclaration_in_synpred136_COMTOR5393);
        enumDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_COMTOR

    // $ANTLR start synpred137_COMTOR
    public final void synpred137_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:623:9: ( annotationTypeDeclaration )
        // COMTOR.g:623:9: annotationTypeDeclaration
        {
        pushFollow(FOLLOW_annotationTypeDeclaration_in_synpred137_COMTOR5403);
        annotationTypeDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred137_COMTOR

    // $ANTLR start synpred141_COMTOR
    public final void synpred141_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:669:9: ( localVariableDeclarationStatement )
        // COMTOR.g:669:9: localVariableDeclarationStatement
        {
        pushFollow(FOLLOW_localVariableDeclarationStatement_in_synpred141_COMTOR5610);
        localVariableDeclarationStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred141_COMTOR

    // $ANTLR start synpred142_COMTOR
    public final void synpred142_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:670:9: ( classOrInterfaceDeclaration )
        // COMTOR.g:670:9: classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred142_COMTOR5620);
        classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_COMTOR

    // $ANTLR start synpred146_COMTOR
    public final void synpred146_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:692:9: ( 'assert' expression ( ':' expression )? ';' )
        // COMTOR.g:692:9: 'assert' expression ( ':' expression )? ';'
        {
        match(input,ASSERT,FOLLOW_ASSERT_in_synpred146_COMTOR5802); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred146_COMTOR5804);
        expression();

        state._fsp--;
        if (state.failed) return ;
        // COMTOR.g:692:29: ( ':' expression )?
        int alt210=2;
        int LA210_0 = input.LA(1);

        if ( (LA210_0==COLON) ) {
            alt210=1;
        }
        switch (alt210) {
            case 1 :
                // COMTOR.g:692:30: ':' expression
                {
                match(input,COLON,FOLLOW_COLON_in_synpred146_COMTOR5807); if (state.failed) return ;
                pushFollow(FOLLOW_expression_in_synpred146_COMTOR5809);
                expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,SEMI,FOLLOW_SEMI_in_synpred146_COMTOR5813); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_COMTOR

    // $ANTLR start synpred148_COMTOR
    public final void synpred148_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:694:9: ( 'assert' expression ( ':' expression )? ';' )
        // COMTOR.g:694:9: 'assert' expression ( ':' expression )? ';'
        {
        match(input,ASSERT,FOLLOW_ASSERT_in_synpred148_COMTOR5840); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred148_COMTOR5843);
        expression();

        state._fsp--;
        if (state.failed) return ;
        // COMTOR.g:694:30: ( ':' expression )?
        int alt211=2;
        int LA211_0 = input.LA(1);

        if ( (LA211_0==COLON) ) {
            alt211=1;
        }
        switch (alt211) {
            case 1 :
                // COMTOR.g:694:31: ':' expression
                {
                match(input,COLON,FOLLOW_COLON_in_synpred148_COMTOR5846); if (state.failed) return ;
                pushFollow(FOLLOW_expression_in_synpred148_COMTOR5848);
                expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,SEMI,FOLLOW_SEMI_in_synpred148_COMTOR5852); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_COMTOR

    // $ANTLR start synpred149_COMTOR
    public final void synpred149_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:696:28: ( statement )
        // COMTOR.g:696:28: statement
        {
        pushFollow(FOLLOW_statement_in_synpred149_COMTOR5884);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_COMTOR

    // $ANTLR start synpred150_COMTOR
    public final void synpred150_COMTOR_fragment() throws RecognitionException {   
        COMTORParser.statement_return el = null;


        // COMTOR.g:696:40: ( 'else' el= statement )
        // COMTOR.g:696:40: 'else' el= statement
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred150_COMTOR5888); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred150_COMTOR5892);
        el=statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_COMTOR

    // $ANTLR start synpred165_COMTOR
    public final void synpred165_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:720:9: ( expression ';' )
        // COMTOR.g:720:9: expression ';'
        {
        pushFollow(FOLLOW_expression_in_synpred165_COMTOR6302);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,SEMI,FOLLOW_SEMI_in_synpred165_COMTOR6305); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_COMTOR

    // $ANTLR start synpred166_COMTOR
    public final void synpred166_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:721:9: ( IDENTIFIER ':' statement )
        // COMTOR.g:721:9: IDENTIFIER ':' statement
        {
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred166_COMTOR6323); if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred166_COMTOR6325); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred166_COMTOR6327);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_COMTOR

    // $ANTLR start synpred170_COMTOR
    public final void synpred170_COMTOR_fragment() throws RecognitionException {   
        Token f=null;
        COMTORParser.catches_return c = null;

        COMTORParser.block_return b = null;


        // COMTOR.g:746:13: (c= catches f= 'finally' b= block )
        // COMTOR.g:746:13: c= catches f= 'finally' b= block
        {
        pushFollow(FOLLOW_catches_in_synpred170_COMTOR6520);
        c=catches();

        state._fsp--;
        if (state.failed) return ;
        f=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_synpred170_COMTOR6524); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred170_COMTOR6528);
        b=block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_COMTOR

    // $ANTLR start synpred171_COMTOR
    public final void synpred171_COMTOR_fragment() throws RecognitionException {   
        COMTORParser.catches_return c = null;


        // COMTOR.g:747:13: (c= catches )
        // COMTOR.g:747:13: c= catches
        {
        pushFollow(FOLLOW_catches_in_synpred171_COMTOR6544);
        c=catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_COMTOR

    // $ANTLR start synpred173_COMTOR
    public final void synpred173_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:761:13: ( block )
        // COMTOR.g:761:13: block
        {
        pushFollow(FOLLOW_block_in_synpred173_COMTOR6694);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_COMTOR

    // $ANTLR start synpred176_COMTOR
    public final void synpred176_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:774:19: ( variableModifiers )
        // COMTOR.g:774:19: variableModifiers
        {
        pushFollow(FOLLOW_variableModifiers_in_synpred176_COMTOR6839);
        variableModifiers();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_COMTOR

    // $ANTLR start synpred177_COMTOR
    public final void synpred177_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:774:9: ( 'for' '(' ( variableModifiers )? type variableDeclarator ':' expression ')' statement )
        // COMTOR.g:774:9: 'for' '(' ( variableModifiers )? type variableDeclarator ':' expression ')' statement
        {
        match(input,FOR,FOLLOW_FOR_in_synpred177_COMTOR6835); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred177_COMTOR6837); if (state.failed) return ;
        // COMTOR.g:774:19: ( variableModifiers )?
        int alt217=2;
        switch ( input.LA(1) ) {
            case FINAL:
            case MONKEYS_AT:
                {
                alt217=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA217_2 = input.LA(2);

                if ( (synpred176_COMTOR()) ) {
                    alt217=1;
                }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                {
                int LA217_3 = input.LA(2);

                if ( (synpred176_COMTOR()) ) {
                    alt217=1;
                }
                }
                break;
        }

        switch (alt217) {
            case 1 :
                // COMTOR.g:0:0: variableModifiers
                {
                pushFollow(FOLLOW_variableModifiers_in_synpred177_COMTOR6839);
                variableModifiers();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_type_in_synpred177_COMTOR6842);
        type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclarator_in_synpred177_COMTOR6844);
        variableDeclarator();

        state._fsp--;
        if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred177_COMTOR6846); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred177_COMTOR6857);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred177_COMTOR6859); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred177_COMTOR6861);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_COMTOR

    // $ANTLR start synpred181_COMTOR
    public final void synpred181_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:784:24: ( statement )
        // COMTOR.g:784:24: statement
        {
        pushFollow(FOLLOW_statement_in_synpred181_COMTOR7048);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_COMTOR

    // $ANTLR start synpred182_COMTOR
    public final void synpred182_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:789:9: ( localVariableDeclaration )
        // COMTOR.g:789:9: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred182_COMTOR7099);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_COMTOR

    // $ANTLR start synpred223_COMTOR
    public final void synpred223_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:945:9: ( castExpression )
        // COMTOR.g:945:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred223_COMTOR8366);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_COMTOR

    // $ANTLR start synpred227_COMTOR
    public final void synpred227_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:955:9: ( '(' primitiveType ')' unaryExpression )
        // COMTOR.g:955:9: '(' primitiveType ')' unaryExpression
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred227_COMTOR8457); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred227_COMTOR8459);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred227_COMTOR8461); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred227_COMTOR8463);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_COMTOR

    // $ANTLR start synpred229_COMTOR
    public final void synpred229_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:967:10: ( '.' IDENTIFIER )
        // COMTOR.g:967:10: '.' IDENTIFIER
        {
        match(input,DOT,FOLLOW_DOT_in_synpred229_COMTOR8564); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred229_COMTOR8566); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_COMTOR

    // $ANTLR start synpred230_COMTOR
    public final void synpred230_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:969:10: ( identifierSuffix )
        // COMTOR.g:969:10: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred230_COMTOR8588);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_COMTOR

    // $ANTLR start synpred232_COMTOR
    public final void synpred232_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:972:10: ( '.' IDENTIFIER )
        // COMTOR.g:972:10: '.' IDENTIFIER
        {
        match(input,DOT,FOLLOW_DOT_in_synpred232_COMTOR8620); if (state.failed) return ;
        match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_synpred232_COMTOR8622); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_COMTOR

    // $ANTLR start synpred233_COMTOR
    public final void synpred233_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:974:10: ( identifierSuffix )
        // COMTOR.g:974:10: identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred233_COMTOR8644);
        identifierSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_COMTOR

    // $ANTLR start synpred245_COMTOR
    public final void synpred245_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:1004:10: ( '[' expression ']' )
        // COMTOR.g:1004:10: '[' expression ']'
        {
        match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred245_COMTOR8942); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred245_COMTOR8944);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred245_COMTOR8946); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_COMTOR

    // $ANTLR start synpred257_COMTOR
    public final void synpred257_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:1027:9: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest )
        // COMTOR.g:1027:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
        {
        match(input,NEW,FOLLOW_NEW_in_synpred257_COMTOR9155); if (state.failed) return ;
        pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred257_COMTOR9157);
        nonWildcardTypeArguments();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_classOrInterfaceType_in_synpred257_COMTOR9159);
        classOrInterfaceType();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_classCreatorRest_in_synpred257_COMTOR9161);
        classCreatorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_COMTOR

    // $ANTLR start synpred258_COMTOR
    public final void synpred258_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:1028:9: ( 'new' classOrInterfaceType classCreatorRest )
        // COMTOR.g:1028:9: 'new' classOrInterfaceType classCreatorRest
        {
        match(input,NEW,FOLLOW_NEW_in_synpred258_COMTOR9171); if (state.failed) return ;
        pushFollow(FOLLOW_classOrInterfaceType_in_synpred258_COMTOR9173);
        classOrInterfaceType();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_classCreatorRest_in_synpred258_COMTOR9175);
        classCreatorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_COMTOR

    // $ANTLR start synpred260_COMTOR
    public final void synpred260_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:1033:9: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer )
        // COMTOR.g:1033:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
        {
        match(input,NEW,FOLLOW_NEW_in_synpred260_COMTOR9205); if (state.failed) return ;
        pushFollow(FOLLOW_createdName_in_synpred260_COMTOR9207);
        createdName();

        state._fsp--;
        if (state.failed) return ;
        match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred260_COMTOR9217); if (state.failed) return ;
        match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred260_COMTOR9219); if (state.failed) return ;
        // COMTOR.g:1035:9: ( '[' ']' )*
        loop226:
        do {
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==LBRACKET) ) {
                alt226=1;
            }


            switch (alt226) {
        	case 1 :
        	    // COMTOR.g:1035:10: '[' ']'
        	    {
        	    match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred260_COMTOR9230); if (state.failed) return ;
        	    match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred260_COMTOR9232); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop226;
            }
        } while (true);

        pushFollow(FOLLOW_arrayInitializer_in_synpred260_COMTOR9253);
        arrayInitializer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_COMTOR

    // $ANTLR start synpred261_COMTOR
    public final void synpred261_COMTOR_fragment() throws RecognitionException {   
        // COMTOR.g:1042:13: ( '[' expression ']' )
        // COMTOR.g:1042:13: '[' expression ']'
        {
        match(input,LBRACKET,FOLLOW_LBRACKET_in_synpred261_COMTOR9302); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred261_COMTOR9304);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RBRACKET,FOLLOW_RBRACKET_in_synpred261_COMTOR9318); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_COMTOR

    // Delegated rules

    public final boolean synpred84_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_COMTOR() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_COMTOR_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA5 dfa5 = new DFA5(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA196 dfa196 = new DFA196(this);
    static final String DFA5_eotS =
        "\24\uffff";
    static final String DFA5_eofS =
        "\1\2\23\uffff";
    static final String DFA5_minS =
        "\1\46\1\0\22\uffff";
    static final String DFA5_maxS =
        "\1\u0094\1\0\22\uffff";
    static final String DFA5_acceptS =
        "\2\uffff\1\1\20\uffff\1\2";
    static final String DFA5_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\23\30\uffff\1\2\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\6\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\3\2\2\uffff\2\2\2\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\7\uffff\1\2\35\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "73:1: compilationUnit : ( ( annotations )? importDeclarations ( typeDeclaration )* -> ^( ( typeDeclaration ( importDeclarations )? )* ( annotations )? ) | ( annotations )? packageDeclaration importDeclarations ( typeDeclaration )* -> ^( packageDeclaration ( typeDeclaration ( importDeclarations )? )* ( annotations )? ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_1 = input.LA(1);

                         
                        int index5_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_COMTOR()) ) {s = 2;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index5_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\20\uffff";
    static final String DFA14_eofS =
        "\20\uffff";
    static final String DFA14_minS =
        "\1\77\14\0\3\uffff";
    static final String DFA14_maxS =
        "\1\u0094\14\0\3\uffff";
    static final String DFA14_acceptS =
        "\15\uffff\1\1\1\uffff\1\2";
    static final String DFA14_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\3"+
        "\uffff}>";
    static final String[] DFA14_transitionS = {
            "\1\5\7\uffff\1\15\6\uffff\1\15\1\uffff\1\6\11\uffff\1\17\1"+
            "\uffff\1\7\1\uffff\1\3\1\2\1\1\2\uffff\1\4\1\13\2\uffff\1\10"+
            "\3\uffff\1\11\2\uffff\1\12\45\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "129:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_1 = input.LA(1);

                         
                        int index14_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_2 = input.LA(1);

                         
                        int index14_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_3 = input.LA(1);

                         
                        int index14_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_4 = input.LA(1);

                         
                        int index14_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_5 = input.LA(1);

                         
                        int index14_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA14_6 = input.LA(1);

                         
                        int index14_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA14_7 = input.LA(1);

                         
                        int index14_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA14_8 = input.LA(1);

                         
                        int index14_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA15_eotS =
        "\17\uffff";
    static final String DFA15_eofS =
        "\1\1\16\uffff";
    static final String DFA15_minS =
        "\1\47\1\uffff\1\47\14\uffff";
    static final String DFA15_maxS =
        "\1\u0097\1\uffff\1\132\14\uffff";
    static final String DFA15_acceptS =
        "\1\uffff\1\15\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14";
    static final String DFA15_specialS =
        "\17\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\1\27\uffff\1\7\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\4\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\1\10\1\uffff\1\1\6\uffff\3\1\1\11\1"+
            "\uffff\1\5\1\4\1\3\1\uffff\1\1\1\6\1\15\2\uffff\1\12\3\uffff"+
            "\1\13\1\uffff\1\1\1\14\45\uffff\1\2\2\uffff\1\1",
            "",
            "\1\16\62\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "()+ loopback of 137:5: ( 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' | annotation )+";
        }
    }
    static final String DFA18_eotS =
        "\17\uffff";
    static final String DFA18_eofS =
        "\17\uffff";
    static final String DFA18_minS =
        "\1\77\14\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u0094\14\0\2\uffff";
    static final String DFA18_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA18_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2"+
        "\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\5\7\uffff\1\15\6\uffff\1\16\1\uffff\1\6\13\uffff\1\7\1\uffff"+
            "\1\3\1\2\1\1\2\uffff\1\4\1\13\2\uffff\1\10\3\uffff\1\11\2\uffff"+
            "\1\12\45\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "169:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\17\uffff";
    static final String DFA35_eofS =
        "\17\uffff";
    static final String DFA35_minS =
        "\1\77\14\0\2\uffff";
    static final String DFA35_maxS =
        "\1\u0094\14\0\2\uffff";
    static final String DFA35_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA35_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2"+
        "\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\5\20\uffff\1\6\11\uffff\1\15\1\uffff\1\7\1\uffff\1\3\1\2"+
            "\1\1\2\uffff\1\4\1\13\2\uffff\1\10\3\uffff\1\11\2\uffff\1\12"+
            "\45\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "250:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_1 = input.LA(1);

                         
                        int index35_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_2 = input.LA(1);

                         
                        int index35_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_3 = input.LA(1);

                         
                        int index35_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_4 = input.LA(1);

                         
                        int index35_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_5 = input.LA(1);

                         
                        int index35_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_6 = input.LA(1);

                         
                        int index35_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA35_7 = input.LA(1);

                         
                        int index35_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA35_8 = input.LA(1);

                         
                        int index35_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA35_9 = input.LA(1);

                         
                        int index35_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA35_10 = input.LA(1);

                         
                        int index35_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA35_11 = input.LA(1);

                         
                        int index35_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA35_12 = input.LA(1);

                         
                        int index35_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_COMTOR()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index35_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA44_eotS =
        "\25\uffff";
    static final String DFA44_eofS =
        "\25\uffff";
    static final String DFA44_minS =
        "\1\47\16\0\6\uffff";
    static final String DFA44_maxS =
        "\1\u0097\16\0\6\uffff";
    static final String DFA44_acceptS =
        "\17\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\1";
    static final String DFA44_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\6\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\15\27\uffff\1\5\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1"+
            "\21\4\uffff\1\16\1\uffff\1\21\1\uffff\1\6\1\uffff\1\16\6\uffff"+
            "\1\16\1\23\1\16\1\7\1\uffff\1\3\1\2\1\1\1\uffff\1\16\1\4\1\13"+
            "\2\uffff\1\10\3\uffff\1\11\1\uffff\1\17\1\12\45\uffff\1\14\2"+
            "\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "296:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA44_8 = input.LA(1);

                         
                        int index44_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA44_9 = input.LA(1);

                         
                        int index44_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA44_11 = input.LA(1);

                         
                        int index44_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA44_12 = input.LA(1);

                         
                        int index44_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                        else if ( (synpred59_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index44_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                         
                        input.seek(index44_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA44_14 = input.LA(1);

                         
                        int index44_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_COMTOR()) ) {s = 20;}

                        else if ( (synpred58_COMTOR()) ) {s = 15;}

                         
                        input.seek(index44_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA60_eotS =
        "\23\uffff";
    static final String DFA60_eofS =
        "\23\uffff";
    static final String DFA60_minS =
        "\1\47\16\0\4\uffff";
    static final String DFA60_maxS =
        "\1\u0097\16\0\4\uffff";
    static final String DFA60_acceptS =
        "\17\uffff\1\2\1\uffff\1\1\1\3";
    static final String DFA60_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\4\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\16\27\uffff\1\5\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\5"+
            "\uffff\1\17\3\uffff\1\6\1\uffff\1\17\6\uffff\1\17\1\uffff\1"+
            "\17\1\7\1\uffff\1\3\1\2\1\1\1\uffff\1\17\1\4\1\13\2\uffff\1"+
            "\10\3\uffff\1\11\1\uffff\1\17\1\12\45\uffff\1\14\2\uffff\1\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "309:1: methodDeclaration : ( ( modifiers )? ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' -> ^( CONSTRUCTOR IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( explicitConstructorInvocation )? ( blockStatement )* ) ) | ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) -> ^( METHOD_DEC IDENTIFIER ^( ACCESS_MODIFIER PACKAGE_PRIVATE ) ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) ) | modifiers ( typeParameters )? (t= type | v= 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) -> ^( METHOD_DEC IDENTIFIER ( ^( ACCESS_MODIFIER modifiers ) )? ^( TYPE ( $t)? ( $v)? ) ( ^( PARAMS formalParameters ) )? ( ^( TYPE_PARAMS typeParameters ) )? ( ^( THROWS qualifiedNameList ) )? ^( BODY ( block )? ( ';' )? ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_1 = input.LA(1);

                         
                        int index60_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA60_2 = input.LA(1);

                         
                        int index60_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA60_3 = input.LA(1);

                         
                        int index60_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA60_4 = input.LA(1);

                         
                        int index60_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA60_5 = input.LA(1);

                         
                        int index60_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA60_6 = input.LA(1);

                         
                        int index60_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA60_7 = input.LA(1);

                         
                        int index60_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA60_8 = input.LA(1);

                         
                        int index60_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA60_9 = input.LA(1);

                         
                        int index60_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA60_10 = input.LA(1);

                         
                        int index60_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA60_11 = input.LA(1);

                         
                        int index60_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA60_12 = input.LA(1);

                         
                        int index60_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index60_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA60_13 = input.LA(1);

                         
                        int index60_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (synpred71_COMTOR()) ) {s = 15;}

                         
                        input.seek(index60_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA60_14 = input.LA(1);

                         
                        int index60_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_COMTOR()) ) {s = 17;}

                        else if ( (synpred71_COMTOR()) ) {s = 15;}

                         
                        input.seek(index60_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA48_eotS =
        "\55\uffff";
    static final String DFA48_eofS =
        "\55\uffff";
    static final String DFA48_minS =
        "\1\47\1\uffff\10\0\43\uffff";
    static final String DFA48_maxS =
        "\1\u0097\1\uffff\10\0\43\uffff";
    static final String DFA48_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\42\uffff";
    static final String DFA48_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\43\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\5\12\6\15\uffff\2\12\1\10\1\12\1\10\2\uffff\1\10\1\12\1"+
            "\uffff\1\12\1\uffff\1\12\1\10\1\uffff\1\12\1\uffff\1\12\1\uffff"+
            "\1\10\1\12\1\uffff\1\12\3\uffff\1\10\1\12\1\10\1\12\1\7\4\12"+
            "\1\10\2\12\1\3\2\12\1\2\1\12\1\uffff\2\12\1\11\2\12\1\4\1\uffff"+
            "\2\12\2\uffff\1\12\4\uffff\2\12\5\uffff\4\12\16\uffff\1\12\2"+
            "\uffff\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "320:9: ( explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_3 = input.LA(1);

                         
                        int index48_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index48_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_4 = input.LA(1);

                         
                        int index48_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index48_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_5 = input.LA(1);

                         
                        int index48_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index48_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_6 = input.LA(1);

                         
                        int index48_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index48_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_7 = input.LA(1);

                         
                        int index48_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index48_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_8 = input.LA(1);

                         
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_9 = input.LA(1);

                         
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA65_eotS =
        "\26\uffff";
    static final String DFA65_eofS =
        "\26\uffff";
    static final String DFA65_minS =
        "\1\47\16\0\7\uffff";
    static final String DFA65_maxS =
        "\1\u0097\16\0\7\uffff";
    static final String DFA65_acceptS =
        "\17\uffff\1\2\1\uffff\1\3\1\4\1\uffff\1\5\1\1";
    static final String DFA65_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\7\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\15\27\uffff\1\5\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1"+
            "\22\4\uffff\1\16\1\uffff\1\22\1\uffff\1\6\1\uffff\1\16\6\uffff"+
            "\1\16\1\21\1\16\1\7\1\uffff\1\3\1\2\1\1\1\uffff\1\16\1\4\1\13"+
            "\2\uffff\1\10\3\uffff\1\11\1\uffff\1\17\1\12\7\uffff\1\24\35"+
            "\uffff\1\14\2\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "384:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_1 = input.LA(1);

                         
                        int index65_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA65_2 = input.LA(1);

                         
                        int index65_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA65_3 = input.LA(1);

                         
                        int index65_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA65_4 = input.LA(1);

                         
                        int index65_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA65_5 = input.LA(1);

                         
                        int index65_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA65_6 = input.LA(1);

                         
                        int index65_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA65_7 = input.LA(1);

                         
                        int index65_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA65_8 = input.LA(1);

                         
                        int index65_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA65_9 = input.LA(1);

                         
                        int index65_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA65_10 = input.LA(1);

                         
                        int index65_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA65_11 = input.LA(1);

                         
                        int index65_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA65_12 = input.LA(1);

                         
                        int index65_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                        else if ( (synpred83_COMTOR()) ) {s = 17;}

                        else if ( (synpred84_COMTOR()) ) {s = 18;}

                         
                        input.seek(index65_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA65_13 = input.LA(1);

                         
                        int index65_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                         
                        input.seek(index65_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA65_14 = input.LA(1);

                         
                        int index65_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred81_COMTOR()) ) {s = 21;}

                        else if ( (synpred82_COMTOR()) ) {s = 15;}

                         
                        input.seek(index65_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA93_eotS =
        "\12\uffff";
    static final String DFA93_eofS =
        "\12\uffff";
    static final String DFA93_minS =
        "\1\47\1\uffff\2\0\6\uffff";
    static final String DFA93_maxS =
        "\1\u0097\1\uffff\2\0\6\uffff";
    static final String DFA93_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\5\uffff";
    static final String DFA93_specialS =
        "\2\uffff\1\0\1\1\6\uffff}>";
    static final String[] DFA93_transitionS = {
            "\13\4\17\uffff\1\4\1\uffff\1\4\2\uffff\1\4\5\uffff\1\4\5\uffff"+
            "\1\4\6\uffff\1\4\1\uffff\1\4\1\uffff\1\4\4\uffff\1\4\2\uffff"+
            "\1\3\2\uffff\1\2\4\uffff\1\4\2\uffff\1\4\46\uffff\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "528:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? (t= 'this' | s= 'super' ) arguments ';' -> ^( CONSTRUCTOR_CALL ( $s)? ( $t)? ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? ) | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' -> ^( CONSTRUCTOR_CALL 'super' primary ^( ARGUMENTS arguments ) ( nonWildcardTypeArguments )? ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA93_2 = input.LA(1);

                         
                        int index93_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index93_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA93_3 = input.LA(1);

                         
                        int index93_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index93_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA103_eotS =
        "\26\uffff";
    static final String DFA103_eofS =
        "\26\uffff";
    static final String DFA103_minS =
        "\1\47\16\0\7\uffff";
    static final String DFA103_maxS =
        "\1\u0094\16\0\7\uffff";
    static final String DFA103_acceptS =
        "\17\uffff\1\3\1\4\1\5\1\7\1\1\1\2\1\6";
    static final String DFA103_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\7\uffff}>";
    static final String[] DFA103_transitionS = {
            "\1\15\27\uffff\1\5\1\uffff\1\16\1\uffff\1\16\2\uffff\1\16\1"+
            "\17\4\uffff\1\16\1\uffff\1\21\1\uffff\1\6\1\uffff\1\16\6\uffff"+
            "\1\16\1\20\1\16\1\7\1\uffff\1\3\1\2\1\1\1\uffff\1\16\1\4\1\13"+
            "\2\uffff\1\10\3\uffff\1\11\2\uffff\1\12\7\uffff\1\22\35\uffff"+
            "\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "614:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA103_1 = input.LA(1);

                         
                        int index103_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA103_2 = input.LA(1);

                         
                        int index103_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA103_3 = input.LA(1);

                         
                        int index103_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA103_4 = input.LA(1);

                         
                        int index103_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA103_5 = input.LA(1);

                         
                        int index103_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA103_6 = input.LA(1);

                         
                        int index103_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA103_7 = input.LA(1);

                         
                        int index103_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA103_8 = input.LA(1);

                         
                        int index103_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA103_9 = input.LA(1);

                         
                        int index103_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA103_10 = input.LA(1);

                         
                        int index103_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA103_11 = input.LA(1);

                         
                        int index103_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA103_12 = input.LA(1);

                         
                        int index103_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                        else if ( (synpred134_COMTOR()) ) {s = 15;}

                        else if ( (synpred135_COMTOR()) ) {s = 16;}

                        else if ( (synpred136_COMTOR()) ) {s = 17;}

                        else if ( (synpred137_COMTOR()) ) {s = 21;}

                         
                        input.seek(index103_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA103_13 = input.LA(1);

                         
                        int index103_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                         
                        input.seek(index103_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA103_14 = input.LA(1);

                         
                        int index103_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred132_COMTOR()) ) {s = 19;}

                        else if ( (synpred133_COMTOR()) ) {s = 20;}

                         
                        input.seek(index103_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 103, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\54\uffff";
    static final String DFA107_eofS =
        "\54\uffff";
    static final String DFA107_minS =
        "\1\47\4\0\6\uffff\1\0\40\uffff";
    static final String DFA107_maxS =
        "\1\u0094\4\0\6\uffff\1\0\40\uffff";
    static final String DFA107_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\30\uffff\1\1";
    static final String DFA107_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\6\uffff\1\4\40\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\3\12\22\15\uffff\1\5\1\22\1\4\1\22\1\4\2\uffff\1\4\1\5\1"+
            "\uffff\1\22\1\uffff\1\22\1\4\1\uffff\1\5\1\uffff\1\1\1\uffff"+
            "\1\4\1\22\1\uffff\1\22\3\uffff\1\4\1\5\1\4\1\5\1\22\3\5\1\22"+
            "\1\4\2\5\2\22\1\13\2\22\1\uffff\1\5\2\22\1\5\2\22\1\uffff\1"+
            "\22\3\uffff\1\22\4\uffff\2\22\5\uffff\4\22\16\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "668:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_COMTOR()) ) {s = 43;}

                        else if ( (synpred142_COMTOR()) ) {s = 5;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA107_2 = input.LA(1);

                         
                        int index107_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_COMTOR()) ) {s = 43;}

                        else if ( (synpred142_COMTOR()) ) {s = 5;}

                         
                        input.seek(index107_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA107_3 = input.LA(1);

                         
                        int index107_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_COMTOR()) ) {s = 43;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index107_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA107_4 = input.LA(1);

                         
                        int index107_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred141_COMTOR()) ) {s = 43;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index107_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA107_11 = input.LA(1);

                         
                        int index107_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_COMTOR()) ) {s = 5;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index107_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA116_eotS =
        "\40\uffff";
    static final String DFA116_eofS =
        "\40\uffff";
    static final String DFA116_minS =
        "\1\47\1\uffff\1\0\23\uffff\1\0\11\uffff";
    static final String DFA116_maxS =
        "\1\u0085\1\uffff\1\0\23\uffff\1\0\11\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\15\uffff\1\21\1\2\1\3\1\20";
    static final String DFA116_specialS =
        "\2\uffff\1\0\23\uffff\1\1\11\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\26\12\16\16\uffff\1\2\1\16\1\14\1\16\2\uffff\1\16\2\uffff"+
            "\1\15\1\uffff\1\6\1\16\5\uffff\1\16\1\4\1\uffff\1\3\3\uffff"+
            "\1\16\1\uffff\1\16\1\uffff\1\16\3\uffff\1\12\1\16\2\uffff\1"+
            "\16\1\10\1\11\1\16\1\13\2\uffff\1\7\1\16\1\uffff\1\5\1\16\1"+
            "\uffff\1\1\3\uffff\1\34\4\uffff\2\16\5\uffff\4\16",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "689:1: statement : ( block | 'assert' expression ( ':' expression )? ';' -> ^( ASSERT ( expression )+ ) | 'assert' expression ( ':' expression )? ';' -> ^( ASSERT ( expression )+ ) | 'if' parExpression ( statement )? ( 'else' el= statement )? -> ^( IF_STATEMENT ^( CONDITION parExpression ) ( ^( BODY statement ) )? ( ^( ELSE_STATEMENT ^( BODY $el) ) )? ) | forstatement | 'while' parExpression statement -> ^( WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? ) | 'do' statement 'while' parExpression ';' -> ^( DO_WHILE_BLOCK ^( CONDITION parExpression ) ( ^( BODY statement ) )? ) | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH_STATEMENT ^( CONDITION parExpression ) ( ^( BODY switchBlockStatementGroups ) )? ) | 'synchronized' parExpression block -> ^( SYNCHRONIZED_BLOCK parExpression ( ^( BODY block ) )? ) | 'return' ( expression )? ';' -> ^( RETURN_STATEMENT ( expression )? ) | 'throw' expression ';' -> ^( THROWS expression ) | 'break' ( IDENTIFIER )? ';' -> ^( 'break' ( IDENTIFIER )? ) | 'continue' ( IDENTIFIER )? ';' -> ^( 'continue' ( IDENTIFIER )? ) | expression ';' -> expression | IDENTIFIER ':' statement -> ^( statement ^( LABEL IDENTIFIER ) ) | ';' ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA116_2 = input.LA(1);

                         
                        int index116_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_COMTOR()) ) {s = 29;}

                        else if ( (synpred148_COMTOR()) ) {s = 30;}

                         
                        input.seek(index116_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA116_22 = input.LA(1);

                         
                        int index116_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_COMTOR()) ) {s = 14;}

                        else if ( (synpred166_COMTOR()) ) {s = 31;}

                         
                        input.seek(index116_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\61\uffff";
    static final String DFA111_eofS =
        "\1\35\60\uffff";
    static final String DFA111_minS =
        "\1\47\34\0\24\uffff";
    static final String DFA111_maxS =
        "\1\u0094\34\0\24\uffff";
    static final String DFA111_acceptS =
        "\35\uffff\1\2\22\uffff\1\1";
    static final String DFA111_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\24\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\26\12\30\15\uffff\1\35\1\2\1\32\1\14\1\32\1\35\1\uffff\1"+
            "\32\1\35\1\uffff\1\15\1\35\1\6\1\32\2\35\1\uffff\1\35\1\uffff"+
            "\1\32\1\4\1\uffff\1\3\3\uffff\1\32\1\35\1\32\1\35\1\31\3\35"+
            "\1\12\1\32\2\35\1\27\1\10\1\11\1\25\1\13\1\uffff\1\35\1\7\1"+
            "\33\1\35\1\5\1\24\1\uffff\1\1\1\35\2\uffff\1\34\4\uffff\1\23"+
            "\1\22\5\uffff\1\20\1\21\1\16\1\17\16\uffff\1\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "696:28: ( statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA111_6 = input.LA(1);

                         
                        int index111_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA111_11 = input.LA(1);

                         
                        int index111_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA111_12 = input.LA(1);

                         
                        int index111_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA111_13 = input.LA(1);

                         
                        int index111_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA111_14 = input.LA(1);

                         
                        int index111_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA111_15 = input.LA(1);

                         
                        int index111_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA111_16 = input.LA(1);

                         
                        int index111_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA111_17 = input.LA(1);

                         
                        int index111_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA111_18 = input.LA(1);

                         
                        int index111_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA111_19 = input.LA(1);

                         
                        int index111_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA111_20 = input.LA(1);

                         
                        int index111_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA111_21 = input.LA(1);

                         
                        int index111_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA111_22 = input.LA(1);

                         
                        int index111_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA111_23 = input.LA(1);

                         
                        int index111_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA111_24 = input.LA(1);

                         
                        int index111_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA111_25 = input.LA(1);

                         
                        int index111_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA111_26 = input.LA(1);

                         
                        int index111_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA111_27 = input.LA(1);

                         
                        int index111_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA111_28 = input.LA(1);

                         
                        int index111_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred149_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index111_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA122_eotS =
        "\63\uffff";
    static final String DFA122_eofS =
        "\1\2\62\uffff";
    static final String DFA122_minS =
        "\1\47\1\0\61\uffff";
    static final String DFA122_maxS =
        "\1\u0094\1\0\61\uffff";
    static final String DFA122_acceptS =
        "\2\uffff\1\2\57\uffff\1\1";
    static final String DFA122_specialS =
        "\1\uffff\1\0\61\uffff}>";
    static final String[] DFA122_transitionS = {
            "\13\2\15\uffff\11\2\1\uffff\6\2\1\uffff\4\2\1\uffff\1\2\3\uffff"+
            "\21\2\1\uffff\6\2\1\uffff\1\1\1\2\2\uffff\1\2\4\uffff\2\2\5"+
            "\uffff\4\2\16\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "761:13: ( block )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_1 = input.LA(1);

                         
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_COMTOR()) ) {s = 50;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA129_eotS =
        "\61\uffff";
    static final String DFA129_eofS =
        "\1\35\60\uffff";
    static final String DFA129_minS =
        "\1\47\34\0\24\uffff";
    static final String DFA129_maxS =
        "\1\u0094\34\0\24\uffff";
    static final String DFA129_acceptS =
        "\35\uffff\1\2\22\uffff\1\1";
    static final String DFA129_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\24\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\26\12\30\15\uffff\1\35\1\2\1\32\1\14\1\32\1\35\1\uffff\1"+
            "\32\1\35\1\uffff\1\15\1\35\1\6\1\32\2\35\1\uffff\1\35\1\uffff"+
            "\1\32\1\4\1\uffff\1\3\3\uffff\1\32\1\35\1\32\1\35\1\31\3\35"+
            "\1\12\1\32\2\35\1\27\1\10\1\11\1\25\1\13\1\uffff\1\35\1\7\1"+
            "\33\1\35\1\5\1\24\1\uffff\1\1\1\35\2\uffff\1\34\4\uffff\1\23"+
            "\1\22\5\uffff\1\20\1\21\1\16\1\17\16\uffff\1\35",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "784:24: ( statement )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA129_1 = input.LA(1);

                         
                        int index129_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA129_2 = input.LA(1);

                         
                        int index129_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA129_3 = input.LA(1);

                         
                        int index129_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA129_4 = input.LA(1);

                         
                        int index129_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA129_5 = input.LA(1);

                         
                        int index129_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA129_6 = input.LA(1);

                         
                        int index129_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA129_7 = input.LA(1);

                         
                        int index129_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA129_8 = input.LA(1);

                         
                        int index129_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA129_9 = input.LA(1);

                         
                        int index129_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA129_10 = input.LA(1);

                         
                        int index129_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA129_11 = input.LA(1);

                         
                        int index129_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA129_12 = input.LA(1);

                         
                        int index129_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA129_13 = input.LA(1);

                         
                        int index129_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA129_14 = input.LA(1);

                         
                        int index129_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA129_15 = input.LA(1);

                         
                        int index129_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA129_16 = input.LA(1);

                         
                        int index129_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA129_17 = input.LA(1);

                         
                        int index129_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA129_18 = input.LA(1);

                         
                        int index129_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA129_19 = input.LA(1);

                         
                        int index129_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA129_20 = input.LA(1);

                         
                        int index129_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA129_21 = input.LA(1);

                         
                        int index129_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA129_22 = input.LA(1);

                         
                        int index129_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA129_23 = input.LA(1);

                         
                        int index129_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA129_24 = input.LA(1);

                         
                        int index129_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA129_25 = input.LA(1);

                         
                        int index129_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA129_26 = input.LA(1);

                         
                        int index129_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA129_27 = input.LA(1);

                         
                        int index129_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA129_28 = input.LA(1);

                         
                        int index129_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_COMTOR()) ) {s = 48;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index129_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\21\uffff";
    static final String DFA131_eofS =
        "\21\uffff";
    static final String DFA131_minS =
        "\1\47\2\uffff\2\0\14\uffff";
    static final String DFA131_maxS =
        "\1\u0094\2\uffff\2\0\14\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\13\uffff";
    static final String DFA131_specialS =
        "\3\uffff\1\0\1\1\14\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\3\12\5\17\uffff\1\4\1\uffff\1\4\2\uffff\1\4\5\uffff\1\4"+
            "\3\uffff\1\1\1\uffff\1\4\6\uffff\1\4\1\uffff\1\4\1\uffff\1\5"+
            "\4\uffff\1\4\2\uffff\1\5\2\uffff\1\5\4\uffff\1\5\2\uffff\1\5"+
            "\12\uffff\2\5\5\uffff\4\5\16\uffff\1\1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "788:1: forInit : ( localVariableDeclaration | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_3 = input.LA(1);

                         
                        int index131_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index131_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_4 = input.LA(1);

                         
                        int index131_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred182_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index131_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\17\uffff";
    static final String DFA134_eofS =
        "\17\uffff";
    static final String DFA134_minS =
        "\1\172\12\uffff\1\u0096\1\172\2\uffff";
    static final String DFA134_maxS =
        "\1\u0097\12\uffff\2\u0096\2\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA134_specialS =
        "\17\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\1\21\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\2\uffff\1\13"+
            "\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14",
            "\1\16\33\uffff\1\15",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "813:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );";
        }
    }
    static final String DFA152_eotS =
        "\14\uffff";
    static final String DFA152_eofS =
        "\14\uffff";
    static final String DFA152_minS =
        "\1\47\2\uffff\1\0\10\uffff";
    static final String DFA152_maxS =
        "\1\174\2\uffff\1\0\10\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\6\uffff\1\3";
    static final String DFA152_specialS =
        "\3\uffff\1\0\10\uffff}>";
    static final String[] DFA152_transitionS = {
            "\13\4\17\uffff\1\4\1\uffff\1\4\2\uffff\1\4\5\uffff\1\4\5\uffff"+
            "\1\4\6\uffff\1\4\1\uffff\1\4\1\uffff\1\4\4\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\2\uffff\1\3\12\uffff\1\2\1\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "942:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_COMTOR()) ) {s = 11;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA155_eotS =
        "\41\uffff";
    static final String DFA155_eofS =
        "\1\4\40\uffff";
    static final String DFA155_minS =
        "\1\130\1\0\1\uffff\1\0\35\uffff";
    static final String DFA155_maxS =
        "\1\u0097\1\0\1\uffff\1\0\35\uffff";
    static final String DFA155_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\34\uffff";
    static final String DFA155_specialS =
        "\1\uffff\1\0\1\uffff\1\1\35\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\4\27\uffff\1\2\1\4\1\uffff\1\4\1\1\3\4\1\3\1\uffff\1\4\2"+
            "\uffff\27\4\1\uffff\3\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "969:9: ( identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_COMTOR()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA155_3 = input.LA(1);

                         
                        int index155_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_COMTOR()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index155_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\41\uffff";
    static final String DFA157_eofS =
        "\1\4\40\uffff";
    static final String DFA157_minS =
        "\1\130\1\0\1\uffff\1\0\35\uffff";
    static final String DFA157_maxS =
        "\1\u0097\1\0\1\uffff\1\0\35\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\34\uffff";
    static final String DFA157_specialS =
        "\1\uffff\1\0\1\uffff\1\1\35\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\4\27\uffff\1\2\1\4\1\uffff\1\4\1\1\3\4\1\3\1\uffff\1\4\2"+
            "\uffff\27\4\1\uffff\3\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "974:9: ( identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_COMTOR()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_3 = input.LA(1);

                         
                        int index157_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_COMTOR()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index157_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\13\uffff";
    static final String DFA165_eofS =
        "\13\uffff";
    static final String DFA165_minS =
        "\1\160\1\47\1\uffff\1\107\7\uffff";
    static final String DFA165_maxS =
        "\1\170\1\u0085\1\uffff\1\u0097\7\uffff";
    static final String DFA165_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\1\2\1\4\1\6\1\7\1\10\1\5";
    static final String DFA165_specialS =
        "\13\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\2\3\uffff\1\1\3\uffff\1\3",
            "\13\5\17\uffff\1\5\1\uffff\1\5\2\uffff\1\5\5\uffff\1\5\5\uffff"+
            "\1\5\6\uffff\1\5\1\uffff\1\5\1\uffff\1\5\4\uffff\1\5\2\uffff"+
            "\1\5\2\uffff\1\5\4\uffff\1\5\2\uffff\1\5\4\uffff\1\4\5\uffff"+
            "\2\5\5\uffff\4\5",
            "",
            "\1\6\25\uffff\1\11\7\uffff\1\10\2\uffff\1\7\56\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "1000:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator );";
        }
    }
    static final String DFA164_eotS =
        "\41\uffff";
    static final String DFA164_eofS =
        "\1\1\40\uffff";
    static final String DFA164_minS =
        "\1\130\1\uffff\1\0\36\uffff";
    static final String DFA164_maxS =
        "\1\u0097\1\uffff\1\0\36\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA164_specialS =
        "\2\uffff\1\0\36\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\1\30\uffff\1\1\1\uffff\1\1\1\2\4\1\1\uffff\1\1\2\uffff\27"+
            "\1\1\uffff\3\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1004:9: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_2 = input.LA(1);

                         
                        int index164_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_COMTOR()) ) {s = 32;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA170_eotS =
        "\41\uffff";
    static final String DFA170_eofS =
        "\1\2\40\uffff";
    static final String DFA170_minS =
        "\1\130\1\0\37\uffff";
    static final String DFA170_maxS =
        "\1\u0097\1\0\37\uffff";
    static final String DFA170_acceptS =
        "\2\uffff\1\2\35\uffff\1\1";
    static final String DFA170_specialS =
        "\1\uffff\1\0\37\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\2\30\uffff\1\2\1\uffff\1\2\1\1\4\2\1\uffff\1\2\2\uffff\27"+
            "\2\1\uffff\3\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "()* loopback of 1042:9: ( '[' expression ']' )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_1 = input.LA(1);

                         
                        int index170_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_COMTOR()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index170_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA196_eotS =
        "\55\uffff";
    static final String DFA196_eofS =
        "\55\uffff";
    static final String DFA196_minS =
        "\1\47\1\uffff\10\0\43\uffff";
    static final String DFA196_maxS =
        "\1\u0097\1\uffff\10\0\43\uffff";
    static final String DFA196_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\42\uffff";
    static final String DFA196_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\43\uffff}>";
    static final String[] DFA196_transitionS = {
            "\1\5\12\6\15\uffff\2\12\1\10\1\12\1\10\2\uffff\1\10\1\12\1"+
            "\uffff\1\12\1\uffff\1\12\1\10\1\uffff\1\12\1\uffff\1\12\1\uffff"+
            "\1\10\1\12\1\uffff\1\12\3\uffff\1\10\1\12\1\10\1\12\1\7\4\12"+
            "\1\10\2\12\1\3\2\12\1\2\1\12\1\uffff\2\12\1\11\2\12\1\4\1\uffff"+
            "\2\12\2\uffff\1\12\4\uffff\2\12\5\uffff\4\12\16\uffff\1\12\2"+
            "\uffff\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_eotS);
    static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_eofS);
    static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_minS);
    static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_maxS);
    static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_acceptS);
    static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_specialS);
    static final short[][] DFA196_transition;

    static {
        int numStates = DFA196_transitionS.length;
        DFA196_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA196_transition[i] = DFA.unpackEncodedString(DFA196_transitionS[i]);
        }
    }

    class DFA196 extends DFA {

        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = DFA196_eot;
            this.eof = DFA196_eof;
            this.min = DFA196_min;
            this.max = DFA196_max;
            this.accept = DFA196_accept;
            this.special = DFA196_special;
            this.transition = DFA196_transition;
        }
        public String getDescription() {
            return "320:9: ( explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA196_2 = input.LA(1);

                         
                        int index196_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index196_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA196_3 = input.LA(1);

                         
                        int index196_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index196_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA196_4 = input.LA(1);

                         
                        int index196_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index196_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA196_5 = input.LA(1);

                         
                        int index196_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index196_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA196_6 = input.LA(1);

                         
                        int index196_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index196_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA196_7 = input.LA(1);

                         
                        int index196_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index196_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA196_8 = input.LA(1);

                         
                        int index196_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index196_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA196_9 = input.LA(1);

                         
                        int index196_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_COMTOR()) ) {s = 1;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index196_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_compilationUnit_in_start174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_compilationUnit197 = new BitSet(new long[]{0x8000000000000000L,0x00404899D4814080L,0x0000000000100000L});
    public static final BitSet FOLLOW_importDeclarations_in_compilationUnit208 = new BitSet(new long[]{0x8000000000000002L,0x00404899D4014080L,0x0000000000100000L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit219 = new BitSet(new long[]{0x8000000000000002L,0x00404899D4014080L,0x0000000000100000L});
    public static final BitSet FOLLOW_annotations_in_compilationUnit248 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit253 = new BitSet(new long[]{0x8000000000000000L,0x00404899D4814080L,0x0000000000100000L});
    public static final BitSet FOLLOW_importDeclarations_in_compilationUnit263 = new BitSet(new long[]{0x8000000000000002L,0x00404899D4014080L,0x0000000000100000L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit273 = new BitSet(new long[]{0x8000000000000002L,0x00404899D4014080L,0x0000000000100000L});
    public static final BitSet FOLLOW_PACKAGE_in_packageDeclaration318 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration320 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importDeclaration_in_importDeclarations348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration382 = new BitSet(new long[]{0x0000008000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration394 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_importDeclaration416 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOT_in_importDeclaration418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_STAR_in_importDeclaration420 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importDeclaration473 = new BitSet(new long[]{0x0000008000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_STATIC_in_importDeclaration485 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_importDeclaration508 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOT_in_importDeclaration521 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_importDeclaration525 = new BitSet(new long[]{0x0000000000000000L,0x0140000000000000L});
    public static final BitSet FOLLOW_DOT_in_importDeclaration549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_STAR_in_importDeclaration553 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_importDeclaration574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedImportName619 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedImportName630 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedImportName632 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_typeDeclaration681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_modifiers746 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_PROTECTED_in_modifiers756 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_PRIVATE_in_modifiers766 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_STATIC_in_modifiers776 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ABSTRACT_in_modifiers786 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_FINAL_in_modifiers796 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_NATIVE_in_modifiers806 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_modifiers816 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_TRANSIENT_in_modifiers826 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VOLATILE_in_modifiers836 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_STRICTFP_in_modifiers846 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_annotation_in_modifiers854 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_FINAL_in_variableModifiers886 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_annotation_in_variableModifiers902 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_LT_in_typeParameters951 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters965 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_typeParameters980 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters982 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_typeParameters1007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration1049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_normalClassDeclaration1070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_CLASS_in_normalClassDeclaration1074 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_normalClassDeclaration1076 = new BitSet(new long[]{0x0000000000000000L,0x0004000000408000L,0x0000000000800000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration1087 = new BitSet(new long[]{0x0000000000000000L,0x0004000000408000L,0x0000000000800000L});
    public static final BitSet FOLLOW_EXTENDS_in_normalClassDeclaration1109 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration1111 = new BitSet(new long[]{0x0000000000000000L,0x0004000000408000L,0x0000000000800000L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_normalClassDeclaration1133 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration1135 = new BitSet(new long[]{0x0000000000000000L,0x0004000000408000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration1168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_typeParameter1237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_EXTENDS_in_typeParameter1248 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_typeBound_in_typeParameter1250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeBound1303 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_AMP_in_typeBound1314 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_typeBound1316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_modifiers_in_enumDeclaration1348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration1361 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enumDeclaration1382 = new BitSet(new long[]{0x0000000000000000L,0x0004000000400000L});
    public static final BitSet FOLLOW_IMPLEMENTS_in_enumDeclaration1393 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration1395 = new BitSet(new long[]{0x0000000000000000L,0x0004000000400000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration1416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_enumBody1477 = new BitSet(new long[]{0x8000008000000000L,0x00C84899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody1488 = new BitSet(new long[]{0x0000000000000000L,0x00C8000000000000L});
    public static final BitSet FOLLOW_COMMA_in_enumBody1510 = new BitSet(new long[]{0x0000000000000000L,0x0048000000000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody1523 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACE_in_enumBody1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1581 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_enumConstants1592 = new BitSet(new long[]{0x8000008000000000L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1594 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_annotations_in_enumConstant1628 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enumConstant1632 = new BitSet(new long[]{0x0000000000000002L,0x0005000000408000L,0x0000000000800000L});
    public static final BitSet FOLLOW_arguments_in_enumConstant1635 = new BitSet(new long[]{0x0000000000000002L,0x0004000000408000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classBody_in_enumConstant1640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumBodyDeclarations1697 = new BitSet(new long[]{0x8000008000000002L,0x0044689DDE0550CAL,0x0000000000900000L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1709 = new BitSet(new long[]{0x8000008000000002L,0x0044689DDE0550CAL,0x0000000000900000L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_normalInterfaceDeclaration1782 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_INTERFACE_in_normalInterfaceDeclaration1785 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_normalInterfaceDeclaration1787 = new BitSet(new long[]{0x0000000000000000L,0x0004000000008000L,0x0000000000800000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration1798 = new BitSet(new long[]{0x0000000000000000L,0x0004000000008000L,0x0000000000800000L});
    public static final BitSet FOLLOW_EXTENDS_in_normalInterfaceDeclaration1820 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration1822 = new BitSet(new long[]{0x0000000000000000L,0x0004000000008000L,0x0000000000800000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration1843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1906 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typeList1917 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_typeList1919 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LBRACE_in_classBody1950 = new BitSet(new long[]{0x8000008000000000L,0x004C689DDE0550CAL,0x0000000000900000L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1962 = new BitSet(new long[]{0x8000008000000000L,0x004C689DDE0550CAL,0x0000000000900000L});
    public static final BitSet FOLLOW_RBRACE_in_classBody1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_interfaceBody2017 = new BitSet(new long[]{0x8000008000000000L,0x0048689DDE0550CAL,0x0000000000900000L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody2029 = new BitSet(new long[]{0x8000008000000000L,0x0048689DDE0550CAL,0x0000000000900000L});
    public static final BitSet FOLLOW_RBRACE_in_interfaceBody2051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_classBodyDeclaration2080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_in_classBodyDeclaration2095 = new BitSet(new long[]{0x0000000000000000L,0x0004000800000000L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration2117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDecl2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDecl2178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl2189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl2200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_methodDeclaration2243 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_typeParameters_in_methodDeclaration2255 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_methodDeclaration2276 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaration2286 = new BitSet(new long[]{0x0000000000000000L,0x0004040000000000L});
    public static final BitSet FOLLOW_THROWS_in_methodDeclaration2297 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaration2299 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LBRACE_in_methodDeclaration2320 = new BitSet(new long[]{0x8003FF8000000000L,0x184DFBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_methodDeclaration2332 = new BitSet(new long[]{0x8003FF8000000000L,0x184DFBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_blockStatement_in_methodDeclaration2354 = new BitSet(new long[]{0x8003FF8000000000L,0x184DFBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_RBRACE_in_methodDeclaration2375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_methodDeclaration2453 = new BitSet(new long[]{0x0000008000000000L,0x000020040A04104AL});
    public static final BitSet FOLLOW_type_in_methodDeclaration2465 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_VOID_in_methodDeclaration2478 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_methodDeclaration2498 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaration2508 = new BitSet(new long[]{0x0000000000000000L,0x0054040800000000L});
    public static final BitSet FOLLOW_LBRACKET_in_methodDeclaration2519 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_methodDeclaration2521 = new BitSet(new long[]{0x0000000000000000L,0x0054040800000000L});
    public static final BitSet FOLLOW_THROWS_in_methodDeclaration2543 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaration2545 = new BitSet(new long[]{0x0000000000000000L,0x0044000800000000L});
    public static final BitSet FOLLOW_block_in_methodDeclaration2600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_methodDeclaration2614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_methodDeclaration2712 = new BitSet(new long[]{0x0000008000000000L,0x000020040A04104AL,0x0000000000800000L});
    public static final BitSet FOLLOW_typeParameters_in_methodDeclaration2723 = new BitSet(new long[]{0x0000008000000000L,0x000020040A04104AL});
    public static final BitSet FOLLOW_type_in_methodDeclaration2747 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_VOID_in_methodDeclaration2763 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_methodDeclaration2783 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaration2793 = new BitSet(new long[]{0x0000000000000000L,0x0054040800000000L});
    public static final BitSet FOLLOW_LBRACKET_in_methodDeclaration2804 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_methodDeclaration2806 = new BitSet(new long[]{0x0000000000000000L,0x0054040800000000L});
    public static final BitSet FOLLOW_THROWS_in_methodDeclaration2828 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaration2830 = new BitSet(new long[]{0x0000000000000000L,0x0044000800000000L});
    public static final BitSet FOLLOW_block_in_methodDeclaration2885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_methodDeclaration2899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_fieldDeclaration3009 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_fieldDeclaration3020 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_fieldDeclaration3030 = new BitSet(new long[]{0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_fieldDeclaration3041 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_fieldDeclaration3043 = new BitSet(new long[]{0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_SEMI_in_fieldDeclaration3064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_variableDeclarator3114 = new BitSet(new long[]{0x0000000000000002L,0x0410000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_variableDeclarator3127 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_variableDeclarator3131 = new BitSet(new long[]{0x0000000000000002L,0x0410000000000000L});
    public static final BitSet FOLLOW_EQ_in_variableDeclarator3153 = new BitSet(new long[]{0x0003FF8000000000L,0x180521242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclarator3155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclaration_in_interfaceBodyDeclaration3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaration_in_interfaceBodyDeclaration3227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceBodyDeclaration3237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceBodyDeclaration3247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_interfaceBodyDeclaration3257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceMethodDeclaration3277 = new BitSet(new long[]{0x0000008000000000L,0x000020040A04104AL,0x0000000000800000L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceMethodDeclaration3289 = new BitSet(new long[]{0x0000008000000000L,0x000020040A04104AL});
    public static final BitSet FOLLOW_type_in_interfaceMethodDeclaration3313 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_VOID_in_interfaceMethodDeclaration3326 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interfaceMethodDeclaration3346 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaration3356 = new BitSet(new long[]{0x0000000000000000L,0x0050040000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_interfaceMethodDeclaration3367 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_interfaceMethodDeclaration3369 = new BitSet(new long[]{0x0000000000000000L,0x0050040000000000L});
    public static final BitSet FOLLOW_THROWS_in_interfaceMethodDeclaration3391 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaration3393 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceMethodDeclaration3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceFieldDeclaration3493 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_interfaceFieldDeclaration3496 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_interfaceFieldDeclaration3498 = new BitSet(new long[]{0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_COMMA_in_interfaceFieldDeclaration3509 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_interfaceFieldDeclaration3511 = new BitSet(new long[]{0x0000000000000000L,0x00C0000000000000L});
    public static final BitSet FOLLOW_SEMI_in_interfaceFieldDeclaration3532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type3575 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_type3588 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_type3592 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_primitiveType_in_type3634 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_type3647 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_type3651 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_classOrInterfaceType3704 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType3715 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOT_in_classOrInterfaceType3737 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_classOrInterfaceType3739 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType3754 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_typeArguments3891 = new BitSet(new long[]{0x0000008000000000L,0x200000040A04104AL});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments3893 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_typeArguments3904 = new BitSet(new long[]{0x0000008000000000L,0x200000040A04104AL});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments3906 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_typeArguments3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument3961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUES_in_typeArgument3971 = new BitSet(new long[]{0x0000000000000002L,0x0000002000008000L});
    public static final BitSet FOLLOW_EXTENDS_in_typeArgument3998 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_SUPER_in_typeArgument4015 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_typeArgument4043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4098 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_qualifiedNameList4109 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4111 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_formalParameters4155 = new BitSet(new long[]{0x8000008000000000L,0x0002489DDA05104AL,0x0000000000100000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters4166 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_formalParameters4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ellipsisParameterDecl_in_formalParameterDecls4221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalParameterDecl_in_formalParameterDecls4233 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterDecls4244 = new BitSet(new long[]{0x8000008000000000L,0x0000489DDA05104AL,0x0000000000100000L});
    public static final BitSet FOLLOW_normalParameterDecl_in_formalParameterDecls4248 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_normalParameterDecl_in_formalParameterDecls4285 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_formalParameterDecls4295 = new BitSet(new long[]{0x8000008000000000L,0x0000489DDA05104AL,0x0000000000100000L});
    public static final BitSet FOLLOW_ellipsisParameterDecl_in_formalParameterDecls4317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_normalParameterDecl4352 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_normalParameterDecl4354 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_normalParameterDecl4356 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_normalParameterDecl4369 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_normalParameterDecl4373 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_variableModifiers_in_ellipsisParameterDecl4438 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_ellipsisParameterDecl4448 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_ellipsisParameterDecl4451 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_ellipsisParameterDecl4461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedName4507 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOT_in_qualifiedName4518 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_qualifiedName4520 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4570 = new BitSet(new long[]{0x0000000000000000L,0x0000012000000000L});
    public static final BitSet FOLLOW_THIS_in_explicitConstructorInvocation4599 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SUPER_in_explicitConstructorInvocation4612 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4632 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_explicitConstructorInvocation4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_explicitConstructorInvocation4675 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOT_in_explicitConstructorInvocation4685 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4696 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_SUPER_in_explicitConstructorInvocation4717 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4727 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_explicitConstructorInvocation4729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations4780 = new BitSet(new long[]{0x8000000000000002L,0x00004899D0010000L,0x0000000000100000L});
    public static final BitSet FOLLOW_MONKEYS_AT_in_annotation4830 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_annotation4832 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotation4846 = new BitSet(new long[]{0x8003FF8000000000L,0x180769BDFA05104AL,0x000000000090003CL});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation4873 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_elementValue_in_annotation4897 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotation4933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs4985 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairs4996 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs4998 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_elementValuePair5044 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_EQ_in_elementValuePair5046 = new BitSet(new long[]{0x8003FF8000000000L,0x180569BDFA05104AL,0x000000000090003CL});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair5048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue5078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue5088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue5098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_elementValueArrayInitializer5118 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACE_in_elementValueArrayInitializer5120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_elementValueArrayInitializer5134 = new BitSet(new long[]{0x8003FF8000000000L,0x180569BDFA05104AL,0x000000000090003CL});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5145 = new BitSet(new long[]{0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayInitializer5160 = new BitSet(new long[]{0x8003FF8000000000L,0x180569BDFA05104AL,0x000000000090003CL});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5162 = new BitSet(new long[]{0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayInitializer5190 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACE_in_elementValueArrayInitializer5194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationTypeDeclaration5230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_MONKEYS_AT_in_annotationTypeDeclaration5232 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationTypeDeclaration5242 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_annotationTypeDeclaration5252 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_annotationTypeBody5284 = new BitSet(new long[]{0x8000008000000000L,0x0048489DDE0550CAL,0x0000000000100000L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5296 = new BitSet(new long[]{0x8000008000000000L,0x0048489DDE0550CAL,0x0000000000100000L});
    public static final BitSet FOLLOW_RBRACE_in_annotationTypeBody5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodDeclaration_in_annotationTypeElementDeclaration5353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclaration_in_annotationTypeElementDeclaration5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_annotationTypeElementDeclaration5373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementDeclaration5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementDeclaration5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementDeclaration5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_annotationTypeElementDeclaration5413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationMethodDeclaration5435 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_annotationMethodDeclaration5438 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_annotationMethodDeclaration5440 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationMethodDeclaration5450 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationMethodDeclaration5452 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000400L});
    public static final BitSet FOLLOW_DEFAULT_in_annotationMethodDeclaration5455 = new BitSet(new long[]{0x8003FF8000000000L,0x180569BDFA05104AL,0x000000000090003CL});
    public static final BitSet FOLLOW_elementValue_in_annotationMethodDeclaration5457 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_annotationMethodDeclaration5486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_block5542 = new BitSet(new long[]{0x8003FF8000000000L,0x184DFBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_blockStatement_in_block5553 = new BitSet(new long[]{0x8003FF8000000000L,0x184DFBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_RBRACE_in_block5574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_blockStatement5610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement5620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement5630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5651 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_localVariableDeclarationStatement5661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableDeclaration5693 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration5695 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_localVariableDeclaration5705 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_localVariableDeclaration5716 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_localVariableDeclaration5718 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_block_in_statement5779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement5802 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_statement5804 = new BitSet(new long[]{0x0000000000000000L,0x4040000000000000L});
    public static final BitSet FOLLOW_COLON_in_statement5807 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_statement5809 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement5813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement5840 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_statement5843 = new BitSet(new long[]{0x0000000000000000L,0x4040000000000000L});
    public static final BitSet FOLLOW_COLON_in_statement5846 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_statement5848 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement5852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_statement5880 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement5882 = new BitSet(new long[]{0x8003FF8000000002L,0x1845FBFFFE2D7ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_statement5884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_ELSE_in_statement5888 = new BitSet(new long[]{0x8003FF8000000000L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_statement5892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forstatement_in_statement5948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_statement5958 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement5960 = new BitSet(new long[]{0x8003FF8000000000L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_statement5962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_statement5996 = new BitSet(new long[]{0x8003FF8000000000L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_statement5998 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_WHILE_in_statement6000 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement6002 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement6004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trystatement_in_statement6038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_statement6048 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement6050 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LBRACE_in_statement6052 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000410L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement6054 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACE_in_statement6056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SYNCHRONIZED_in_statement6090 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_parExpression_in_statement6092 = new BitSet(new long[]{0x0000000000000000L,0x0004000800000000L});
    public static final BitSet FOLLOW_block_in_statement6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_statement6125 = new BitSet(new long[]{0x0003FF8000000000L,0x184121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_statement6128 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement6133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THROW_in_statement6157 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_statement6159 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement6161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_statement6184 = new BitSet(new long[]{0x0000008000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_statement6199 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement6216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_statement6243 = new BitSet(new long[]{0x0000008000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_statement6258 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement6275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_statement6302 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_statement6305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_statement6323 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COLON_in_statement6325 = new BitSet(new long[]{0x8003FF8000000000L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_statement6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_statement6354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups6378 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000410L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup6407 = new BitSet(new long[]{0x8003FF8000000002L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup6418 = new BitSet(new long[]{0x8003FF8000000002L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_CASE_in_switchLabel6449 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_switchLabel6451 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_switchLabel6471 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COLON_in_switchLabel6473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_trystatement6502 = new BitSet(new long[]{0x0000000000000000L,0x0004000800000000L});
    public static final BitSet FOLLOW_block_in_trystatement6504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020020L});
    public static final BitSet FOLLOW_catches_in_trystatement6520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FINALLY_in_trystatement6524 = new BitSet(new long[]{0x0000000000000000L,0x0004000800000000L});
    public static final BitSet FOLLOW_block_in_trystatement6528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_trystatement6544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_trystatement6560 = new BitSet(new long[]{0x0000000000000000L,0x0004000800000000L});
    public static final BitSet FOLLOW_block_in_trystatement6564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches6636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_catchClause_in_catches6647 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_CATCH_in_catchClause6678 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_catchClause6680 = new BitSet(new long[]{0x8000008000000000L,0x0000489DDA05104AL,0x0000000000100000L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause6682 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_catchClause6692 = new BitSet(new long[]{0x0000000000000002L,0x0004000800000000L});
    public static final BitSet FOLLOW_block_in_catchClause6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameter6740 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_formalParameter6742 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BAR_in_formalParameter6745 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_formalParameter6747 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENTIFIER_in_formalParameter6751 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_formalParameter6762 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_formalParameter6764 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_FOR_in_forstatement6835 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forstatement6837 = new BitSet(new long[]{0x8000008000000000L,0x0000489DDA05104AL,0x0000000000100000L});
    public static final BitSet FOLLOW_variableModifiers_in_forstatement6839 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_forstatement6842 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_forstatement6844 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COLON_in_forstatement6846 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_forstatement6857 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forstatement6859 = new BitSet(new long[]{0x8003FF8000000000L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_forstatement6861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forstatement6921 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forstatement6923 = new BitSet(new long[]{0x8003FF8000000000L,0x184169BDFA05104AL,0x000000000090003CL});
    public static final BitSet FOLLOW_forInit_in_forstatement6943 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_forstatement6964 = new BitSet(new long[]{0x0003FF8000000000L,0x184121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_forstatement6984 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_forstatement7005 = new BitSet(new long[]{0x8003FF8000000000L,0x180369BDFA05104AL,0x000000000090003CL});
    public static final BitSet FOLLOW_expressionList_in_forstatement7025 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forstatement7046 = new BitSet(new long[]{0x8003FF8000000002L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_forstatement7048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit7099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit7109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parExpression7129 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_parExpression7131 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parExpression7133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList7162 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList7173 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_expressionList7175 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression7220 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x0000000000CFF000L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression7231 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_expression7233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_assignmentOperator7265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSEQ_in_assignmentOperator7275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBEQ_in_assignmentOperator7285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAREQ_in_assignmentOperator7295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHEQ_in_assignmentOperator7305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPEQ_in_assignmentOperator7315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAREQ_in_assignmentOperator7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARETEQ_in_assignmentOperator7335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTEQ_in_assignmentOperator7345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_assignmentOperator7356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LT_in_assignmentOperator7358 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_EQ_in_assignmentOperator7360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7375 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_EQ_in_assignmentOperator7377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_assignmentOperator7390 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_EQ_in_assignmentOperator7392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression7413 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_QUES_in_conditionalExpression7424 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_conditionalExpression7426 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COLON_in_conditionalExpression7428 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_conditionalExpression_in_conditionalExpression7430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_BARBAR_in_conditionalOrExpression7472 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_AMPAMP_in_conditionalAndExpression7516 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_BAR_in_inclusiveOrExpression7560 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7593 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_CARET_in_exclusiveOrExpression7604 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7637 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_AMP_in_andExpression7648 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7681 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_set_in_equalityExpression7708 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7758 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression7789 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_INSTANCEOF_in_instanceOfExpression7800 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_instanceOfExpression7802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7833 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression7844 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_LT_in_relationalOp7878 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_EQ_in_relationalOp7880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_relationalOp7891 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_EQ_in_relationalOp7893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_relationalOp7903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_relationalOp7913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression7944 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_LT_in_shiftOp7979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_LT_in_shiftOp7981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_shiftOp7992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_shiftOp7994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_shiftOp7996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_shiftOp8007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_shiftOp8009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_set_in_additiveExpression8057 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8107 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000008C0L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression8172 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000000000008C0L});
    public static final BitSet FOLLOW_PLUS_in_unaryExpression8273 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUB_in_unaryExpression8286 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSPLUS_in_unaryExpression8298 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBSUB_in_unaryExpression8310 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression8322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unaryExpressionNotPlusMinus8342 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_unaryExpressionNotPlusMinus8354 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus8366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus8376 = new BitSet(new long[]{0x0000000000000002L,0x0110000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus8387 = new BitSet(new long[]{0x0000000000000002L,0x0110000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_set_in_unaryExpressionNotPlusMinus8408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_castExpression8457 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_primitiveType_in_castExpression8459 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_castExpression8461 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression8463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_castExpression8488 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_castExpression8490 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_castExpression8492 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression8494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary8531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THIS_in_primary8553 = new BitSet(new long[]{0x0000000000000002L,0x0111000000000000L});
    public static final BitSet FOLLOW_DOT_in_primary8564 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary8566 = new BitSet(new long[]{0x0000000000000002L,0x0111000000000000L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary8588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary8609 = new BitSet(new long[]{0x0000000000000002L,0x0111000000000000L});
    public static final BitSet FOLLOW_DOT_in_primary8620 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_primary8622 = new BitSet(new long[]{0x0000000000000002L,0x0111000000000000L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary8644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUPER_in_primary8665 = new BitSet(new long[]{0x0000000000000000L,0x0101000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_primary8675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary8685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_creator_in_primary8695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary8705 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_primary8718 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_primary8722 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_DOT_in_primary8743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_CLASS_in_primary8745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOID_in_primary8780 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_DOT_in_primary8782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_CLASS_in_primary8784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix8810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_superSuffix8820 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_typeArguments_in_superSuffix8823 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_superSuffix8844 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_arguments_in_superSuffix8855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_identifierSuffix8906 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_identifierSuffix8908 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix8929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_CLASS_in_identifierSuffix8931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_identifierSuffix8942 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_identifierSuffix8944 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_identifierSuffix8946 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix8967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix8977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_CLASS_in_identifierSuffix8979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix8989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_identifierSuffix8991 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_identifierSuffix8993 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix8995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix9005 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_THIS_in_identifierSuffix9007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_identifierSuffix9017 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_SUPER_in_identifierSuffix9019 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix9021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffix9031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector9053 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_selector9055 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_arguments_in_selector9066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector9087 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_THIS_in_selector9089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_selector9099 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_SUPER_in_selector9101 = new BitSet(new long[]{0x0000000000000000L,0x0101000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_selector9111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_innerCreator_in_selector9121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_selector9131 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_selector9133 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_selector9135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_creator9155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator9157 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_creator9159 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator9161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_creator9171 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_creator9173 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator9175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayCreator_in_creator9185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_arrayCreator9205 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_createdName_in_arrayCreator9207 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator9217 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator9219 = new BitSet(new long[]{0x0000000000000000L,0x0014000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator9230 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator9232 = new BitSet(new long[]{0x0000000000000000L,0x0014000000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreator9253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_arrayCreator9264 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_createdName_in_arrayCreator9266 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator9276 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_arrayCreator9278 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator9288 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator9302 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_arrayCreator9304 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator9318 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_arrayCreator9340 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_arrayCreator9342 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer9373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer9383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_arrayInitializer9403 = new BitSet(new long[]{0x0003FF8000000000L,0x188D21242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer9419 = new BitSet(new long[]{0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer9438 = new BitSet(new long[]{0x0003FF8000000000L,0x180521242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer9440 = new BitSet(new long[]{0x0000000000000000L,0x0088000000000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayInitializer9490 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_RBRACE_in_arrayInitializer9503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_createdName9551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName9561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_innerCreator9582 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NEW_in_innerCreator9584 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_innerCreator9595 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_innerCreator9616 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_typeArguments_in_innerCreator9627 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator9648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest9669 = new BitSet(new long[]{0x0000000000000002L,0x0004000000408000L,0x0000000000800000L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest9680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_nonWildcardTypeArguments9712 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments9714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_GT_in_nonWildcardTypeArguments9724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_arguments9744 = new BitSet(new long[]{0x8003FF8000000000L,0x180369BDFA05104AL,0x000000000090003CL});
    public static final BitSet FOLLOW_expressionList_in_arguments9747 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arguments9760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_classHeader9892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_CLASS_in_classHeader9894 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_classHeader9896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_enumHeader9916 = new BitSet(new long[]{0x0000008000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_set_in_enumHeader9918 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_enumHeader9924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceHeader9944 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_INTERFACE_in_interfaceHeader9946 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_interfaceHeader9948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationHeader9968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_MONKEYS_AT_in_annotationHeader9970 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_INTERFACE_in_annotationHeader9972 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_annotationHeader9974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_typeHeader9994 = new BitSet(new long[]{0x0000000000000000L,0x0000000004004080L,0x0000000000100000L});
    public static final BitSet FOLLOW_CLASS_in_typeHeader9997 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_ENUM_in_typeHeader9999 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_MONKEYS_AT_in_typeHeader10002 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_INTERFACE_in_typeHeader10006 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_typeHeader10010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_methodHeader10030 = new BitSet(new long[]{0x0000008000000000L,0x000020040A04104AL,0x0000000000800000L});
    public static final BitSet FOLLOW_typeParameters_in_methodHeader10032 = new BitSet(new long[]{0x0000008000000000L,0x000020040A04104AL});
    public static final BitSet FOLLOW_type_in_methodHeader10036 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_VOID_in_methodHeader10038 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_methodHeader10042 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodHeader10044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_fieldHeader10064 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_fieldHeader10066 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_fieldHeader10068 = new BitSet(new long[]{0x0000000000000000L,0x04D0000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_fieldHeader10071 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_fieldHeader10072 = new BitSet(new long[]{0x0000000000000000L,0x04D0000000000000L});
    public static final BitSet FOLLOW_set_in_fieldHeader10076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableHeader10102 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_localVariableHeader10104 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_localVariableHeader10106 = new BitSet(new long[]{0x0000000000000000L,0x04D0000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_localVariableHeader10109 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_localVariableHeader10110 = new BitSet(new long[]{0x0000000000000000L,0x04D0000000000000L});
    public static final BitSet FOLLOW_set_in_localVariableHeader10114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_comments10139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LINE_COMMENT_in_comments10157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred1_COMTOR197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred3_COMTOR197 = new BitSet(new long[]{0x8000000000000000L,0x00404899D4814080L,0x0000000000100000L});
    public static final BitSet FOLLOW_importDeclarations_in_synpred3_COMTOR208 = new BitSet(new long[]{0x8000000000000002L,0x00404899D4014080L,0x0000000000100000L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred3_COMTOR219 = new BitSet(new long[]{0x8000000000000002L,0x00404899D4014080L,0x0000000000100000L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred14_COMTOR702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_synpred30_COMTOR1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_synpred47_COMTOR1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred57_COMTOR2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred58_COMTOR2178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred59_COMTOR2189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred63_COMTOR2332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_synpred65_COMTOR2243 = new BitSet(new long[]{0x0000008000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_typeParameters_in_synpred65_COMTOR2255 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred65_COMTOR2276 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_formalParameters_in_synpred65_COMTOR2286 = new BitSet(new long[]{0x0000000000000000L,0x0004040000000000L});
    public static final BitSet FOLLOW_THROWS_in_synpred65_COMTOR2297 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_synpred65_COMTOR2299 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred65_COMTOR2320 = new BitSet(new long[]{0x8003FF8000000000L,0x184DFBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred65_COMTOR2332 = new BitSet(new long[]{0x8003FF8000000000L,0x184DFBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_blockStatement_in_synpred65_COMTOR2354 = new BitSet(new long[]{0x8003FF8000000000L,0x184DFBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_RBRACE_in_synpred65_COMTOR2375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_synpred71_COMTOR2453 = new BitSet(new long[]{0x0000008000000000L,0x000020040A04104AL});
    public static final BitSet FOLLOW_type_in_synpred71_COMTOR2465 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_VOID_in_synpred71_COMTOR2478 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred71_COMTOR2498 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_formalParameters_in_synpred71_COMTOR2508 = new BitSet(new long[]{0x0000000000000000L,0x0054040800000000L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred71_COMTOR2519 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred71_COMTOR2521 = new BitSet(new long[]{0x0000000000000000L,0x0054040800000000L});
    public static final BitSet FOLLOW_THROWS_in_synpred71_COMTOR2543 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_synpred71_COMTOR2545 = new BitSet(new long[]{0x0000000000000000L,0x0044000800000000L});
    public static final BitSet FOLLOW_block_in_synpred71_COMTOR2600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMI_in_synpred71_COMTOR2614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclaration_in_synpred81_COMTOR3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaration_in_synpred82_COMTOR3227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred83_COMTOR3237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred84_COMTOR3247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ellipsisParameterDecl_in_synpred111_COMTOR4221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalParameterDecl_in_synpred113_COMTOR4233 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred113_COMTOR4244 = new BitSet(new long[]{0x8000008000000000L,0x0000489DDA05104AL,0x0000000000100000L});
    public static final BitSet FOLLOW_normalParameterDecl_in_synpred113_COMTOR4248 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_normalParameterDecl_in_synpred114_COMTOR4285 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred114_COMTOR4295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred119_COMTOR4570 = new BitSet(new long[]{0x0000000000000000L,0x0000012000000000L});
    public static final BitSet FOLLOW_THIS_in_synpred119_COMTOR4599 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SUPER_in_synpred119_COMTOR4612 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_arguments_in_synpred119_COMTOR4632 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred119_COMTOR4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred121_COMTOR4780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodDeclaration_in_synpred132_COMTOR5353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceFieldDeclaration_in_synpred133_COMTOR5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_synpred134_COMTOR5373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_synpred135_COMTOR5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_synpred136_COMTOR5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_synpred137_COMTOR5403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_synpred141_COMTOR5610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred142_COMTOR5620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_synpred146_COMTOR5802 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_synpred146_COMTOR5804 = new BitSet(new long[]{0x0000000000000000L,0x4040000000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred146_COMTOR5807 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_synpred146_COMTOR5809 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred146_COMTOR5813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_synpred148_COMTOR5840 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_synpred148_COMTOR5843 = new BitSet(new long[]{0x0000000000000000L,0x4040000000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred148_COMTOR5846 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_synpred148_COMTOR5848 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred148_COMTOR5852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred149_COMTOR5884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred150_COMTOR5888 = new BitSet(new long[]{0x8003FF8000000000L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_synpred150_COMTOR5892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred165_COMTOR6302 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_SEMI_in_synpred165_COMTOR6305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred166_COMTOR6323 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred166_COMTOR6325 = new BitSet(new long[]{0x8003FF8000000000L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_synpred166_COMTOR6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred170_COMTOR6520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FINALLY_in_synpred170_COMTOR6524 = new BitSet(new long[]{0x0000000000000000L,0x0004000800000000L});
    public static final BitSet FOLLOW_block_in_synpred170_COMTOR6528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred171_COMTOR6544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_synpred173_COMTOR6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_synpred176_COMTOR6839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_synpred177_COMTOR6835 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred177_COMTOR6837 = new BitSet(new long[]{0x8000008000000000L,0x0000489DDA05104AL,0x0000000000100000L});
    public static final BitSet FOLLOW_variableModifiers_in_synpred177_COMTOR6839 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_type_in_synpred177_COMTOR6842 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_synpred177_COMTOR6844 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred177_COMTOR6846 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_synpred177_COMTOR6857 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred177_COMTOR6859 = new BitSet(new long[]{0x8003FF8000000000L,0x1845FBFFFE2D5ACFL,0x000000000090003CL});
    public static final BitSet FOLLOW_statement_in_synpred177_COMTOR6861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_synpred181_COMTOR7048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred182_COMTOR7099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred223_COMTOR8366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred227_COMTOR8457 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_primitiveType_in_synpred227_COMTOR8459 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred227_COMTOR8461 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_unaryExpression_in_synpred227_COMTOR8463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred229_COMTOR8564 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred229_COMTOR8566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred230_COMTOR8588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred232_COMTOR8620 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_IDENTIFIER_in_synpred232_COMTOR8622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred233_COMTOR8644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred245_COMTOR8942 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_synpred245_COMTOR8944 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred245_COMTOR8946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_synpred257_COMTOR9155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred257_COMTOR9157 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_synpred257_COMTOR9159 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred257_COMTOR9161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_synpred258_COMTOR9171 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_synpred258_COMTOR9173 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred258_COMTOR9175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_synpred260_COMTOR9205 = new BitSet(new long[]{0x0000008000000000L,0x000000040A04104AL});
    public static final BitSet FOLLOW_createdName_in_synpred260_COMTOR9207 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred260_COMTOR9217 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred260_COMTOR9219 = new BitSet(new long[]{0x0000000000000000L,0x0014000000000000L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred260_COMTOR9230 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred260_COMTOR9232 = new BitSet(new long[]{0x0000000000000000L,0x0014000000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred260_COMTOR9253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_synpred261_COMTOR9302 = new BitSet(new long[]{0x0003FF8000000000L,0x180121242A04104AL,0x000000000080003CL});
    public static final BitSet FOLLOW_expression_in_synpred261_COMTOR9304 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_RBRACKET_in_synpred261_COMTOR9318 = new BitSet(new long[]{0x0000000000000002L});

}